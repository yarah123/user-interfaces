{"version":3,"file":"default-apps_concierge_src_app_desks_desks-state_service_ts.js","mappings":"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","sources":["./apps/concierge/src/app/desks/desks-state.service.ts","./libs/bookings/src/index.ts","./libs/bookings/src/lib/desk.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { listChildMetadata, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    scan,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\nimport { endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\n\nimport {\n    approveBooking,\n    Booking,\n    checkinBooking,\n    queryPagedBookings,\n    rejectBooking,\n    saveBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifyInfo,\n    notifySuccess,\n    openConfirmModal,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\n\nimport { generateQRCode } from 'libs/common/src/lib/qr-code';\nimport { QueryResponse } from '@placeos/ts-client/dist/esm/resources/functions';\n\nfunction addQRCodeToBooking(booking: Booking): Booking {\n    return new Booking({\n        ...booking,\n        extension_data: {\n            ...booking.extension_data,\n            checkin_qr_code: generateQRCode(\n                `/workplace/#/book/code?asset_id=${encodeURIComponent(\n                    booking.asset_id\n                )}`\n            ),\n        },\n    });\n}\n\nexport interface DeskFilters {\n    date?: number;\n    zones?: string[];\n    show_map?: boolean;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksStateService extends AsyncHandler {\n    private _filters = new BehaviorSubject<DeskFilters>({});\n    private _new_desks = new BehaviorSubject<Desk[]>([]);\n    private _desk_bookings: Booking[] = [];\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly new_desks = this._new_desks.asObservable();\n\n    public get new_desk_count() {\n        return this._new_desks.getValue()?.length || 0;\n    }\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly desks: Observable<Desk[]> = this._filters.pipe(\n        debounceTime(500),\n        switchMap((filters) => {\n            const zones = filters.zones || [];\n            return zones && !zones.includes('All')\n                ? showMetadata(zones[0], 'desks').pipe(\n                      map((m) => (m.details instanceof Array ? m.details : [])),\n                      catchError((_) => of([]))\n                  )\n                : listChildMetadata(this._org.building?.id, {\n                      name: 'desks',\n                  }).pipe(\n                      map((m) =>\n                          m\n                              .map((i) => i.metadata?.desks?.details || [])\n                              .reduce((c: any[], i: any[]) => [...c, ...i], [])\n                      ),\n                      catchError((_) => of([]))\n                  );\n        }),\n        map((list) => {\n            if (!(list instanceof Array)) list = [];\n            list.sort((a, b) => a.name?.localeCompare(b.name));\n            return list.map((i) => new Desk({ ...i, qr_code: '' }));\n        }),\n        shareReplay(1)\n    );\n\n    private _next_page = new Subject<() => QueryResponse<Booking>>();\n    private _call_next_page = new Subject<string>();\n    private _all_zones_keys = ['All', -1, '-1'];\n    public readonly setup_paging = combineLatest([\n        this._filters,\n        this._org.initialised,\n    ]).pipe(\n        debounceTime(500),\n        tap(([filters, loaded]) => {\n            if (!loaded) return;\n            const date = filters.date || Date.now();\n            const zones =\n                !filters.zones ||\n                filters.zones.some((z) => this._all_zones_keys.includes(z))\n                    ? [this._org.building.id]\n                    : filters.zones;\n            this._next_page.next(() =>\n                queryPagedBookings({\n                    period_start: getUnixTime(startOfDay(date)),\n                    period_end: getUnixTime(endOfDay(date)),\n                    type: 'desk',\n                    zones: zones.join(','),\n                    include_checked_out: true,\n                }).pipe(\n                    catchError((_) => of({ data: [], total: 0, next: null }))\n                )\n            );\n            this._call_next_page.next(`RESET_${Date.now()}`);\n        })\n    );\n\n    public readonly paged_bookings = combineLatest([\n        this._next_page,\n        this._call_next_page,\n    ]).pipe(\n        distinctUntilChanged((a, b) => a[1] === b[1]),\n        switchMap(([next_page, action]) => {\n            this._loading.next(true);\n            if (!next_page) {\n                return of({\n                    data: [],\n                    total: 0,\n                    next: null,\n                    reset: action.includes('RESET'),\n                });\n            }\n            // If reset is true, start over\n            if (action.includes('RESET')) {\n                return next_page().pipe(\n                    map((data: any) => ({ ...data, reset: true })),\n                    catchError((_) => of({ data: [], total: 0, next: null }))\n                );\n            }\n            return next_page().pipe(\n                map((data: any) => ({ ...data, reset: false })),\n                catchError((_) => of({ data: [], total: 0, next: null }))\n            );\n        }),\n        scan(\n            (acc, { data, total, next, reset }) => {\n                const list = data;\n                this._next_page.next(next); // Set the next page function\n                if (reset) return { list, total }; // Reset the items array\n                return {\n                    list: [...acc.list, ...list],\n                    total,\n                };\n            },\n            { list: [], total: 0 }\n        ),\n        tap((_) => this._loading.next(false)),\n        shareReplay(1)\n    );\n\n    public readonly has_more_pages = this.paged_bookings.pipe(\n        map((_) => _.list.length < _.total)\n    );\n    public readonly bookings = this.paged_bookings.pipe(map((i) => i.list));\n\n    public nextPage() {\n        this._call_next_page.next(`NEXT_${Date.now()}`);\n    }\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n        this.setup_paging.subscribe();\n    }\n\n    public setFilters(filters: DeskFilters) {\n        if (filters.zones?.includes('All')) {\n            filters.zones = [\n                'All',\n                ...this._org\n                    .levelsForBuilding(this._org.building)\n                    .map((lvl) => lvl.id),\n            ];\n        } else if (\n            filters.zones &&\n            this._filters.getValue()?.zones?.includes('All')\n        ) {\n            filters.zones = [];\n        }\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public refresh() {\n        this._loading.next(true);\n        this.timeout('poll', () => this.setFilters(this._filters.getValue()));\n    }\n\n    public addDesks(list: Desk[]) {\n        this._new_desks.next(this._new_desks.getValue().concat(list));\n    }\n\n    public removeNewDesk(desk: Desk) {\n        this._filters.next(this._filters.getValue());\n        this._new_desks.next(\n            this._new_desks.getValue().filter((d) => d.id !== desk.id)\n        );\n    }\n\n    public clearNewDesks() {\n        this._filters.next(this._filters.getValue());\n        this._new_desks.next([]);\n    }\n\n    public async checkinDesk(desk: Booking, state: boolean = true) {\n        const status: any = await checkinBooking(desk.id, state ?? true)\n            .toPromise()\n            .catch((_) => ({ failed: true, error: _ }));\n        if (status.failed) {\n            notifyError(\n                status.error\n                    ? `Error: ${status.error}`\n                    : `Error checking ${state ? 'in' : 'out'} desk booking`\n            );\n            throw status.error;\n        }\n        notifySuccess(`Checked ${state ? 'in' : 'out'} ${desk.user_name}.`);\n    }\n\n    public async approveDesk(desk: Booking) {\n        const success = await approveBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed') {\n            return notifyError('Error approving in desk booking');\n        }\n        notifySuccess(\n            `Approved desk booking for ${desk.user_name} on ${format(\n                desk.date,\n                'MMM do'\n            )}.`\n        );\n        (desk as any).approved = true;\n        (desk as any).rejected = false;\n    }\n\n    public async rejectDesk(desk: Booking) {\n        const success = await rejectBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed') {\n            return notifyError('Error rejecting in desk booking');\n        }\n        notifySuccess(\n            `Rejected desk booking for ${desk.user_name} on ${format(\n                desk.date,\n                'MMM do'\n            )}.`\n        );\n        (desk as any).approved = false;\n        (desk as any).rejected = true;\n    }\n\n    public async giveAccess(desk: Booking) {\n        const success = await saveBooking(\n            new Booking({ ...desk, access: true })\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed')\n            return notifyError('Error giving building access booking host');\n        notifySuccess(\n            `Successfully gave building access to ${desk.user_name} for desk booking.`\n        );\n        this._desk_bookings = [...this._desk_bookings, success] as any;\n    }\n\n    public async rejectAllDesks() {\n        const list = this._desk_bookings || [];\n        if (list.length <= 0)\n            return notifyInfo('No desks to reject for the selected date');\n        const resp = await openConfirmModal(\n            {\n                title: 'Cancel all desk bookings',\n                content:\n                    'Are you sure you want to cancel all bookings for the selected date?',\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (resp.reason !== 'done') return;\n        resp.loading('Rejecting all desks for selected date...');\n        await Promise.all(\n            list.map((desk) => rejectBooking(desk.id).toPromise())\n        );\n        notifySuccess(\n            'Successfully rejected all desk bookings for selected date.'\n        );\n        resp.close();\n    }\n}\n","export * from './lib/bookings.module';\nexport * from './lib/booking-form.service';\nexport * from './lib/booking.class';\nexport * from './lib/booking.utilities';\nexport * from './lib/bookings.fn';\nexport * from './lib/bookings.module';\nexport * from './lib/desk.service';\nexport * from './lib/lockers.service';\nexport * from './lib/booking-details-modal.component';\nexport * from './lib/booking-card.component';\nexport * from './lib/parking-select-modal/parking-select-modal.component';\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {\n    currentUser,\n    DialogEvent,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { first, map } from 'rxjs/operators';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { Desk } from 'libs/organisation/src/lib/desk.class';\nimport { StaffUser, User } from 'libs/users/src/lib/user.class';\n\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskConfirmModalComponent } from './desk-confirm-modal.component';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksService {\n    public can_set_date = true;\n    public error_on_host = true;\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public async bookDesk({\n        desks,\n        host,\n        reason,\n        attendees,\n        date,\n    }: {\n        desks: Desk[];\n        host?: StaffUser;\n        attendees?: User[];\n        reason?: string;\n        date?: Date;\n    }) {\n        if (this.error_on_host && !host) {\n            return notifyError('You need to select a host to book a desk.');\n        } else {\n            host = host || currentUser();\n        }\n        reason = reason || '';\n        const level = this._org.levelWithID(\n            desks[0].zone instanceof Array ? desks[0].zone : [desks[0].zone?.id]\n        );\n        let ref: MatDialogRef<any> = this._dialog.open(\n            DeskQuestionsModalComponent\n        );\n        let success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        ref.close();\n        ref = this._dialog.open(DeskConfirmModalComponent, {\n            data: {\n                host,\n                desks,\n                date: date ? new Date(date) : new Date(),\n                reason,\n                level,\n                can_set_date: this.can_set_date,\n            },\n        });\n        success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        host = ref.componentInstance.host || host;\n        date = ref.componentInstance.date || date;\n        reason = ref.componentInstance.reason || reason;\n        if (!host) {\n            ref.close();\n            return notifyError('You need to select a host to book a desk. ');\n        }\n        ref.componentInstance.loading =\n            'Checking for existing desk bookings...';\n        const bookings = await queryBookings({\n            type: 'desk',\n            period_start: getUnixTime(startOfDay(date || new Date())),\n            period_end: getUnixTime(endOfDay(date || new Date())),\n        }).toPromise();\n        const desk_list = bookings.filter(\n            (d) => d.user_email.toLowerCase() === host.email.toLowerCase()\n        );\n        if (desk_list?.length) {\n            ref.close();\n            return notifyError(\n                'You currently already have a desk booked for the selected date.'\n            );\n        }\n        ref.componentInstance.loading = 'Booking desk...';\n        const users = [host, ...(attendees || [])];\n        await Promise.all([\n            desks.map((desk, idx) =>\n                this.makeDeskBooking(\n                    desk,\n                    host,\n                    date.valueOf() || new Date().valueOf(),\n                    reason,\n                    users[idx]\n                )\n            ),\n        ]);\n        notifySuccess('Successfully booked desk');\n        ref.close();\n        return true;\n    }\n\n    private async makeDeskBooking(\n        desk: Desk,\n        host: StaffUser,\n        date: number,\n        reason: string,\n        for_user: User = null\n    ) {\n        const location = `${desk.zone?.name}-${desk.id}`;\n        const level = this._org.levelWithID(\n            desk.zone instanceof Array ? desk.zone : [desk.zone?.id]\n        );\n        const zones = desk.zone?.id\n            ? [desk.zone?.id, level?.parent_id]\n            : [level?.parent_id];\n        const booking_data = {\n            booking_start: getUnixTime(startOfDay(date)),\n            user_id: for_user?.id || host.id,\n            user_name: for_user?.name || host.name,\n            user_email: for_user?.email || host.email,\n            booking_end: Math.floor(endOfDay(date).valueOf() / 1000),\n            asset_id: desk.id,\n            asset_name: desk.name,\n            title: reason,\n            description: location,\n            zones,\n            booking_type: 'desk',\n            extension_data: {\n                map_id: desk?.map_id || desk?.id,\n                groups: desk.groups,\n                for_user: for_user?.email,\n            },\n        };\n        return saveBooking(booking_data as any).toPromise();\n    }\n}\n"],"names":["MatDialog","listChildMetadata","showMetadata","BehaviorSubject","combineLatest","of","Subject","catchError","debounceTime","distinctUntilChanged","map","scan","shareReplay","switchMap","tap","endOfDay","format","getUnixTime","startOfDay","approveBooking","Booking","checkinBooking","queryPagedBookings","rejectBooking","saveBooking","AsyncHandler","notifyError","notifyInfo","notifySuccess","openConfirmModal","Desk","OrganisationService","generateQRCode","addQRCodeToBooking","booking","extension_data","checkin_qr_code","encodeURIComponent","asset_id","DesksStateService","new_desk_count","_new_desks","getValue","length","nextPage","_call_next_page","next","Date","now","constructor","_org","_dialog","_filters","_desk_bookings","_loading","new_desks","asObservable","loading","filters","desks","pipe","zones","includes","m","details","Array","_","building","id","name","i","metadata","reduce","c","list","sort","a","b","localeCompare","qr_code","_next_page","_all_zones_keys","setup_paging","initialised","loaded","date","some","z","period_start","period_end","type","join","include_checked_out","data","total","paged_bookings","next_page","action","reset","acc","has_more_pages","bookings","subscribe","setFilters","levelsForBuilding","lvl","refresh","timeout","addDesks","concat","removeNewDesk","desk","filter","d","clearNewDesks","checkinDesk","state","_asyncToGenerator","status","toPromise","catch","failed","error","user_name","approveDesk","success","approved","rejected","rejectDesk","giveAccess","_this","access","rejectAllDesks","_this2","resp","title","content","icon","class","reason","Promise","all","close","i0","ɵɵinject","i1","i2","_2","factory","ɵfac","providedIn","currentUser","first","queryBookings","DeskConfirmModalComponent","DeskQuestionsModalComponent","DesksService","can_set_date","error_on_host","bookDesk","host","attendees","level","levelWithID","zone","ref","open","race","componentInstance","event","afterClosed","desk_list","user_email","toLowerCase","email","users","idx","makeDeskBooking","valueOf","for_user","location","parent_id","booking_data","booking_start","user_id","booking_end","Math","floor","asset_name","description","booking_type","map_id","groups"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}