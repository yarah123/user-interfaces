{"version":3,"file":"apps_concierge_src_app_staff_staff_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACyE;AAEjB;AACI;AACM;AACZ;AACqB;AACb;AACD;;;;;;;;;;;;;;;;IAQjDiB,4DAAA,gBAA+C;IACjCA,oDAAA,YAAK;IAAAA,0DAAA,EAAW;;;;;IAoDdA,4DAAA,qBAGC;IACGA,oDAAA,GACJ;IAAAA,0DAAA,EAAa;;;;IAHTA,wDAAA,UAAAK,QAAA,CAAAC,EAAA,CAAkB;IAElBN,uDAAA,EACJ;IADIA,gEAAA,MAAAK,QAAA,CAAAI,YAAA,IAAAJ,QAAA,CAAAK,IAAA,MACJ;;;;;IAqBQV,4DAAA,qBAAwC;IACpCA,oDAAA,GACJ;IAAAA,0DAAA,EAAa;;;;IAFYA,wDAAA,UAAAW,QAAA,CAAc;IACnCX,uDAAA,EACJ;IADIA,gEAAA,MAAAW,QAAA,MACJ;;;;;IAPJX,qEAAA,GAIC;IACGA,wDAAA,IAAAc,2EAAA,yBAEa;IACjBd,mEAAA,EAAe;;;;IAHEA,uDAAA,EAAU;IAAVA,wDAAA,SAAAW,QAAA,CAAU;;;;;;;;;;IA3EnDX,4DAAA,cAA8D;IAIlDA,wDAAA,2BAAAiB,4FAAAC,MAAA;MAAAlB,2DAAA,CAAAoB,IAAA;MAAA,MAAAC,OAAA,GAAArB,2DAAA;MAAA,OAAiBA,yDAAA,CAAAqB,OAAA,CAAAG,OAAA,CAAAN,MAAA,CAAe;IAAA,EAAC;IAEpClB,0DAAA,EAAsB;IACvBA,4DAAA,cAA2B;IACLA,oDAAA,YAAK;IAAAA,0DAAA,EAAQ;IAC/BA,4DAAA,yBAAqC;IACjCA,uDAAA,gBAIE;IACNA,0DAAA,EAAiB;IAErBA,4DAAA,cAAyC;IAEdA,oDAAA,cAAM;IAAAA,0DAAA,EAAQ;IACjCA,4DAAA,0BAAqC;IACjCA,uDAAA,iBAKE;IACNA,0DAAA,EAAiB;IAErBA,4DAAA,eAAkC;IACXA,oDAAA,cAAM;IAAAA,0DAAA,EAAQ;IACjCA,4DAAA,0BAAqC;IACjCA,uDAAA,iBAKE;IACNA,0DAAA,EAAiB;IAGzBA,4DAAA,eAA2B;IACLA,oDAAA,cAAM;IAAAA,0DAAA,EAAQ;IAChCA,4DAAA,0BAAqC;IAKRA,oDAAA,kBAAU;IAAAA,0DAAA,EAAa;IAC5CA,wDAAA,KAAA0B,4DAAA,yBAKa;;IACjB1B,0DAAA,EAAa;IAGrBA,4DAAA,eAA2B;IACJA,oDAAA,cAAM;IAAAA,0DAAA,EAAQ;IACjCA,4DAAA,eAAyC;IAU7BA,wDAAA,KAAA2B,8DAAA,2BAQe;;IACnB3B,0DAAA,EAAa;IAEjBA,4DAAA,kBAMC;IACaA,oDAAA,WAAG;IAAAA,0DAAA,EAAW;IACxBA,4DAAA,eAAkB;IAAAA,oDAAA,oBAAY;IAAAA,0DAAA,EAAM;;;;;;IAxF9CA,uDAAA,EAAkB;IAAlBA,wDAAA,cAAA4B,MAAA,CAAAC,IAAA,CAAkB;IAIhB7B,uDAAA,EAAuC;IAAvCA,wDAAA,mBAAAA,6DAAA,IAAA+B,GAAA,EAAuC;IA6CT/B,uDAAA,IAAiB;IAAjBA,wDAAA,YAAAA,yDAAA,QAAA4B,MAAA,CAAAK,MAAA,EAAiB;IAuBzDjC,uDAAA,GACR;IADQA,wDAAA,cAAAkC,OAAA,GAAAlC,yDAAA,QAAA4B,MAAA,CAAAO,IAAA,oBAAAD,OAAA,CAAAE,KAAA,KAAApC,6DAAA,KAAAqC,GAAA,EACR;IAY0BrC,uDAAA,GAAqB;IAArBA,wDAAA,YAAAsC,GAAA,CAAqB;;;;;;IASzCtC,4DAAA,iBAGC;IACsCA,wDAAA,mBAAAuC,yEAAA;MAAAvC,2DAAA,CAAAwC,IAAA;MAAA,MAAAC,OAAA,GAAAzC,2DAAA;MAAA,OAASA,yDAAA,CAAAyC,OAAA,CAAAC,IAAA,EAAM;IAAA,EAAC;IAAC1C,oDAAA,WAAI;IAAAA,0DAAA,EAAS;;;;;IAGjEA,4DAAA,eAGC;IACGA,uDAAA,sBAAwD;IACxDA,4DAAA,QAAG;IAAAA,oDAAA,gCAAyB;IAAAA,0DAAA,EAAI;;;IADnBA,uDAAA,EAAe;IAAfA,wDAAA,gBAAe;;;;;;IAKhCA,4DAAA,cAAsC;IAI1BA,wDAAA,2BAAA2C,qFAAAzB,MAAA;MAAAlB,2DAAA,CAAA4C,IAAA;MAAA,MAAAC,OAAA,GAAA7C,2DAAA;MAAA,OAAAA,yDAAA,CAAA6C,OAAA,CAAAC,SAAA,GAAA5B,MAAA;IAAA,EAAuB;IAF3BlB,0DAAA,EAIE;IAENA,4DAAA,iBAAyD;IAApBA,wDAAA,mBAAA+C,8EAAA;MAAA/C,2DAAA,CAAA4C,IAAA;MAAA,MAAAI,OAAA,GAAAhD,2DAAA;MAAA,OAASA,yDAAA,CAAAgD,OAAA,CAAAC,OAAA,EAAS;IAAA,EAAC;IACpDjD,oDAAA,kBACJ;IAAAA,0DAAA,EAAS;;;;IANDA,uDAAA,GAAuB;IAAvBA,wDAAA,YAAAkD,MAAA,CAAAJ,SAAA,CAAuB;;;AAYzC,MAAOK,8BAA8B;EA4BvCC,YACqCC,KAAmC,EAC5DC,WAAyD,EACzDC,IAAyB;IAFA,KAAAF,KAAK,GAALA,KAAK;IAC9B,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,IAAI,GAAJA,IAAI;IA9BR,KAAAC,QAAQ,GAAG,IAAIlE,iDAAe,CAAC,CAAC,CAAC;IAElC,KAAAmE,OAAO,GAAG,KAAK;IAEN,KAAAC,OAAO,GAAsB,IAAI,CAACL,KAAK;IACvC,KAAAlB,IAAI,GAAG5C,oDAAa,CAAC,CACjC,IAAI,CAACgE,IAAI,CAACI,eAAe,EACzB,IAAI,CAACH,QAAQ,CAChB,CAAC,CAACI,IAAI,CACHpE,uDAAM,CAAC,CAAC,CAACqE,GAAG,CAAC,KAAK,CAAC,CAACA,GAAG,CAAC,EACxBlE,0DAAS,CAAC,CAAC,CAACkE,GAAG,CAAC,KAAKzE,gEAAY,CAACyE,GAAG,CAACvD,EAAE,EAAE,oBAAoB,CAAC,CAAC,EAChEb,oDAAG,CAAC,CAAC;MAAEqE;IAAO,CAAE,KAAMA,OAAe,IAAI;MAAE1B,KAAK,EAAE,EAAE;MAAE2B,QAAQ,EAAE;IAAE,CAAE,CAAC,EACrErE,4DAAW,CAAC,CAAC,CAAC,CACjB;IACe,KAAAmC,IAAI,GAAG,IAAI3C,sDAAS,CAAC;MACjCoB,EAAE,EAAE,IAAIrB,wDAAW,CAAC,IAAI,CAACoE,KAAK,EAAE/C,EAAE,IAAI,UAAUR,6DAAY,CAAC,CAAC,CAAC,EAAE,CAAC;MAClEY,IAAI,EAAE,IAAIzB,wDAAW,CAAC,IAAI,CAACoE,KAAK,EAAE3C,IAAI,IAAI,EAAE,CAAC;MAC7CsD,KAAK,EAAE,IAAI/E,wDAAW,CAAC,IAAI,CAACoE,KAAK,EAAEW,KAAK,IAAI,EAAE,CAAC;MAC/CC,KAAK,EAAE,IAAIhF,wDAAW,CAAC,IAAI,CAACoE,KAAK,EAAEY,KAAK,IAAI,EAAE,CAAC;MAC/CC,IAAI,EAAE,IAAIjF,wDAAW,CAAC,IAAI,CAACoE,KAAK,EAAEa,IAAI,IAAI,EAAE,CAAC;MAC7C9B,KAAK,EAAE,IAAInD,wDAAW,CAAC,IAAI,CAACoE,KAAK,EAAEjB,KAAK,IAAI,EAAE;KACjD,CAAC;IACF;IACgB,KAAAH,MAAM,GAAG,IAAI,CAACsB,IAAI,CAACY,aAAa;EAQ7C;EAEUlB,OAAOA,CAAA;IAAA,IAAAmB,KAAA;IAAA,OAAAC,wJAAA;MAChB,IAAI,CAACD,KAAI,CAACtB,SAAS,EAAE;MACrBsB,KAAI,CAACE,QAAQ,CAACC,KAAK,EAAE;MACrBH,KAAI,CAACX,OAAO,GAAG,IAAI;MACnBW,KAAI,CAACd,WAAW,CAACkB,YAAY,GAAG,IAAI;MACpC,MAAMrC,IAAI,SAAciC,KAAI,CAACjC,IAAI,CAACyB,IAAI,CAAChE,qDAAI,CAAC,CAAC,CAAC,CAAC,CAAC6E,SAAS,EAAE;MAC3D,MAAMpF,kEAAc,CAAC+E,KAAI,CAACb,IAAI,CAACmB,QAAQ,CAACpE,EAAE,EAAE;QACxCI,IAAI,EAAE,oBAAoB;QAC1BiE,WAAW,EAAE,oBAAoB;QACjCb,OAAO,EAAE;UACL1B,KAAK,EAAE,CAAC,GAAGD,IAAI,CAACC,KAAK,EAAEgC,KAAI,CAACtB,SAAS,CAAC,CAACtD,MAAM,CAAEoF,CAAC,IAAK,CAAC,CAACA,CAAC,CAAC;UACzDb,QAAQ,EAAE5B,IAAI,CAAC4B;;OAEtB,CAAC,CAACU,SAAS,EAAE;MACdL,KAAI,CAACZ,QAAQ,CAACqB,IAAI,CAAC,CAAC,CAAC;MACrBT,KAAI,CAACvC,IAAI,CAACiD,UAAU,CAAC;QACjB1C,KAAK,EAAE,CAAC,GAAGgC,KAAI,CAACvC,IAAI,CAACkD,KAAK,CAAC3C,KAAK,EAAEgC,KAAI,CAACtB,SAAS;OACnD,CAAC;MACFsB,KAAI,CAACtB,SAAS,GAAG,EAAE;MACnBsB,KAAI,CAACX,OAAO,GAAG,KAAK;MACpBW,KAAI,CAACd,WAAW,CAACkB,YAAY,GAAG,KAAK;IAAC;EAC1C;EAEOhD,OAAOA,CAACwD,IAAS;IACpB,IAAI,CAACnD,IAAI,CAACiD,UAAU,CAAC;MACjBpE,IAAI,EAAEsE,IAAI,EAAEtE,IAAI;MAChBsD,KAAK,EAAEgB,IAAI,EAAEhB,KAAK;MAClBC,KAAK,EAAEe,IAAI,EAAEf;KAChB,CAAC;EACN;EAEavB,IAAIA,CAAA;IAAA,IAAAuC,MAAA;IAAA,OAAAZ,wJAAA;MACbY,MAAI,CAACxB,OAAO,GAAG,IAAI;MACnBwB,MAAI,CAAC3B,WAAW,CAACkB,YAAY,GAAG,IAAI;MACpC,MAAMrC,IAAI,SAAc8C,MAAI,CAAC9C,IAAI,CAACyB,IAAI,CAAChE,qDAAI,CAAC,CAAC,CAAC,CAAC,CAAC6E,SAAS,EAAE;MAC3D,MAAMV,QAAQ,GAAG5B,IAAI,EAAE4B,QAAQ,IAAI,EAAE;MACrC,MAAMmB,YAAY,GAAG,CACjB,GAAGnB,QAAQ,CAACvE,MAAM,CAAEoF,CAAC,IAAKA,CAAC,CAACtE,EAAE,KAAK2E,MAAI,CAACvB,OAAO,EAAEpD,EAAE,CAAC,EACpD2E,MAAI,CAACpD,IAAI,CAACkD,KAAK,CAClB,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAC1E,IAAI,CAAC4E,aAAa,CAACD,CAAC,CAAC3E,IAAI,CAAC,CAAC;MAC9C,MAAMrB,kEAAc,CAAC4F,MAAI,CAAC1B,IAAI,CAACmB,QAAQ,CAACpE,EAAE,EAAE;QACxCI,IAAI,EAAE,oBAAoB;QAC1BiE,WAAW,EAAE,oBAAoB;QACjCb,OAAO,EAAE;UAAE1B,KAAK,EAAED,IAAI,CAACC,KAAK;UAAE2B,QAAQ,EAAEmB;QAAY;OACvD,CAAC,CAACT,SAAS,EAAE;MACdQ,MAAI,CAAC3B,WAAW,CAACkB,YAAY,GAAG,IAAI;MACpC3E,8DAAa,CAAC,0CAA0C,CAAC;MACzDoF,MAAI,CAACxB,OAAO,GAAG,KAAK;MACpBwB,MAAI,CAAC3B,WAAW,CAACiB,KAAK,EAAE;IAAC;EAC7B;EAAC,QAAAK,CAAA;qBAnFQzB,8BAA8B,EAAAnD,+DAAA,CA6B3BjB,sEAAe,GAAAiB,+DAAA,CAAAwF,mEAAA,GAAAxF,+DAAA,CAAAyF,sEAAA;EAAA;EAAA,QAAAC,EAAA;UA7BlBvC,8BAA8B;IAAAwC,SAAA;IAAAC,SAAA,WAAAC,qCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;kEA0B5B/F,uEAAsB;;;;;;;;;;;;QAhK7BC,4DAAA,aAAQ;QACAA,oDAAA,GAAgD;QAAAA,0DAAA,EAAK;QACzDA,uDAAA,aAA8B;QAC9BA,wDAAA,IAAAgG,gDAAA,oBAES;QACbhG,0DAAA,EAAS;QACTA,wDAAA,IAAAiG,8CAAA,oBA8FO,IAAAC,gDAAA,wBAAAC,qDAAA,gCAAAnG,oEAAA,KAAAqG,qDAAA,gCAAArG,oEAAA;;;;QApGCA,uDAAA,GAAgD;QAAhDA,gEAAA,KAAA+F,GAAA,CAAArC,OAAA,wCAAgD;QAErB1D,uDAAA,GAAc;QAAdA,wDAAA,UAAA+F,GAAA,CAAAtC,OAAA,CAAc;QAIpBzD,uDAAA,EAAgB;QAAhBA,wDAAA,UAAA+F,GAAA,CAAAtC,OAAA,CAAgB,aAAA6C,GAAA;QAgGxCtG,uDAAA,EAAc;QAAdA,wDAAA,UAAA+F,GAAA,CAAAtC,OAAA,CAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpH0B;AACO;AACM;AACR;AACiB;AACU;AACX;AACO;;;;;;;;;;;;;;;;;;;IA0DjDzD,6DAAA,qBAGC;IACGA,qDAAA,GACJ;IAAAA,2DAAA,EAAa;;;;IAHTA,yDAAA,UAAA0G,OAAA,CAAc;IAEd1G,wDAAA,EACJ;IADIA,iEAAA,MAAA0G,OAAA,MACJ;;;;;IAoDR1G,6DAAA,eAGC;IACGA,qDAAA,GACJ;IAAAA,2DAAA,EAAO;;;;IADHA,wDAAA,EACJ;IADIA,iEAAA,MAAAW,QAAA,MACJ;;;;;IALAX,yDAAA,IAAA2G,yDAAA,mBAKO;;;;IAHc3G,yDAAA,YAAA4G,OAAA,CAAO;;;;;IAM5B5G,qDAAA,GACJ;;;;;;IADIA,iEAAA,MAAA6G,QAAA,IAAAC,OAAA,GAAA9G,0DAAA,OAAA6G,QAAA,oBAAAC,OAAA,CAAArG,YAAA,cACJ;;;;;;IAEIT,6DAAA,cAEC;IAC0BA,yDAAA,mBAAA+G,2EAAA;MAAA,MAAAC,WAAA,GAAAhH,4DAAA,CAAAoB,IAAA;MAAA,MAAA6F,OAAA,GAAAD,WAAA,CAAAE,GAAA;MAAA,MAAA7F,OAAA,GAAArB,4DAAA;MAAA,OAASA,0DAAA,CAAAqB,OAAA,CAAA8F,WAAA,CAAAF,OAAA,CAAgB;IAAA,EAAC;IAC7CjH,6DAAA,eAAU;IAAAA,qDAAA,WAAI;IAAAA,2DAAA,EAAW;IAE7BA,6DAAA,iBAAoD;IAA7BA,yDAAA,mBAAAoH,2EAAA;MAAA,MAAAJ,WAAA,GAAAhH,4DAAA,CAAAoB,IAAA;MAAA,MAAA6F,OAAA,GAAAD,WAAA,CAAAE,GAAA;MAAA,MAAAzE,OAAA,GAAAzC,4DAAA;MAAA,OAASA,0DAAA,CAAAyC,OAAA,CAAA4E,aAAA,CAAAJ,OAAA,CAAkB;IAAA,EAAC;IAC/CjH,6DAAA,eAAU;IAAAA,qDAAA,aAAM;IAAAA,2DAAA,EAAW;;;;;;;;;;;;AAoBrD,MAAOsH,0BAA0B;EAyBnClE,YACYG,IAAyB,EACzBgE,OAAkB;IADlB,KAAAhE,IAAI,GAAJA,IAAI;IACJ,KAAAgE,OAAO,GAAPA,OAAO;IA1BX,KAAAC,OAAO,GAAG,IAAIlI,kDAAe,CAAS,CAAC,CAAC;IAEzC,KAAAmI,MAAM,GAAG,EAAE;IACF,KAAAC,WAAW,GAAG,IAAIpI,kDAAe,CAAS,EAAE,CAAC;IAC7C,KAAA6C,IAAI,GAAG5C,oDAAa,CAAC,CACjC,IAAI,CAACgE,IAAI,CAACI,eAAe,EACzB,IAAI,CAAC6D,OAAO,CACf,CAAC,CAAC5D,IAAI,CACHpE,uDAAM,CAAC,CAAC,CAACqE,GAAG,CAAC,KAAK,CAAC,CAACA,GAAG,CAAC,EACxBlE,0DAAS,CAAC,CAAC,CAACkE,GAAG,CAAC,KAAKzE,gEAAY,CAACyE,GAAG,CAACvD,EAAE,EAAE,oBAAoB,CAAC,CAAC,EAChEb,oDAAG,CAAC,CAAC;MAAEqE;IAAO,CAAE,KAAMA,OAAe,IAAI;MAAE1B,KAAK,EAAE,EAAE;MAAE2B,QAAQ,EAAE;IAAE,CAAE,CAAC,EACrErE,4DAAW,CAAC,CAAC,CAAC,CACjB;IACe,KAAA0C,KAAK,GAAG,IAAI,CAACD,IAAI,CAACyB,IAAI,CAACnE,oDAAG,CAAEmF,CAAC,IAAKA,CAAC,EAAExC,KAAK,IAAI,EAAE,CAAC,CAAC;IAClD,KAAA2B,QAAQ,GAAG,IAAI,CAAC5B,IAAI,CAACyB,IAAI,CAACnE,oDAAG,CAAEmF,CAAC,IAAKA,CAAC,EAAEb,QAAQ,IAAI,EAAE,CAAC,CAAC;IACxD,KAAA4D,iBAAiB,GAAGpI,oDAAa,CAAC,CAC9C,IAAI,CAACwE,QAAQ,EACb,IAAI,CAAC2D,WAAW,CACnB,CAAC,CAAC9D,IAAI,CACHnE,oDAAG,CAAC,CAAC,CAACmI,IAAI,EAAEC,IAAI,CAAC,KACbD,IAAI,CAACpI,MAAM,CAAEoF,CAAC,IAAK,CAACiD,IAAI,IAAIjD,CAAC,CAACxC,KAAK,CAAC0F,QAAQ,CAACD,IAAI,CAAC,CAAC,CACtD,CACJ;EAKE;EAEIE,QAAQA,CAAA,GAAI;EAEZC,WAAWA,CAAA;IACd,MAAMC,GAAG,GAAG,IAAI,CAACV,OAAO,CAACW,IAAI,CAACzB,0FAA4B,EAAE,EAAE,CAAC;IAC/DwB,GAAG,CAACE,WAAW,EAAE,CAACC,SAAS,CAAC,MAAM,IAAI,CAACZ,OAAO,CAAC3C,IAAI,CAACwD,IAAI,CAACC,GAAG,EAAE,CAAC,CAAC;EACpE;EAEOnB,WAAWA,CAACzD,OAA0B;IACzC,MAAMuE,GAAG,GAAG,IAAI,CAACV,OAAO,CAACW,IAAI,CAAC/E,8FAA8B,EAAE;MAC1DhB,IAAI,EAAEuB;KACT,CAAC;IACFuE,GAAG,CAACE,WAAW,EAAE,CAACC,SAAS,CAAC,MAAM,IAAI,CAACZ,OAAO,CAAC3C,IAAI,CAACwD,IAAI,CAACC,GAAG,EAAE,CAAC,CAAC;EACpE;EAEajB,aAAaA,CAAC3D,OAAyB;IAAA,IAAAU,KAAA;IAAA,OAAAC,wJAAA;MAChD,MAAMkE,MAAM,SAAS/B,iEAAgB,CACjC;QACIgC,KAAK,EAAE,0BAA0B;QACjCC,OAAO,EAAE,mCAAmC/E,OAAO,CAAChD,IAAI,+BAA+B;QACvFgI,IAAI,EAAE;UAAED,OAAO,EAAE;QAAQ;OAC5B,EACDrE,KAAI,CAACmD,OAAO,CACf;MACD,IAAIgB,MAAM,CAACI,MAAM,KAAK,MAAM,EAAE;MAC9BJ,MAAM,CAAC9E,OAAO,CAAC,qBAAqB,CAAC;MACrC,MAAMtB,IAAI,SAAciC,KAAI,CAACjC,IAAI,CAACyB,IAAI,CAAChE,qDAAI,CAAC,CAAC,CAAC,CAAC,CAAC6E,SAAS,EAAE;MAC3D,MAAMS,YAAY,GAAG,CAAC/C,IAAI,EAAE4B,QAAQ,IAAI,EAAE,EAAEvE,MAAM,CAC7CoF,CAAC,IAAKA,CAAC,CAACtE,EAAE,KAAKoD,OAAO,CAACpD,EAAE,CAC7B;MACD,MAAMjB,kEAAc,CAAC+E,KAAI,CAACb,IAAI,CAACmB,QAAQ,CAACpE,EAAE,EAAE;QACxCI,IAAI,EAAE,oBAAoB;QAC1BiE,WAAW,EAAE,oBAAoB;QACjCb,OAAO,EAAE;UAAE1B,KAAK,EAAED,IAAI,CAACC,KAAK;UAAE2B,QAAQ,EAAEmB;QAAY;OACvD,CAAC,CAACT,SAAS,EAAE;MACd8D,MAAM,CAAChE,KAAK,EAAE;MACdH,KAAI,CAACoD,OAAO,CAAC3C,IAAI,CAACwD,IAAI,CAACC,GAAG,EAAE,CAAC;MAC7BzI,8DAAa,CAAC,yCAAyC,CAAC;IAAC;EAC7D;EAAC,QAAA+E,CAAA;qBAnEQ0C,0BAA0B,EAAAtH,gEAAA,CAAAwF,sEAAA,GAAAxF,gEAAA,CAAAyF,gEAAA;EAAA;EAAA,QAAAC,EAAA;UAA1B4B,0BAA0B;IAAA3B,SAAA;IAAAiD,KAAA,EAAA7G,GAAA;IAAA8G,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,oCAAAnD,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QAtI/B9F,wDAAA,iBAAyB;QACzBA,6DAAA,aAA8B;QAC1BA,wDAAA,kBAA2B;QAC3BA,6DAAA,cAAgD;QAGHA,qDAAA,yBAAkB;QAAAA,2DAAA,EAAK;QACxDA,6DAAA,aAAyC;QAMjCA,yDAAA,mBAAAkJ,4DAAA;UAAA,OAASnD,GAAA,CAAAiC,WAAA,EAAa;QAAA,EAAC;QAEvBhI,6DAAA,gBAAU;QAAAA,qDAAA,gBAAQ;QAAAA,2DAAA,EAAW;QAEjCA,6DAAA,iBAKC;QADGA,yDAAA,mBAAAmJ,6DAAA;UAAA,OAASpD,GAAA,CAAAoB,WAAA,EAAa;QAAA,EAAC;QAEvBnH,6DAAA,mBAA2B;QAAAA,qDAAA,WAAG;QAAAA,2DAAA,EAAW;QACzCA,6DAAA,cAAkB;QAAAA,qDAAA,mBAAW;QAAAA,2DAAA,EAAM;QAI/CA,6DAAA,eAAyD;QAO7CA,yDAAA,2BAAAoJ,yEAAAlI,MAAA;UAAA,OAAiB6E,GAAA,CAAA2B,WAAA,CAAA7C,IAAA,CAAA3D,MAAA,CAAwB;QAAA,EAAC;QAG1ClB,6DAAA,sBAAqB;QAAAA,qDAAA,iBAAS;QAAAA,2DAAA,EAAa;QAC3CA,yDAAA,KAAAqJ,iDAAA,yBAKa;;QACjBrJ,2DAAA,EAAa;QAEjBA,6DAAA,cAAyC;QAM7BA,qDAAA,gBACJ;QAAAA,2DAAA,EAAW;QACXA,6DAAA,iBAIE;QAFEA,yDAAA,2BAAAsJ,oEAAApI,MAAA;UAAA,OAAA6E,GAAA,CAAA0B,MAAA,GAAAvG,MAAA;QAAA,EAAoB;QAFxBlB,2DAAA,EAIE;QAKlBA,6DAAA,mBAAwD;QACpDA,wDAAA,wBA6BgB;QAChBA,yDAAA,KAAAuJ,kDAAA,iCAAAvJ,qEAAA,CAOc,KAAAwJ,kDAAA,iCAAAxJ,qEAAA,MAAAyJ,kDAAA,iCAAAzJ,qEAAA;QAgBlBA,2DAAA,EAAU;;;;;;QApFMA,wDAAA,IAAkC;QAAlCA,yDAAA,YAAA+F,GAAA,CAAA2B,WAAA,CAAAgC,QAAA,GAAkC;QAMb1J,wDAAA,GAAwB;QAAxBA,yDAAA,YAAAA,0DAAA,SAAA+F,GAAA,CAAA3D,KAAA,KAAApC,8DAAA,KAAAqC,GAAA,EAAwB;QAiBzCrC,wDAAA,GAAoB;QAApBA,yDAAA,YAAA+F,GAAA,CAAA0B,MAAA,CAAoB;QAUhCzH,wDAAA,GAAgC;QAAhCA,yDAAA,eAAA+F,GAAA,CAAA4B,iBAAA,CAAgC,WAAA5B,GAAA,CAAA0B,MAAA,aAAAzH,8DAAA,KAAA2J,GAAA,qBAAA3J,8DAAA,KAAA4J,GAAA,kBAAA5J,8DAAA,KAAA6J,GAAA,eAAA7J,8DAAA,KAAA+J,GAAA,EAAAC,GAAA,EAAA1D,GAAA,EAAAhE,GAAA,YAAAyD,GAAA,CAAA0B,MAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5FE;;;;;;;;;;;;IAW1CzH,uDAAA,0BAIoB;;;AAgB9B,MAAOkK,iBAAiB;EAG1B9G,YAAoB+G,MAAyB;IAAzB,KAAAA,MAAM,GAANA,MAAM;IAFV,KAAA1G,OAAO,GAAG,IAAI,CAAC0G,MAAM,CAAC1G,OAAO;EAEG;EAEzCsE,QAAQA,CAAA;IACX,IAAI,CAACoC,MAAM,CAACC,YAAY,EAAE;EAC9B;EAEOC,WAAWA,CAAA;IACd,IAAI,CAACF,MAAM,CAACG,WAAW,EAAE;EAC7B;EAAC,QAAA1F,CAAA;qBAXQsF,iBAAiB,EAAAlK,+DAAA,CAAAwF,mEAAA;EAAA;EAAA,QAAAE,EAAA;UAAjBwE,iBAAiB;IAAAvE,SAAA;IAAAiD,KAAA,EAAA7G,GAAA;IAAA8G,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAuB,2BAAAzE,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QA1BtB9F,uDAAA,iBAAyB;QACzBA,4DAAA,aAA8B;QAC1BA,uDAAA,kBAA2B;QAC3BA,4DAAA,cAAgD;QAC5CA,uDAAA,sBAA4C;QAE5CA,wDAAA,IAAAwK,6CAAA,8BAIoB;;QACxBxK,0DAAA,EAAO;;;QAHEA,uDAAA,GAAqB;QAArBA,wDAAA,SAAAA,yDAAA,OAAA+F,GAAA,CAAAtC,OAAA,EAAqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdc;AACK;AACD;AACM;AACZ;AACqB;;;;;;;;;;;;;;IAyB/DzD,qEAAA,GAAiD;IAC7CA,4DAAA,aAEC;IACgCA,oDAAA,GAAU;IAAAA,0DAAA,EAAM;IAC7CA,4DAAA,gBAOC;IAHGA,wDAAA,mBAAAyK,8EAAA;MAAA,MAAAzD,WAAA,GAAAhH,2DAAA,CAAA0K,GAAA;MAAA,MAAAC,OAAA,GAAA3D,WAAA,CAAA4D,SAAA;MAAA,MAAAC,MAAA,GAAA7K,2DAAA;MAAA6K,MAAA,CAAAC,MAAA,GAAAH,OAAA;MAAA,OAAA3K,yDAAA,CAAA6K,MAAA,CAAA/H,SAAA,GAAA6H,OAAA;IAAA,EAAyC;IAIzC3K,4DAAA,eAAU;IAAAA,oDAAA,WAAI;IAAAA,0DAAA,EAAW;IAE7BA,4DAAA,gBAAsD;IAA3BA,wDAAA,mBAAA+K,8EAAA;MAAA,MAAA/D,WAAA,GAAAhH,2DAAA,CAAA0K,GAAA;MAAA,MAAAC,OAAA,GAAA3D,WAAA,CAAA4D,SAAA;MAAA,MAAAI,MAAA,GAAAhL,2DAAA;MAAA,OAASA,yDAAA,CAAAgL,MAAA,CAAAC,UAAA,CAAAN,OAAA,CAAgB;IAAA,EAAC;IACjD3K,4DAAA,eAAU;IAAAA,oDAAA,aAAM;IAAAA,0DAAA,EAAW;IAGvCA,mEAAA,EAAe;;;;;;IAfsBA,uDAAA,GAAU;IAAVA,+DAAA,CAAA2K,OAAA,CAAU;IAOnC3K,uDAAA,EAAqB;IAArBA,wDAAA,YAAAgK,GAAA,CAAqB;;;;;;IAWjChK,4DAAA,cAAsC;IAI1BA,wDAAA,2BAAAmL,oFAAAjK,MAAA;MAAAlB,2DAAA,CAAAoL,GAAA;MAAA,MAAAC,MAAA,GAAArL,2DAAA;MAAA,OAAAA,yDAAA,CAAAqL,MAAA,CAAAvI,SAAA,GAAA5B,MAAA;IAAA,EAAuB;IAF3BlB,0DAAA,EAIE;IAENA,4DAAA,iBAA6D;IAAxBA,wDAAA,mBAAAsL,6EAAA;MAAAtL,2DAAA,CAAAoL,GAAA;MAAA,MAAAG,MAAA,GAAAvL,2DAAA;MAAA,OAASA,yDAAA,CAAAuL,MAAA,CAAAC,WAAA,EAAa;IAAA,EAAC;IACxDxL,oDAAA,kBACJ;IAAAA,0DAAA,EAAS;;;;IANDA,uDAAA,GAAuB;IAAvBA,wDAAA,YAAA4B,MAAA,CAAAkB,SAAA,CAAuB;;;AAYzC,MAAO2D,4BAA4B;EAmBxBwE,UAAUA,CAACpD,IAAY;IAAA,IAAAzD,KAAA;IAAA,OAAAC,wJAAA;MAChC,IAAI,CAACwD,IAAI,EAAE;MACXzD,KAAI,CAACX,OAAO,GAAG,IAAI;MACnBW,KAAI,CAACd,WAAW,CAACkB,YAAY,GAAG,IAAI;MACpC,MAAMrC,IAAI,SAAciC,KAAI,CAACjC,IAAI,CAACyB,IAAI,CAAChE,oDAAI,CAAC,CAAC,CAAC,CAAC,CAAC6E,SAAS,EAAE;MAC3D,MAAMpF,kEAAc,CAAC+E,KAAI,CAACb,IAAI,CAACmB,QAAQ,CAACpE,EAAE,EAAE;QACxCI,IAAI,EAAE,oBAAoB;QAC1BiE,WAAW,EAAE,oBAAoB;QACjCb,OAAO,EAAE;UACL1B,KAAK,EAAE,CAAC,GAAGD,IAAI,CAACC,KAAK,CAAC5C,MAAM,CAAEoF,CAAC,IAAKA,CAAC,KAAKiD,IAAI,CAAC,CAAC,CAC3CrI,MAAM,CAAEoF,CAAC,IAAK,CAAC,CAACA,CAAC,CAAC,CAClBO,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,aAAa,CAACD,CAAC,CAAC,CAAC;UACvCtB,QAAQ,EAAE5B,IAAI,CAAC4B,QAAQ,CAACtE,GAAG,CAAEmF,CAAC,KAAM;YAChC,GAAGA,CAAC;YACJxC,KAAK,EAAEwC,CAAC,CAACxC,KAAK,CAAC5C,MAAM,CAAEiM,CAAC,IAAKA,CAAC,KAAK5D,IAAI;WAC1C,CAAC;;OAET,CAAC,CAACpD,SAAS,EAAE;MACdL,KAAI,CAACZ,QAAQ,CAACqB,IAAI,CAAC,CAAC,CAAC;MACrBT,KAAI,CAACX,OAAO,GAAG,KAAK;MACpBW,KAAI,CAACd,WAAW,CAACkB,YAAY,GAAG,KAAK;IAAC;EAC1C;EAEagH,WAAWA,CAAA;IAAA,IAAAvG,MAAA;IAAA,OAAAZ,wJAAA;MACpB,IAAI,CAACY,MAAI,CAACnC,SAAS,EAAE;MACrBmC,MAAI,CAACxB,OAAO,GAAG,IAAI;MACnBwB,MAAI,CAACX,QAAQ,CAACC,KAAK,EAAE;MACrBU,MAAI,CAAC3B,WAAW,CAACkB,YAAY,GAAG,IAAI;MACpC,MAAMrC,IAAI,SAAc8C,MAAI,CAAC9C,IAAI,CAACyB,IAAI,CAAChE,oDAAI,CAAC,CAAC,CAAC,CAAC,CAAC6E,SAAS,EAAE;MAC3D,MAAMpF,kEAAc,CAAC4F,MAAI,CAAC1B,IAAI,CAACmB,QAAQ,CAACpE,EAAE,EAAE;QACxCI,IAAI,EAAE,oBAAoB;QAC1BiE,WAAW,EAAE,oBAAoB;QACjCb,OAAO,EAAE;UACL1B,KAAK,EAAE,CACH,GAAGD,IAAI,CAACC,KAAK,CAAC5C,MAAM,CAAEoF,CAAC,IAAKA,CAAC,KAAKK,MAAI,CAAC6F,MAAM,CAAC,EAC9C7F,MAAI,CAACnC,SAAS,CACjB,CACItD,MAAM,CAAEoF,CAAC,IAAK,CAAC,CAACA,CAAC,CAAC,CAClBO,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,aAAa,CAACD,CAAC,CAAC,CAAC;UACvCtB,QAAQ,EAAE5B,IAAI,CAAC4B;;OAEtB,CAAC,CAACU,SAAS,EAAE;MACdQ,MAAI,CAACzB,QAAQ,CAACqB,IAAI,CAAC,CAAC,CAAC;MACrBI,MAAI,CAACnC,SAAS,GAAG,EAAE;MACnBmC,MAAI,CAAC6F,MAAM,GAAG,EAAE;MAChB7F,MAAI,CAACxB,OAAO,GAAG,KAAK;MACpBwB,MAAI,CAAC3B,WAAW,CAACkB,YAAY,GAAG,KAAK;IAAC;EAC1C;EAEApB,YACYG,IAAyB,EACzBD,WAAuD;IADvD,KAAAC,IAAI,GAAJA,IAAI;IACJ,KAAAD,WAAW,GAAXA,WAAW;IArEf,KAAAE,QAAQ,GAAG,IAAIlE,iDAAe,CAAC,CAAC,CAAC;IAIlC,KAAAmE,OAAO,GAAG,KAAK;IACN,KAAAtB,IAAI,GAAG5C,mDAAa,CAAC,CACjC,IAAI,CAACgE,IAAI,CAACI,eAAe,EACzB,IAAI,CAACH,QAAQ,CAChB,CAAC,CAACI,IAAI,CACHpE,uDAAM,CAAC,CAAC,CAACqE,GAAG,CAAC,KAAK,CAAC,CAACA,GAAG,CAAC,EACxBlE,0DAAS,CAAC,CAAC,CAACkE,GAAG,CAAC,KAAKzE,gEAAY,CAACyE,GAAG,CAACvD,EAAE,EAAE,oBAAoB,CAAC,CAAC,EAChEb,oDAAG,CAAC,CAAC;MAAEqE;IAAO,CAAE,KAAMA,OAAe,IAAI;MAAE1B,KAAK,EAAE,EAAE;MAAE2B,QAAQ,EAAE;IAAE,CAAE,CAAC,EACrErE,4DAAW,CAAC,CAAC,CAAC,CACjB;IACe,KAAA0C,KAAK,GAAG,IAAI,CAACD,IAAI,CAACyB,IAAI,CAACnE,oDAAG,CAAEmF,CAAC,IAAKA,CAAC,CAACxC,KAAK,CAAC,CAAC;EAwDxD;EAAC,QAAAwC,CAAA;qBAvEK6B,4BAA4B,EAAAzG,+DAAA,CAAAwF,sEAAA,GAAAxF,+DAAA,CAAAyF,mEAAA;EAAA;EAAA,QAAAC,EAAA;UAA5Be,4BAA4B;IAAAd,SAAA;IAAAC,SAAA,WAAA8F,mCAAA5F,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;kEAiB1B/F,uEAAsB;;;;;;;;;;;;QA3E7BC,4DAAA,aAAQ;QACAA,oDAAA,mBAAY;QAAAA,0DAAA,EAAK;QACrBA,4DAAA,gBAA4C;QAC9BA,oDAAA,YAAK;QAAAA,0DAAA,EAAW;QAGlCA,4DAAA,cAEC;QAMOA,wDAAA,mBAAA2L,8DAAA;UAAA5F,GAAA,CAAA+E,MAAA,GAAkB,EAAE;UAAA,OAAA/E,GAAA,CAAAjD,SAAA,GAAc,EAAE;QAAA,EAAC;QAGrC9C,4DAAA,aAAsB;QAAAA,oDAAA,eAAQ;QAAAA,0DAAA,EAAM;QACpCA,4DAAA,gBAAU;QAAAA,oDAAA,WAAG;QAAAA,0DAAA,EAAW;QAE5BA,wDAAA,KAAA4L,qDAAA,2BAmBe;;QACnB5L,0DAAA,EAAO;QACPA,wDAAA,KAAA6L,oDAAA,gCAAA7L,oEAAA,CAac;;;;QAvCNA,uDAAA,GAAqB;QAArBA,wDAAA,YAAAgK,GAAA,CAAqB;QAKMhK,uDAAA,GAAgB;QAAhBA,wDAAA,YAAAA,yDAAA,QAAA+F,GAAA,CAAA3D,KAAA,EAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9Bb;AACH;AAEe;;;;;;;;;;;IAiB9CpC,4DAAA,cAAoD;IAAAA,oDAAA,aAAM;IAAAA,0DAAA,EAAM;;;;;;IAZpEA,4DAAA,aAIC;IACGA,uDAAA,uBAA6C;IAC7CA,4DAAA,aAAkC;IACZA,oDAAA,GAAgB;IAAAA,0DAAA,EAAM;IACxCA,4DAAA,aAA0C;IACtCA,oDAAA,GACJ;IAAAA,0DAAA,EAAM;IAEVA,wDAAA,IAAAgM,0CAAA,iBAAgE;IAChEhM,4DAAA,aAA+B;IAKvBA,wDAAA,mBAAAiM,kEAAA;MAAAjM,2DAAA,CAAAkM,GAAA;MAAA,MAAAC,MAAA,GAAAnM,2DAAA;MAAA,OAASA,yDAAA,CAAAmM,MAAA,CAAAC,MAAA,GAASD,MAAA,CAAAE,QAAA,EAAU,GAAGF,MAAA,CAAAG,OAAA,EAAS;IAAA,EAAC;IAE7CtM,0DAAA,EAAc;IACdA,4DAAA,YAMC;IACaA,oDAAA,aAAK;IAAAA,0DAAA,EAAW;IAE9BA,4DAAA,aAMC;IACaA,oDAAA,YAAI;IAAAA,0DAAA,EAAW;;;;IAhClBA,uDAAA,EAAa;IAAbA,wDAAA,SAAAuM,MAAA,CAAAvH,IAAA,CAAa;IAENhF,uDAAA,GAAgB;IAAhBA,+DAAA,CAAAuM,MAAA,CAAAvH,IAAA,kBAAAuH,MAAA,CAAAvH,IAAA,CAAAtE,IAAA,CAAgB;IAE9BV,uDAAA,GACJ;IADIA,gEAAA,MAAAuM,MAAA,CAAAvH,IAAA,kBAAAuH,MAAA,CAAAvH,IAAA,CAAAhB,KAAA,MACJ;IAEEhE,uDAAA,EAAY;IAAZA,wDAAA,SAAAuM,MAAA,CAAAH,MAAA,CAAY;IAGVpM,uDAAA,GAA0D;IAA1DA,wDAAA,eAAAuM,MAAA,CAAAH,MAAA,sCAA0D,YAAAG,MAAA,CAAA9I,OAAA,aAAA8I,MAAA,CAAAH,MAAA;IAW1DpM,uDAAA,EAAgC;IAAhCA,wDAAA,sBAAAuM,MAAA,CAAAvH,IAAA,kBAAAuH,MAAA,CAAAvH,IAAA,CAAAhB,KAAA,GAAAhE,2DAAA,CAAgC;IADhCA,yDAAA,eAAAuM,MAAA,CAAAvH,IAAA,kBAAAuH,MAAA,CAAAvH,IAAA,CAAAhB,KAAA,EAA8B;IAU9BhE,uDAAA,GAA6B;IAA7BA,wDAAA,mBAAAuM,MAAA,CAAAvH,IAAA,kBAAAuH,MAAA,CAAAvH,IAAA,CAAAf,KAAA,GAAAjE,2DAAA,CAA6B;IAD7BA,yDAAA,eAAAuM,MAAA,CAAAvH,IAAA,kBAAAuH,MAAA,CAAAvH,IAAA,CAAAf,KAAA,EAA8B;;;AAU5C,MAAOyI,qBAAqB;EAqB9BtJ,YAAoB+G,MAAyB;IAAA,IAAA/F,KAAA;IAAzB,KAAA+F,MAAM,GAANA,MAAM;IAfV,KAAAmC,OAAO,gBAAAjI,wJAAA,CAAG,aAAW;MACjCD,KAAI,CAACX,OAAO,GAAG,IAAI;MACnB,MAAMW,KAAI,CAAC+F,MAAM,CACZmC,OAAO,CAAClI,KAAI,CAACY,IAAI,CAAC,CAClB2H,KAAK,CAAEC,CAAC,IAAKd,4DAAW,CAAC,gCAAgC,CAAC,CAAC;MAChE1H,KAAI,CAACX,OAAO,GAAG,KAAK;IACxB,CAAC;IACe,KAAA4I,QAAQ,gBAAAhI,wJAAA,CAAG,aAAW;MAClCD,KAAI,CAACX,OAAO,GAAG,IAAI;MACnB,MAAMW,KAAI,CAAC+F,MAAM,CACZkC,QAAQ,CAACjI,KAAI,CAACY,IAAI,CAAC,CACnB2H,KAAK,CAAEC,CAAC,IAAKd,4DAAW,CAAC,iCAAiC,CAAC,CAAC;MACjE1H,KAAI,CAACX,OAAO,GAAG,KAAK;IACxB,CAAC;EAE+C;EAAC,QAAAmB,CAAA;qBArBxC8H,qBAAqB,EAAA1M,+DAAA,CAAAwF,mEAAA;EAAA;EAAA,QAAAE,EAAA;UAArBgH,qBAAqB;IAAA/G,SAAA;IAAAkH,MAAA;MAAA7H,IAAA;MAAAoH,MAAA;IAAA;IAAAvD,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAA8D,+BAAAhH,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QA5C1B9F,wDAAA,IAAA+M,oCAAA,mBAwCM;;;QArCD/M,wDAAA,SAAA+F,GAAA,CAAAf,IAAA,CAAU;;;;;;;;;;;;;;;;;;;;;;;;;;ACZ0C;AAClB;AACV;AAEqB;;;;;;;;;;IAQ9ChF,4DAAA,aAOC;IADGA,wDAAA,mBAAAkN,0DAAA;MAAA,MAAAlG,WAAA,GAAAhH,2DAAA,CAAAoL,GAAA;MAAA,MAAA+B,QAAA,GAAAnG,WAAA,CAAA4D,SAAA;MAAA,MAAAS,MAAA,GAAArL,2DAAA;MAAA,OAASA,yDAAA,CAAAqL,MAAA,CAAA+B,QAAA,CAAAD,QAAA,CAAe;IAAA,EAAC;;IAEzBnN,oDAAA,GACJ;IAAAA,0DAAA,EAAM;;;;;IALFA,yDAAA,aAAAA,yDAAA,OAAAuM,MAAA,CAAAe,SAAA,EAAAH,QAAA,EAAAI,MAAA,MAAyD,WAAAJ,QAAA,KAAAZ,MAAA,CAAAiB,YAAA;IAIzDxN,uDAAA,GACJ;IADIA,gEAAA,MAAAmN,QAAA,MACJ;;;;;IAkBYnN,uDAAA,wBAYiB;;;;;;;;;IAPbA,wDAAA,mBAAAyN,SAAA,SAAAC,KAAA,CAAkC,SAAAC,QAAA,YAAA3N,yDAAA,OAAA4N,OAAA,CAAAC,MAAA,IAAA7N,yDAAA,OAAA4N,OAAA,CAAAC,MAAA,EAAAF,QAAA,CAAA3J,KAAA;;;;;IAb1ChE,qEAAA,GAAwD;IACpDA,4DAAA,cAIC;IACGA,oDAAA,GACJ;IAAAA,0DAAA,EAAM;IACNA,wDAAA,IAAA8N,2FAAA,4BAYiB;;IACrB9N,mEAAA,EAAe;;;;;IAlBPA,uDAAA,EAAgD;IAAhDA,wDAAA,oBAAAyN,SAAA,iBAAAA,SAAA,EAAgD;IAGhDzN,uDAAA,EACJ;IADIA,gEAAA,MAAAyN,SAAA,MACJ;IAItBzN,uDAAA,EACiB;IADjBA,wDAAA,YAAAA,yDAAA,OAAA+N,OAAA,CAAAT,SAAA,EAAAG,SAAA,EACiB;;;;;IAbHzN,qEAAA,GAA2C;IACvCA,wDAAA,IAAAgO,2EAAA,0BAqBe;;IACnBhO,mEAAA,EAAe;;;;;IAtBIA,uDAAA,EAAuC;IAAvCA,wDAAA,SAAAA,yDAAA,OAAAuL,MAAA,CAAA+B,SAAA,EAAAG,SAAA,EAAAF,MAAA,CAAuC;;;;;IAF9DvN,qEAAA,GAA2D;IACvDA,wDAAA,IAAAiO,4DAAA,0BAuBe;IACnBjO,mEAAA,EAAe;;;;IAxBqBA,uDAAA,EAAS;IAATA,wDAAA,YAAAmM,MAAA,CAAA+B,MAAA,CAAS;;;;;IA0BjDlO,uDAAA,2BAGoB;;;;;IAEhBA,4DAAA,cAEC;IACMA,oDAAA,gCAAyB;IAAAA,0DAAA,EAAI;;;AA1DhD,MAAMmO,KAAK,GAAG,6BAA6B,CAACC,KAAK,CAAC,EAAE,CAAC;AA6F/C,MAAOC,qBAAsB,SAAQpB,yDAAY;EA6BnD7J,YAAoB+G,MAAyB;IACzC,KAAK,EAAE;IADS,KAAAA,MAAM,GAANA,MAAM;IA5BnB,KAAAqD,YAAY,GAAG,GAAG;IAET,KAAAU,MAAM,GAAGC,KAAK;IACd,KAAAN,MAAM,GAAG,IAAI,CAAC1D,MAAM,CAACmE,WAAW;IAChC,KAAA7K,OAAO,GAAG,IAAI,CAAC0G,MAAM,CAAC1G,OAAO;IAE7B,KAAA8K,UAAU,GAAG,IAAI,CAACpE,MAAM,CAACqE,cAAc,CAAC5K,IAAI,CACxDnE,mDAAG,CAAEmI,IAAI,IAAKA,IAAI,CAAC2F,MAAM,CAAC,CAC7B;IAEe,KAAAD,SAAS,GAAG,IAAI,CAACnD,MAAM,CAACqE,cAAc,CAAC5K,IAAI,CACvDnE,mDAAG,CAAEmI,IAAI,IAAI;MACT,MAAM6G,QAAQ,GAAG,EAAE;MACnB,KAAK,MAAMC,IAAI,IAAIP,KAAK,EAAE;QACtBM,QAAQ,CAACC,IAAI,CAAC,GAAG,CAAC9G,IAAI,IAAI,EAAE,EAAEpI,MAAM,CAC/BwF,IAAI,IACDA,IAAI,CAACtE,IAAI,CAACiO,WAAW,EAAE,CAAC,CAAC,CAAC,CAACC,UAAU,CAACF,IAAI,CAAC,IAC1CA,IAAI,KAAK,GAAG,IACT,CAACP,KAAK,CAACrG,QAAQ,CAAC9C,IAAI,CAACtE,IAAI,CAACiO,WAAW,EAAE,CAAC,CAAC,CAAC,CAAE,CACvD;MACL;MACA,IAAI,CAACE,OAAO,CAAC,QAAQ,EAAE,MAAM,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;MACnD,OAAOL,QAAQ;IACnB,CAAC,CAAC,CACL;EAMD;EAEOK,QAAQA,CAAClK,CAAC;IACb,MAAMmK,UAAU,GAAG,IAAI,CAACC,GAAG,CAACC,aAAa,CAACC,SAAS;IACnD,KAAK,MAAMC,KAAK,IAAIhB,KAAK,EAAE;MACvB,MAAMiB,EAAE,GAAmBC,QAAQ,CAACC,aAAa,CAC7C,WAAWH,KAAK,KAAK,GAAG,GAAG,GAAG,GAAGA,KAAK,EAAE,CAC3C;MACD,IAAIC,EAAE,EAAE;QACJ,IAAIA,EAAE,CAACG,SAAS,GAAGR,UAAU,GAAG,CAAC,EAAE;UAC/B;QACJ;QACA,IAAI,CAACvB,YAAY,GAAG2B,KAAK;MAC7B;IACJ;EACJ;EAEO/B,QAAQA,CAAC+B,KAAa;IACzB,MAAMC,EAAE,GAAGC,QAAQ,CAACC,aAAa,CAAC,WAAWH,KAAK,IAAI,CAAC;IACvD,IAAIC,EAAE,EAAE;MACJA,EAAE,CAACI,cAAc,CAAC;QAAEC,QAAQ,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAQ,CAAE,CAAC;MAC1D,IAAI,CAAClC,YAAY,GAAG2B,KAAK;IAC7B;EACJ;EAAC,QAAAvK,CAAA;qBAtDQyJ,qBAAqB,EAAArO,+DAAA,CAAAwF,mEAAA;EAAA;EAAA,QAAAE,EAAA;UAArB2I,qBAAqB;IAAA1I,SAAA;IAAAC,SAAA,WAAA+J,4BAAA7J,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;;;;;;;;;;;;;;QAxF1B9F,4DAAA,aAAyD;QACrDA,wDAAA,IAAA4P,oCAAA,iBASM;QACV5P,0DAAA,EAAM;QACNA,4DAAA,gBAKC;QADGA,wDAAA,oBAAA6P,qDAAA3O,MAAA;UAAA,OAAU6E,GAAA,CAAA+I,QAAA,CAAA5N,MAAA,CAAgB;QAAA,EAAC;QAE3BlB,wDAAA,IAAA8P,6CAAA,0BAyBe;;QACnB9P,0DAAA,EAAM;QACNA,wDAAA,IAAA+P,iDAAA,8BAGoB;;QACpB/P,wDAAA,IAAAgQ,4CAAA,gCAAAhQ,oEAAA,CAMc;;;;QApDYA,uDAAA,EAAS;QAATA,wDAAA,YAAA+F,GAAA,CAAAmI,MAAA,CAAS;QAehBlO,uDAAA,GAA0B;QAA1BA,wDAAA,SAAAA,yDAAA,OAAA+F,GAAA,CAAAwI,UAAA,EAA0B,aAAA7D,GAAA;QA4BxC1K,uDAAA,GAAqB;QAArBA,wDAAA,SAAAA,yDAAA,OAAA+F,GAAA,CAAAtC,OAAA,EAAqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDsB;AACF;AAO3B;AACkC;AACA;AACQ;AAET;;;AAWtD,MAAOwG,iBAAkB,SAAQgD,yDAAY;EAiE/C7J,YAAoBG,IAAyB;IAAA,IAAAa,KAAA;IACzC,KAAK,EAAE;IAAAA,KAAA,GAAAqM,IAAA;IADS,KAAAlN,IAAI,GAAJA,IAAI;IAhEhB,KAAAmN,OAAO,GAAqB,EAAE;IAC9B,KAAAC,OAAO,GAAqB,EAAE;IAE9B,KAAAC,QAAQ,GAAG,IAAItR,iDAAe,CAAe,EAAE,CAAC;IAEhD,KAAAuR,OAAO,GAAG,IAAIvR,iDAAe,CAAS,EAAE,CAAC;IAEzC,KAAAwR,QAAQ,GAAG,IAAIxR,iDAAe,CAAU,KAAK,CAAC;IAE9C,KAAAyR,MAAM,GAAG,IAAIzR,iDAAe,CAAc,EAAE,CAAC;IAErC,KAAAmE,OAAO,GAAG,IAAI,CAACqN,QAAQ,CAACE,YAAY,EAAE;IAEtC,KAAAC,OAAO,GAAG,IAAI,CAACL,QAAQ,CAACI,YAAY,EAAE;IAEtC,KAAAE,KAAK,GAAG,IAAI,CAACN,QAAQ,CAACI,YAAY,EAAE;IAEpC,KAAAxC,cAAc,GAAGjP,mDAAa,CAAC,CAC3C,IAAI,CAACsR,OAAO,EACZ,IAAI,CAACE,MAAM,EACX,IAAI,CAACH,QAAQ,CAChB,CAAC,CAAChN,IAAI,CACHnE,mDAAG,CAAEqE,OAAO,IAAI;MACZ,MAAM,CAACtE,MAAM,EAAE0R,KAAK,EAAEC,OAAO,CAAC,GAAGrN,OAAO;MACxC,OAAOoN,KAAK,CAAC1R,MAAM,CACd4R,CAAC,IACE,CAAC,CAAC5R,MAAM,IACJ4R,CAAC,CAAC1Q,IAAI,CAACiO,WAAW,EAAE,CAAC7G,QAAQ,CAACtI,MAAM,CAAC,IACrC4R,CAAC,CAACpN,KAAK,CAAC2K,WAAW,EAAE,CAAC7G,QAAQ,CAACtI,MAAM,CAAC,MACzC,CAAC2R,OAAO,CAACE,WAAW,IAAI,IAAI,CAACX,OAAO,CAACU,CAAC,CAACpN,KAAK,CAAC,CAAC,CACtD;IACL,CAAC,CAAC,CACL;IAEe,KAAAsK,WAAW,GAAG/O,mDAAa,CAAC,CAAC,IAAI,CAACqR,QAAQ,CAAC,CAAC,CAAChN,IAAI,CAC7DjE,yDAAS;MAAA,IAAA2R,IAAA,GAAAjN,wJAAA,CAAC,WAAOO,CAAC,EAAI;QAClBR,KAAI,CAAC0M,QAAQ,CAACjM,IAAI,CAAC,IAAI,CAAC;QACxB,MAAM0M,QAAQ,SAASpB,gEAAa,CAAC;UACjCqB,YAAY,EAAElB,oDAAW,CAACC,qDAAU,CAAClI,IAAI,CAACC,GAAG,EAAE,CAAC,CAAC;UACjDmJ,UAAU,EAAEnB,oDAAW,CAACD,qDAAQ,CAAChI,IAAI,CAACC,GAAG,EAAE,CAAC,CAAC;UAC7CoJ,IAAI,EAAE;SACT,CAAC,CAACjN,SAAS,EAAE;QACd,MAAMkN,WAAW,GAAG,EAAE;QACtB,MAAMrJ,GAAG,GAAG,IAAID,IAAI,EAAE,CAACuJ,OAAO,EAAE;QAChC,KAAK,MAAMC,GAAG,IAAIN,QAAQ,EAAE;UACxB,IACIf,qEAAoB,CAChBlI,GAAG,EACHA,GAAG,EACHuJ,GAAG,CAACC,IAAI,EACRD,GAAG,CAACC,IAAI,GAAGD,GAAG,CAACE,QAAQ,GAAG,EAAE,GAAG,IAAI,CACtC,EACH;YACEJ,WAAW,CAACE,GAAG,CAACG,QAAQ,CAAC,GAAGH,GAAG,CAACI,UAAU;YAC1C7N,KAAI,CAACuM,OAAO,CAACkB,GAAG,CAACG,QAAQ,CAAC,GAAGH,GAAG;UACpC;QACJ;QACAzN,KAAI,CAACsM,OAAO,GAAGiB,WAAW;QAC1BvN,KAAI,CAAC0M,QAAQ,CAACjM,IAAI,CAAC,KAAK,CAAC;QACzB,OAAO8M,WAAW;MACtB,CAAC;MAAA,iBAAAO,EAAA;QAAA,OAAAZ,IAAA,CAAAa,KAAA,OAAAC,SAAA;MAAA;IAAA,IAAC,EACF1S,4DAAW,EAAE,CAChB;IAIG,IAAI,CAAC2S,SAAS,EAAE;IAChB,IAAI,CAAC/D,WAAW,CAAClG,SAAS,EAAE;EAChC;EAEOkK,UAAUA,CAACrB,OAAqB;IACnC,IAAI,CAACL,QAAQ,CAAC/L,IAAI,CAAC;MAAE,GAAG,IAAI,CAAC+L,QAAQ,CAAClH,QAAQ,EAAE;MAAE,GAAGuH;IAAO,CAAE,CAAC;EACnE;EAEOsB,eAAeA,CAAC9K,MAAc;IACjC,IAAI,CAACoJ,OAAO,CAAChM,IAAI,CAAC4C,MAAM,CAAC;EAC7B;EAEO2C,YAAYA,CAACoI,KAAA,GAAgB,EAAE,GAAG,IAAI;IACzC,IAAI,CAACF,UAAU,CAAC,IAAI,CAAC1B,QAAQ,CAAClH,QAAQ,EAAE,CAAC;IACzC,IAAI,CAAC+I,QAAQ,CACT,MAAM,EACN,MAAM,IAAI,CAACH,UAAU,CAAC,IAAI,CAAC1B,QAAQ,CAAClH,QAAQ,EAAE,CAAC,EAC/C8I,KAAK,CACR;EACL;EAEOlI,WAAWA,CAAA;IACd,IAAI,CAACoI,aAAa,CAAC,MAAM,CAAC;EAC9B;EAEapG,OAAOA,CAACtH,IAAe;IAAA,IAAAC,MAAA;IAAA,OAAAZ,wJAAA;MAChC,MAAMkE,MAAM,SAAS6H,8DAAW,CAAC;QAC7BuC,aAAa,EAAEC,IAAI,CAACC,KAAK,CAAC,IAAIxK,IAAI,EAAE,CAACuJ,OAAO,EAAE,GAAG,IAAI,CAAC;QACtDkB,WAAW,EAAEF,IAAI,CAACC,KAAK,CAACxC,qDAAQ,CAAC,IAAIhI,IAAI,EAAE,CAAC,CAACuJ,OAAO,EAAE,GAAG,IAAI,CAAC;QAC9DI,QAAQ,EAAEhN,IAAI,CAAChB,KAAK;QACpBwE,KAAK,EAAE,mBAAmB;QAC1B7D,WAAW,EACPM,MAAI,CAAC1B,IAAI,CAACmB,QAAQ,CAACjE,YAAY,IAAIwE,MAAI,CAAC1B,IAAI,CAACmB,QAAQ,CAAChE,IAAI;QAC9DqS,KAAK,EAAE,CAAC9N,MAAI,CAAC1B,IAAI,CAACmB,QAAQ,CAACpE,EAAE,CAAC;QAC9B0S,YAAY,EAAE;OACV,CAAC,CAACvO,SAAS,EAAE;MACrB,MAAMyL,iEAAc,CAAC3H,MAAM,CAACjI,EAAE,EAAE,IAAI,CAAC,CAACmE,SAAS,EAAE;MACjDQ,MAAI,CAAC0L,OAAO,CAAC3L,IAAI,CAAChB,KAAK,CAAC,GAAGuE,MAAM;MACjCtD,MAAI,CAACyL,OAAO,CAAC1L,IAAI,CAAChB,KAAK,CAAC,GAAG,IAAI;IAAC;EACpC;EAEaqI,QAAQA,CAACrH,IAAe;IAAA,IAAAiO,MAAA;IAAA,OAAA5O,wJAAA;MACjC,MAAM6O,KAAK,GAAGD,MAAI,CAACtC,OAAO,CAAC3L,IAAI,CAAChB,KAAK,CAAC;MACtC,IAAIkP,KAAK,EAAE;QACP,MAAM3K,MAAM,SAAS6H,8DAAW,CAAC;UAC7B,GAAG8C,KAAK,CAACC,MAAM,EAAE;UACjBL,WAAW,EAAEF,IAAI,CAACC,KAAK,CAAC,IAAIxK,IAAI,EAAE,CAACuJ,OAAO,EAAE,GAAG,IAAI;SAC/C,CAAC,CAACnN,SAAS,EAAE;QACrB,MAAMyL,iEAAc,CAAC3H,MAAM,CAACjI,EAAE,EAAE,KAAK,CAAC,CAACmE,SAAS,EAAE;QAClDwO,MAAI,CAACtC,OAAO,CAAC3L,IAAI,CAAChB,KAAK,CAAC,GAAGuE,MAAM;QACjC0K,MAAI,CAACvC,OAAO,CAAC1L,IAAI,CAAChB,KAAK,CAAC,GAAG,KAAK;MACpC;IAAC;EACL;EAEcqO,SAASA,CAAA;IAAA,IAAAe,MAAA;IAAA,OAAA/O,wJAAA;MACnB,MAAMiJ,SAAS,SAAS2C,2DAAW,CAAC,EAAE,CAAC,CAACxL,SAAS,EAAE;MACnD6I,SAAS,CAACnI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAC1E,IAAI,CAAC4E,aAAa,CAACD,CAAC,CAAC3E,IAAI,CAAC,CAAC;MACtD0S,MAAI,CAACrC,MAAM,CAAClM,IAAI,CAACyI,SAAS,CAAC;IAAC;EAChC;EAAC,QAAA1I,CAAA;qBA7HQqF,iBAAiB,EAAAjK,uDAAA,CAAAwF,sEAAA;EAAA;EAAA,QAAAE,EAAA;WAAjBuE,iBAAiB;IAAAqJ,OAAA,EAAjBrJ,iBAAiB,CAAAsJ,IAAA;IAAAC,UAAA,EAFd;EAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBmC;AAClB;AAEQ;AACa;AACF;;;;;;;;;;;;;;IAetCxT,4DAAA,oBAGC;IACGA,oDAAA,GACJ;IAAAA,0DAAA,EAAa;;;;IAHTA,wDAAA,UAAA4T,QAAA,CAAAtT,EAAA,CAAkB;IAElBN,uDAAA,EACJ;IADIA,gEAAA,MAAA4T,QAAA,CAAAnT,YAAA,IAAAmT,QAAA,CAAAlT,IAAA,MACJ;;;AAyBd,MAAOmT,oBAAqB,SAAQ5G,yDAAY;EAsBlD7J,YACY+G,MAAyB,EACzB5G,IAAyB,EACzBuQ,MAAsB,EACtBC,OAAe;IAEvB,KAAK,EAAE;IALC,KAAA5J,MAAM,GAANA,MAAM;IACN,KAAA5G,IAAI,GAAJA,IAAI;IACJ,KAAAuQ,MAAM,GAANA,MAAM;IACN,KAAAC,OAAO,GAAPA,OAAO;IAzBnB;IACO,KAAAhB,KAAK,GAAa,EAAE;IAC3B;IACgB,KAAA9Q,MAAM,GAAG,IAAI,CAACsB,IAAI,CAACY,aAAa;IAEhC,KAAA8M,OAAO,GAAG,IAAI,CAAC9G,MAAM,CAAC8G,OAAO;IAC7C;IACgB,KAAA+C,OAAO,GAAIlC,IAAI,IAAK,IAAI,CAAC3H,MAAM,CAACmI,UAAU,CAAC;MAAER;IAAI,CAAE,CAAC;IACpE;IACgB,KAAAQ,UAAU,GAAIrB,OAAO,IAAK,IAAI,CAAC9G,MAAM,CAACmI,UAAU,CAACrB,OAAO,CAAC;IACzE;IACgB,KAAAgD,SAAS,GAAIC,GAAG,IAAK,IAAI,CAAC/J,MAAM,CAACoI,eAAe,CAAC2B,GAAG,CAAC;IACrE;IACgB,KAAAC,WAAW,GAAIpB,KAAK,IAAI;MACpC,IAAI,CAACgB,OAAO,CAACK,QAAQ,CAAC,EAAE,EAAE;QACtBC,UAAU,EAAE,IAAI,CAACP,MAAM;QACvBQ,WAAW,EAAE;UAAEC,QAAQ,EAAExB,KAAK,CAACyB,IAAI,CAAC,GAAG;QAAC;OAC3C,CAAC;MACF,IAAI,CAACrK,MAAM,CAACmI,UAAU,CAAC;QAAES;MAAK,CAAE,CAAC;IACrC,CAAC;EASD;EAEahL,QAAQA,CAAA;IAAA,IAAA3D,KAAA;IAAA,OAAAC,wJAAA;MACjB,MAAMD,KAAI,CAACb,IAAI,CAACkR,WAAW,CAAC7Q,IAAI,CAAC+P,qDAAK,CAAE/O,CAAC,IAAKA,CAAC,CAAC,CAAC,CAACH,SAAS,EAAE;MAC7DL,KAAI,CAACsQ,YAAY,CACb,aAAa,EACbtQ,KAAI,CAAC0P,MAAM,CAACa,aAAa,CAACvM,SAAS,CAAEwM,MAAM,IAAI;QAC3C,IAAIA,MAAM,CAACC,GAAG,CAAC,UAAU,CAAC,EAAE;UACxB,MAAM9B,KAAK,GAAG6B,MAAM,CAACE,GAAG,CAAC,UAAU,CAAC,CAAC1G,KAAK,CAAC,GAAG,CAAC;UAC/C,IAAI2E,KAAK,CAACxF,MAAM,EAAE;YACd,MAAMwH,KAAK,GAAG3Q,KAAI,CAACb,IAAI,CAACyR,WAAW,CAACjC,KAAK,CAAC;YAC1C,IAAI,CAACgC,KAAK,EAAE;cACR;YACJ;YACA3Q,KAAI,CAACb,IAAI,CAACmB,QAAQ,GAAGN,KAAI,CAACb,IAAI,CAAC0R,SAAS,CAACC,IAAI,CACxCrR,GAAG,IAAKA,GAAG,CAACvD,EAAE,KAAKyU,KAAK,CAACI,SAAS,CACtC;YACD/Q,KAAI,CAAC2O,KAAK,GAAGA,KAAK;UACtB;QACJ;MACJ,CAAC,CAAC,CACL;MACD3O,KAAI,CAACsQ,YAAY,CACb,QAAQ,EACRtQ,KAAI,CAACb,IAAI,CAACY,aAAa,CAACiE,SAAS,CAAEnG,MAAM,IAAI;QACzCmC,KAAI,CAAC2O,KAAK,GAAG3O,KAAI,CAAC2O,KAAK,CAACvT,MAAM,CAAE0E,IAAI,IAChCjC,MAAM,CAACiT,IAAI,CAAEE,GAAG,IAAKA,GAAG,CAAC9U,EAAE,KAAK4D,IAAI,CAAC,CACxC;QACD,IAAI,CAACE,KAAI,CAAC2O,KAAK,CAACxF,MAAM,IAAItL,MAAM,CAACsL,MAAM,EAAE;UACrCnJ,KAAI,CAAC2O,KAAK,CAACsC,IAAI,CAACpT,MAAM,CAAC,CAAC,CAAC,CAAC3B,EAAE,CAAC;QACjC;QACA8D,KAAI,CAAC+P,WAAW,CAAC/P,KAAI,CAAC2O,KAAK,CAAC;MAChC,CAAC,CAAC,CACL;MACD3O,KAAI,CAAC6P,SAAS,CAAC,EAAE,CAAC;IAAC;EACvB;EAAC,QAAArP,CAAA;qBAhEQiP,oBAAoB,EAAA7T,+DAAA,CAAAwF,mEAAA,GAAAxF,+DAAA,CAAAyF,sEAAA,GAAAzF,+DAAA,CAAAsV,2DAAA,GAAAtV,+DAAA,CAAAsV,mDAAA;EAAA;EAAA,QAAA5P,EAAA;UAApBmO,oBAAoB;IAAAlO,SAAA;IAAA4P,QAAA,GAAAvV,wEAAA;IAAA6I,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAyM,8BAAA3P,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QAxCzB9F,4DAAA,aAEC;QAIWA,wDAAA,2BAAA0V,kEAAAxU,MAAA;UAAA,OAAA6E,GAAA,CAAAgN,KAAA,GAAA7R,MAAA;QAAA,EAAmB,2BAAAwU,kEAAAxU,MAAA;UAAA,OACF6E,GAAA,CAAAoO,WAAA,CAAAjT,MAAA,CAAmB;QAAA,EADjB;QAInBlB,wDAAA,IAAA2V,0CAAA,wBAKa;;QACjB3V,0DAAA,EAAa;QAEjBA,4DAAA,0BAIK;QADDA,wDAAA,2BAAA4V,wEAAA1U,MAAA;UAAA,OAAiB6E,GAAA,CAAAuM,UAAA;YAAAjB,WAAA,EAAAnQ;UAAA,EAAmC;QAAA,EAAC;;QACpDlB,4DAAA,aAAqB;QAAAA,oDAAA,kBAAW;QAAAA,0DAAA,EAAM;QAE3CA,uDAAA,aAA8B;QAC9BA,4DAAA,oBAGC;QADGA,wDAAA,yBAAA6V,gEAAA3U,MAAA;UAAA,OAAe6E,GAAA,CAAAkO,SAAA,CAAA/S,MAAA,CAAiB;QAAA,EAAC;QACpClB,0DAAA,EAAY;;;;QAtBLA,uDAAA,GAAmB;QAAnBA,wDAAA,YAAA+F,GAAA,CAAAgN,KAAA,CAAmB;QAKG/S,uDAAA,EAAiB;QAAjBA,wDAAA,YAAAA,yDAAA,OAAA+F,GAAA,CAAA9D,MAAA,EAAiB;QAS3CjC,uDAAA,GAA0C;QAA1CA,wDAAA,aAAA8V,OAAA,GAAA9V,yDAAA,OAAA+F,GAAA,CAAAkL,OAAA,oBAAA6E,OAAA,CAAAzE,WAAA,CAA0C;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;;;;;;;;;;;IAS9CrR,uDAAA,0BAIoB;;;AAc1B,MAAO+V,cAAc;EAGvB3S,YAAoB+G,MAAyB;IAAzB,KAAAA,MAAM,GAANA,MAAM;IAFV,KAAA1G,OAAO,GAAG,IAAI,CAAC0G,MAAM,CAAC1G,OAAO;EAEG;EAEzCsE,QAAQA,CAAA;IACX,IAAI,CAACoC,MAAM,CAACC,YAAY,EAAE;EAC9B;EAEOC,WAAWA,CAAA;IACd,IAAI,CAACF,MAAM,CAACG,WAAW,EAAE;EAC7B;EAAC,QAAA1F,CAAA;qBAXQmR,cAAc,EAAA/V,+DAAA,CAAAwF,mEAAA;EAAA;EAAA,QAAAE,EAAA;UAAdqQ,cAAc;IAAApQ,SAAA;IAAAiD,KAAA,EAAA7G,GAAA;IAAA8G,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAgN,wBAAAlQ,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QAtBnB9F,uDAAA,cAAmB;QACnBA,4DAAA,cAA4D;QACxDA,uDAAA,sBAA4C;QAE5CA,wDAAA,IAAAiW,0CAAA,8BAIoB;;QACxBjW,0DAAA,EAAO;;;QAHEA,uDAAA,GAAqB;QAArBA,wDAAA,SAAAA,yDAAA,OAAA+F,GAAA,CAAAtC,OAAA,EAAqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbS;AACA;AACF;AACS;AAEH;AACa;AACE;AACA;AACvB;AACe;AACkB;AACS;AACJ;;;AAEjF,MAAM8S,MAAM,GAAY,CACpB;EAAEC,IAAI,EAAE,EAAE;EAAEC,SAAS,EAAEV,4DAAcA;AAAA,CAAE,EACvC;EAAES,IAAI,EAAE,KAAK;EAAEC,SAAS,EAAEvM,mEAAiBA;AAAA,CAAE,EAC7C;EAAEsM,IAAI,EAAE,oBAAoB;EAAEC,SAAS,EAAEnP,qFAA0BA;AAAA,CAAE,CACxE;AAEM,MAAMoP,UAAU,GAAgB,CACnCxM,mEAAiB,EACjB6L,4DAAc,EACdlC,yEAAoB,EACpBxF,2EAAqB,EACrB3B,2EAAqB,EACrBpF,qFAA0B,EAC1BnE,8FAA8B,EAC9BsD,0FAA4B,CAC/B;AAWK,MAAOkQ,WAAW;EAAA,QAAA/R,CAAA;qBAAX+R,WAAW;EAAA;EAAA,QAAAjR,EAAA;UAAXiR;EAAW;EAAA,QAAAC,EAAA;cANhBV,0DAAY,EACZE,wDAAW,EACXE,mDAAQ,EACRD,0DAAY,CAACQ,QAAQ,CAACN,MAAM,CAAC;EAAA;;;sHAGxBI,WAAW;IAAAG,YAAA,GAnBpB5M,mEAAiB,EACjB6L,4DAAc,EACdlC,yEAAoB,EACpBxF,2EAAqB,EACrB3B,2EAAqB,EACrBpF,qFAA0B,EAC1BnE,8FAA8B,EAC9BsD,0FAA4B;IAAAsQ,OAAA,GAMxBb,0DAAY,EACZE,wDAAW,EACXE,mDAAQ,EAAA9Q,0DAAA;EAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCsB;AACK;AACP;AACI;AACN;AACI;AACH;AACG;AACgB;AACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRsB;AAM1C;AACoC;AACjB;AAEyC;AAI1B;AACgB;AACI;;;;AAKzE,MAAO2R,YAAY;EAIrB/T,YACYG,IAAyB,EACzBgE,OAAkB;IADlB,KAAAhE,IAAI,GAAJA,IAAI;IACJ,KAAAgE,OAAO,GAAPA,OAAO;IALZ,KAAA6P,YAAY,GAAG,IAAI;IACnB,KAAAC,aAAa,GAAG,IAAI;EAKxB;EAEUC,QAAQA,CAAC;IAClBC,KAAK;IACLC,IAAI;IACJ7O,MAAM;IACN8O,SAAS;IACT3F;EAAI,CAOP;IAAA,IAAA1N,KAAA;IAAA,OAAAC,wJAAA;MACG,IAAID,KAAI,CAACiT,aAAa,IAAI,CAACG,IAAI,EAAE;QAC7B,OAAO1L,4DAAW,CAAC,2CAA2C,CAAC;MACnE,CAAC,MAAM;QACH0L,IAAI,GAAGA,IAAI,IAAIR,4DAAW,EAAE;MAChC;MACArO,MAAM,GAAGA,MAAM,IAAI,EAAE;MACrB,MAAMoM,KAAK,GAAG3Q,KAAI,CAACb,IAAI,CAACyR,WAAW,CAC/BuC,KAAK,CAAC,CAAC,CAAC,CAACrT,IAAI,YAAYwT,KAAK,GAAGH,KAAK,CAAC,CAAC,CAAC,CAACrT,IAAI,GAAG,CAACqT,KAAK,CAAC,CAAC,CAAC,CAACrT,IAAI,EAAE5D,EAAE,CAAC,CACvE;MACD,IAAI2H,GAAG,GAAsB7D,KAAI,CAACmD,OAAO,CAACW,IAAI,CAC1CgP,wFAA2B,CAC9B;MACD,IAAIS,OAAO,SAASC,OAAO,CAACC,IAAI,CAAC,CAC7B5P,GAAG,CAAC6P,iBAAiB,CAAC5E,KAAK,CACtBtP,IAAI,CAAC+P,qDAAK,CAAE/O,CAAc,IAAKA,CAAC,CAAC+D,MAAM,KAAK,MAAM,CAAC,CAAC,CACpDlE,SAAS,EAAE,EAChBwD,GAAG,CACEE,WAAW,EAAE,CACbvE,IAAI,CAACnE,mDAAG,CAAEmF,CAAC,IAAK,IAAI,CAAC,CAAC,CACtBH,SAAS,EAAE,CACnB,CAAC;MACF,IAAI,CAACkT,OAAO,EAAE;MACd1P,GAAG,CAAC1D,KAAK,EAAE;MACX0D,GAAG,GAAG7D,KAAI,CAACmD,OAAO,CAACW,IAAI,CAAC+O,oFAAyB,EAAE;QAC/C9U,IAAI,EAAE;UACFqV,IAAI;UACJD,KAAK;UACLzF,IAAI,EAAEA,IAAI,GAAG,IAAIzJ,IAAI,CAACyJ,IAAI,CAAC,GAAG,IAAIzJ,IAAI,EAAE;UACxCM,MAAM;UACNoM,KAAK;UACLqC,YAAY,EAAEhT,KAAI,CAACgT;;OAE1B,CAAC;MACFO,OAAO,SAASC,OAAO,CAACC,IAAI,CAAC,CACzB5P,GAAG,CAAC6P,iBAAiB,CAAC5E,KAAK,CACtBtP,IAAI,CAAC+P,qDAAK,CAAE/O,CAAc,IAAKA,CAAC,CAAC+D,MAAM,KAAK,MAAM,CAAC,CAAC,CACpDlE,SAAS,EAAE,EAChBwD,GAAG,CACEE,WAAW,EAAE,CACbvE,IAAI,CAACnE,mDAAG,CAAEmF,CAAC,IAAK,IAAI,CAAC,CAAC,CACtBH,SAAS,EAAE,CACnB,CAAC;MACF,IAAI,CAACkT,OAAO,EAAE;MACdH,IAAI,GAAGvP,GAAG,CAAC6P,iBAAiB,CAACN,IAAI,IAAIA,IAAI;MACzC1F,IAAI,GAAG7J,GAAG,CAAC6P,iBAAiB,CAAChG,IAAI,IAAIA,IAAI;MACzCnJ,MAAM,GAAGV,GAAG,CAAC6P,iBAAiB,CAACnP,MAAM,IAAIA,MAAM;MAC/C,IAAI,CAAC6O,IAAI,EAAE;QACPvP,GAAG,CAAC1D,KAAK,EAAE;QACX,OAAOuH,4DAAW,CAAC,4CAA4C,CAAC;MACpE;MACA7D,GAAG,CAAC6P,iBAAiB,CAACrU,OAAO,GACzB,wCAAwC;MAC5C,MAAM8N,QAAQ,SAASpB,2DAAa,CAAC;QACjCuB,IAAI,EAAE,MAAM;QACZF,YAAY,EAAElB,oDAAW,CAACC,oDAAU,CAACuB,IAAI,IAAI,IAAIzJ,IAAI,EAAE,CAAC,CAAC;QACzDoJ,UAAU,EAAEnB,oDAAW,CAACD,qDAAQ,CAACyB,IAAI,IAAI,IAAIzJ,IAAI,EAAE,CAAC;OACvD,CAAC,CAAC5D,SAAS,EAAE;MACd,MAAMsT,SAAS,GAAGxG,QAAQ,CAAC/R,MAAM,CAC5BwY,CAAC,IAAKA,CAAC,CAACC,UAAU,CAACtJ,WAAW,EAAE,KAAK6I,IAAI,CAACxT,KAAK,CAAC2K,WAAW,EAAE,CACjE;MACD,IAAIoJ,SAAS,EAAExK,MAAM,EAAE;QACnBtF,GAAG,CAAC1D,KAAK,EAAE;QACX,OAAOuH,4DAAW,CACd,iEAAiE,CACpE;MACL;MACA7D,GAAG,CAAC6P,iBAAiB,CAACrU,OAAO,GAAG,iBAAiB;MACjD,MAAMyN,KAAK,GAAG,CAACsG,IAAI,EAAE,IAAIC,SAAS,IAAI,EAAE,CAAC,CAAC;MAC1C,MAAMG,OAAO,CAACM,GAAG,CAAC,CACdX,KAAK,CAAC9X,GAAG,CAAC,CAAC0Y,IAAI,EAAEC,GAAG,KAChBhU,KAAI,CAACiU,eAAe,CAChBF,IAAI,EACJX,IAAI,EACJ1F,IAAI,CAACF,OAAO,EAAE,IAAI,IAAIvJ,IAAI,EAAE,CAACuJ,OAAO,EAAE,EACtCjJ,MAAM,EACNuI,KAAK,CAACkH,GAAG,CAAC,CACb,CACJ,CACJ,CAAC;MACFvY,8DAAa,CAAC,0BAA0B,CAAC;MACzCoI,GAAG,CAAC1D,KAAK,EAAE;MACX,OAAO,IAAI;IAAC;EAChB;EAEc8T,eAAeA,CACzBF,IAAU,EACVX,IAAe,EACf1F,IAAY,EACZnJ,MAAc,EACd2P,QAAA,GAAiB,IAAI;IAAA,IAAArT,MAAA;IAAA,OAAAZ,wJAAA;MAErB,MAAMkU,QAAQ,GAAG,GAAGJ,IAAI,CAACjU,IAAI,EAAExD,IAAI,IAAIyX,IAAI,CAAC7X,EAAE,EAAE;MAChD,MAAMyU,KAAK,GAAG9P,MAAI,CAAC1B,IAAI,CAACyR,WAAW,CAC/BmD,IAAI,CAACjU,IAAI,YAAYwT,KAAK,GAAGS,IAAI,CAACjU,IAAI,GAAG,CAACiU,IAAI,CAACjU,IAAI,EAAE5D,EAAE,CAAC,CAC3D;MACD,MAAMyS,KAAK,GAAGoF,IAAI,CAACjU,IAAI,EAAE5D,EAAE,GACrB,CAAC6X,IAAI,CAACjU,IAAI,EAAE5D,EAAE,EAAEyU,KAAK,EAAEI,SAAS,CAAC,GACjC,CAACJ,KAAK,EAAEI,SAAS,CAAC;MACxB,MAAMqD,YAAY,GAAG;QACjB7F,aAAa,EAAErC,oDAAW,CAACC,oDAAU,CAACuB,IAAI,CAAC,CAAC;QAC5C2G,OAAO,EAAEH,QAAQ,EAAEhY,EAAE,IAAIkX,IAAI,CAAClX,EAAE;QAChCoY,SAAS,EAAEJ,QAAQ,EAAE5X,IAAI,IAAI8W,IAAI,CAAC9W,IAAI;QACtCuX,UAAU,EAAEK,QAAQ,EAAEtU,KAAK,IAAIwT,IAAI,CAACxT,KAAK;QACzC8O,WAAW,EAAEF,IAAI,CAACC,KAAK,CAACxC,qDAAQ,CAACyB,IAAI,CAAC,CAACF,OAAO,EAAE,GAAG,IAAI,CAAC;QACxDI,QAAQ,EAAEmG,IAAI,CAAC7X,EAAE;QACjBqY,UAAU,EAAER,IAAI,CAACzX,IAAI;QACrB8H,KAAK,EAAEG,MAAM;QACbhE,WAAW,EAAE4T,QAAQ;QACrBxF,KAAK;QACLC,YAAY,EAAE,MAAM;QACpB4F,cAAc,EAAE;UACZC,MAAM,EAAEV,IAAI,EAAEU,MAAM,IAAIV,IAAI,EAAE7X,EAAE;UAChC4N,MAAM,EAAEiK,IAAI,CAACjK,MAAM;UACnBoK,QAAQ,EAAEA,QAAQ,EAAEtU;;OAE3B;MACD,OAAOoM,yDAAW,CAACoI,YAAmB,CAAC,CAAC/T,SAAS,EAAE;IAAC;EACxD;EAAC,QAAAG,CAAA;qBA3IQuS,YAAY,EAAAnX,uDAAA,CAAAwF,+FAAA,GAAAxF,uDAAA,CAAAyF,gEAAA;EAAA;EAAA,QAAAC,EAAA;WAAZyR,YAAY;IAAA7D,OAAA,EAAZ6D,YAAY,CAAA5D,IAAA;IAAAC,UAAA,EAFT;EAAM","sources":["./apps/concierge/src/app/staff/emergency-contact-modal.component.ts","./apps/concierge/src/app/staff/emergency-contacts.component.ts","./apps/concierge/src/app/staff/new-staff.component.ts","./apps/concierge/src/app/staff/role-management-modal.component.ts","./apps/concierge/src/app/staff/staff-details.component.ts","./apps/concierge/src/app/staff/staff-listing.component.ts","./apps/concierge/src/app/staff/staff-state.service.ts","./apps/concierge/src/app/staff/staff-topbar.component.ts","./apps/concierge/src/app/staff/staff.component.ts","./apps/concierge/src/app/staff/staff.module.ts","./libs/bookings/src/index.ts","./libs/bookings/src/lib/desk.service.ts"],"sourcesContent":["import { Component, Inject, ViewChild } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { EmergencyContact } from './emergency-contacts.component';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take } from 'rxjs/operators';\nimport { notifySuccess, randomString } from '@placeos/common';\nimport { CustomTooltipComponent } from '@placeos/components';\n\n@Component({\n    selector: 'emergency-contact-modal',\n    template: `\n        <header>\n            <h2>{{ contact ? 'Edit' : 'New' }} Emergency Contact</h2>\n            <div class=\"flex-1 w-0\"></div>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"p-4 w-[36rem]\" *ngIf=\"!loading; else load_state\">\n            <form [formGroup]=\"form\" class=\"space-y-4\">\n                <a-user-search-field\n                    ngModel\n                    (ngModelChange)=\"setUser($event)\"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                ></a-user-search-field>\n                <div class=\"flex flex-col\">\n                    <label for=\"name\">Name:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            formControlName=\"name\"\n                            placeholder=\"Full name\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex flex-col flex-1\">\n                        <label for=\"email\">Email:</label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"email\"\n                                type=\"email\"\n                                placeholder=\"Email address\"\n                            />\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col flex-1\">\n                        <label for=\"email\">Phone:</label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"phone\"\n                                type=\"tel\"\n                                placeholder=\"Emergency contact number\"\n                            />\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"name\">Level:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            formControlName=\"zone\"\n                            placeholder=\"All Levels\"\n                        >\n                            <mat-option value=\"\">All Levels</mat-option>\n                            <mat-option\n                                *ngFor=\"let level of levels | async\"\n                                [value]=\"level.id\"\n                            >\n                                {{ level.display_name || level.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"email\">Roles:</label>\n                    <div class=\"flex items-center space-x-2\">\n                        <mat-form-field\n                            class=\"no-subscript flex-1\"\n                            appearance=\"outline\"\n                        >\n                            <mat-select\n                                multiple\n                                formControlName=\"roles\"\n                                placeholder=\"Select roles\"\n                            >\n                                <ng-container\n                                    *ngFor=\"\n                                        let role of (data | async)?.roles || []\n                                    \"\n                                >\n                                    <mat-option *ngIf=\"role\" [value]=\"role\">\n                                        {{ role }}\n                                    </mat-option>\n                                </ng-container>\n                            </mat-select>\n                        </mat-form-field>\n                        <button\n                            btn\n                            matRipple\n                            class=\"space-x-2\"\n                            customTooltip\n                            [content]=\"role_form\"\n                        >\n                            <app-icon>add</app-icon>\n                            <div class=\"pr-2\">Add New Role</div>\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex justify-center items-center p-2 border-t border-base-200\"\n        >\n            <button btn matRipple class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                loading\n                class=\"h-64 flex flex-col items-center justify-center\"\n            >\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Saving contact details...</p>\n            </main>\n        </ng-template>\n        <ng-template #role_form>\n            <div class=\"bg-base-100 p-4 rounded \">\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        [(ngModel)]=\"role_name\"\n                        placeholder=\"Role name\"\n                    />\n                </mat-form-field>\n                <button btn matRipple class=\"w-full\" (click)=\"addRole()\">\n                    Save Role\n                </button>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class EmergencyContactModalComponent {\n    private _changes = new BehaviorSubject(0);\n\n    public loading = false;\n    public role_name: string;\n    public readonly contact?: EmergencyContact = this._data;\n    public readonly data = combineLatest([\n        this._org.active_building,\n        this._changes,\n    ]).pipe(\n        filter(([bld]) => !!bld),\n        switchMap(([bld]) => showMetadata(bld.id, 'emergency_contacts')),\n        map(({ details }) => (details as any) || { roles: [], contacts: [] }),\n        shareReplay(1)\n    );\n    public readonly form = new FormGroup({\n        id: new FormControl(this._data?.id || `ecntct-${randomString(8)}`),\n        name: new FormControl(this._data?.name || ''),\n        email: new FormControl(this._data?.email || ''),\n        phone: new FormControl(this._data?.phone || ''),\n        zone: new FormControl(this._data?.zone || ''),\n        roles: new FormControl(this._data?.roles || []),\n    });\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    @ViewChild(CustomTooltipComponent) private _tooltip: CustomTooltipComponent;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: EmergencyContact | undefined,\n        private _dialog_ref: MatDialogRef<EmergencyContactModalComponent>,\n        private _org: OrganisationService\n    ) {}\n\n    public async addRole() {\n        if (!this.role_name) return;\n        this._tooltip.close();\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        const data: any = await this.data.pipe(take(1)).toPromise();\n        await updateMetadata(this._org.building.id, {\n            name: 'emergency_contacts',\n            description: 'Emergency Contacts',\n            details: {\n                roles: [...data.roles, this.role_name].filter((_) => !!_),\n                contacts: data.contacts,\n            },\n        }).toPromise();\n        this._changes.next(0);\n        this.form.patchValue({\n            roles: [...this.form.value.roles, this.role_name],\n        });\n        this.role_name = '';\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n    }\n\n    public setUser(user: any) {\n        this.form.patchValue({\n            name: user?.name,\n            email: user?.email,\n            phone: user?.phone,\n        });\n    }\n\n    public async save() {\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        const data: any = await this.data.pipe(take(1)).toPromise();\n        const contacts = data?.contacts || [];\n        const new_contacts = [\n            ...contacts.filter((_) => _.id !== this.contact?.id),\n            this.form.value,\n        ].sort((a, b) => a.name.localeCompare(b.name));\n        await updateMetadata(this._org.building.id, {\n            name: 'emergency_contacts',\n            description: 'Emergency Contacts',\n            details: { roles: data.roles, contacts: new_contacts },\n        }).toPromise();\n        this._dialog_ref.disableClose = true;\n        notifySuccess('Successfully updated emergency contacts.');\n        this.loading = false;\n        this._dialog_ref.close();\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take } from 'rxjs/operators';\nimport { EmergencyContactModalComponent } from './emergency-contact-modal.component';\nimport { notify, notifySuccess, openConfirmModal } from '@placeos/common';\nimport { RoleManagementModalComponent } from './role-management-modal.component';\n\nexport interface EmergencyContact {\n    id: string;\n    email: string;\n    name: string;\n    phone: string;\n    roles: string[];\n    zone: string;\n}\n\nexport interface EmergencyContactData {\n    contacts: EmergencyContact[];\n    roles: string[];\n}\n\n@Component({\n    selector: '[app-emergency-contacts]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <section topbar class=\"px-8 py-4 flex flex-col\">\n                    <div class=\"flex items-center justify-between\">\n                        <h2 class=\"text-2xl font-medium\">Emergency Contacts</h2>\n                        <div class=\"flex items-center space-x-2\">\n                            <button\n                                icon\n                                matRipple\n                                class=\"bg-secondary text-secondary-content rounded\"\n                                matTooltip=\"Manage Roles\"\n                                (click)=\"manageRoles()\"\n                            >\n                                <app-icon>list_alt</app-icon>\n                            </button>\n                            <button\n                                btn\n                                matRipple\n                                class=\"space-x-2\"\n                                (click)=\"editContact()\"\n                            >\n                                <app-icon class=\"text-2xl\">add</app-icon>\n                                <div class=\"pr-2\">Add Contact</div>\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"flex items-center justify-between py-2 mt-2\">\n                        <mat-form-field\n                            class=\"no-subscript\"\n                            appearance=\"outline\"\n                        >\n                            <mat-select\n                                [ngModel]=\"role_filter.getValue()\"\n                                (ngModelChange)=\"role_filter.next($event)\"\n                                placeholder=\"All Roles\"\n                            >\n                                <mat-option value=\"\">All Roles</mat-option>\n                                <mat-option\n                                    *ngFor=\"let role of (roles | async) || []\"\n                                    [value]=\"role\"\n                                >\n                                    {{ role }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <div class=\"flex items-center space-x-2\">\n                            <mat-form-field\n                                class=\"no-subscript\"\n                                appearance=\"outline\"\n                            >\n                                <app-icon class=\"text-2xl\" matPrefix>\n                                    search\n                                </app-icon>\n                                <input\n                                    matInput\n                                    [(ngModel)]=\"search\"\n                                    placeholder=\"Filter contacts...\"\n                                />\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </section>\n                <section class=\"w-full h-1/2 flex-1 overflow-auto px-8\">\n                    <custom-table\n                        class=\"min-w-[40rem] block\"\n                        [dataSource]=\"filtered_contacts\"\n                        [filter]=\"search\"\n                        [columns]=\"[\n                            'email',\n                            'name',\n                            'roles',\n                            'zone',\n                            'actions'\n                        ]\"\n                        [display_column]=\"[\n                            'Email',\n                            'Name',\n                            'Roles',\n                            'Level',\n                            ' '\n                        ]\"\n                        [column_size]=\"['flex', '12r', '16r', '7r']\"\n                        [template]=\"{\n                            roles: roles_template,\n                            zone: zone_template,\n                            actions: actions_template\n                        }\"\n                        [empty]=\"\n                            search\n                                ? 'No matching contacts'\n                                : 'No emergency contacts for this building'\n                        \"\n                    ></custom-table>\n                    <ng-template #roles_template let-data=\"data\">\n                        <span\n                            class=\"m-1 py-1 px-2 rounded-2xl text-xs font-mono bg-info text-info-content\"\n                            *ngFor=\"let role of data\"\n                        >\n                            {{ role }}\n                        </span>\n                    </ng-template>\n                    <ng-template #zone_template let-data=\"data\">\n                        {{ data ? (data | level)?.display_name : 'All' }}\n                    </ng-template>\n                    <ng-template #actions_template let-row=\"row\">\n                        <div\n                            class=\"flex items-center justify-end w-full space-x-2\"\n                        >\n                            <button icon matRipple (click)=\"editContact(row)\">\n                                <app-icon>edit</app-icon>\n                            </button>\n                            <button icon matRipple (click)=\"removeContact(row)\">\n                                <app-icon>delete</app-icon>\n                            </button>\n                        </div>\n                    </ng-template>\n                </section>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class EmergencyContactsComponent {\n    private _change = new BehaviorSubject<number>(0);\n\n    public search = '';\n    public readonly role_filter = new BehaviorSubject<string>('');\n    public readonly data = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld),\n        switchMap(([bld]) => showMetadata(bld.id, 'emergency_contacts')),\n        map(({ details }) => (details as any) || { roles: [], contacts: [] }),\n        shareReplay(1)\n    );\n    public readonly roles = this.data.pipe(map((_) => _?.roles || []));\n    public readonly contacts = this.data.pipe(map((_) => _?.contacts || []));\n    public readonly filtered_contacts = combineLatest([\n        this.contacts,\n        this.role_filter,\n    ]).pipe(\n        map(([list, role]) =>\n            list.filter((_) => !role || _.roles.includes(role))\n        )\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public ngOnInit() {}\n\n    public manageRoles() {\n        const ref = this._dialog.open(RoleManagementModalComponent, {});\n        ref.afterClosed().subscribe(() => this._change.next(Date.now()));\n    }\n\n    public editContact(contact?: EmergencyContact) {\n        const ref = this._dialog.open(EmergencyContactModalComponent, {\n            data: contact,\n        });\n        ref.afterClosed().subscribe(() => this._change.next(Date.now()));\n    }\n\n    public async removeContact(contact: EmergencyContact) {\n        const result = await openConfirmModal(\n            {\n                title: 'Remove Emergency Contact',\n                content: `Are you sure you want to remove ${contact.name} from the emergency contacts?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (result.reason !== 'done') return;\n        result.loading('Removing contact...');\n        const data: any = await this.data.pipe(take(1)).toPromise();\n        const new_contacts = (data?.contacts || []).filter(\n            (_) => _.id !== contact.id\n        );\n        await updateMetadata(this._org.building.id, {\n            name: 'emergency_contacts',\n            description: 'Emergency Contacts',\n            details: { roles: data.roles, contacts: new_contacts },\n        }).toPromise();\n        result.close();\n        this._change.next(Date.now());\n        notifySuccess('Successfully removed emergency contact.');\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: '[app-new-staff]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <staff-topbar class=\"w-full\"></staff-topbar>\n                <staff-listings class=\"w-full flex-1 h-0\"></staff-listings>\n                <mat-progress-bar\n                    class=\"w-full\"\n                    *ngIf=\"loading | async\"\n                    mode=\"indeterminate\"\n                ></mat-progress-bar>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class NewStaffComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: StaffStateService) {}\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { Component, ViewChild } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { CustomTooltipComponent } from '@placeos/components';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'role-management-modal',\n    template: `\n        <header>\n            <h2>Manage Roles</h2>\n            <button btn icon matRipple mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"overflow-y-auto min-w-[20rem] divide-y divide-base-200 max-h-[65vh]\"\n        >\n            <button\n                btn\n                matRipple\n                class=\"flex items-center justify-center space-x-2 w-[calc(100%-1rem)] m-2\"\n                customTooltip\n                (click)=\"active = ''; role_name = ''\"\n                [content]=\"role_form\"\n            >\n                <div class=\"truncate\">New Role</div>\n                <app-icon>add</app-icon>\n            </button>\n            <ng-container *ngFor=\"let role of roles | async\">\n                <div\n                    class=\"flex items-center space-x-2 hover:bg-base-200:bg-base-300 p-2\"\n                >\n                    <div class=\"flex-1 truncate\">{{ role }}</div>\n                    <button\n                        btn\n                        icon\n                        matRipple\n                        (click)=\"active = role; role_name = role\"\n                        customTooltip\n                        [content]=\"role_form\"\n                    >\n                        <app-icon>edit</app-icon>\n                    </button>\n                    <button btn icon matRipple (click)=\"removeRole(role)\">\n                        <app-icon>delete</app-icon>\n                    </button>\n                </div>\n            </ng-container>\n        </main>\n        <ng-template #role_form>\n            <div class=\"bg-base-100 p-4 rounded \">\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        [(ngModel)]=\"role_name\"\n                        placeholder=\"Role name\"\n                    />\n                </mat-form-field>\n                <button btn matRipple class=\"w-full\" (click)=\"updateRoles()\">\n                    Save Role\n                </button>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class RoleManagementModalComponent {\n    private _changes = new BehaviorSubject(0);\n\n    public active: string;\n    public role_name: string;\n    public loading = false;\n    public readonly data = combineLatest([\n        this._org.active_building,\n        this._changes,\n    ]).pipe(\n        filter(([bld]) => !!bld),\n        switchMap(([bld]) => showMetadata(bld.id, 'emergency_contacts')),\n        map(({ details }) => (details as any) || { roles: [], contacts: [] }),\n        shareReplay(1)\n    );\n    public readonly roles = this.data.pipe(map((_) => _.roles));\n\n    @ViewChild(CustomTooltipComponent) private _tooltip: CustomTooltipComponent;\n\n    public async removeRole(role: string) {\n        if (!role) return;\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        const data: any = await this.data.pipe(take(1)).toPromise();\n        await updateMetadata(this._org.building.id, {\n            name: 'emergency_contacts',\n            description: 'Emergency Contacts',\n            details: {\n                roles: [...data.roles.filter((_) => _ !== role)]\n                    .filter((_) => !!_)\n                    .sort((a, b) => a.localeCompare(b)),\n                contacts: data.contacts.map((_) => ({\n                    ..._,\n                    roles: _.roles.filter((r) => r !== role),\n                })),\n            },\n        }).toPromise();\n        this._changes.next(0);\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n    }\n\n    public async updateRoles() {\n        if (!this.role_name) return;\n        this.loading = true;\n        this._tooltip.close();\n        this._dialog_ref.disableClose = true;\n        const data: any = await this.data.pipe(take(1)).toPromise();\n        await updateMetadata(this._org.building.id, {\n            name: 'emergency_contacts',\n            description: 'Emergency Contacts',\n            details: {\n                roles: [\n                    ...data.roles.filter((_) => _ !== this.active),\n                    this.role_name,\n                ]\n                    .filter((_) => !!_)\n                    .sort((a, b) => a.localeCompare(b)),\n                contacts: data.contacts,\n            },\n        }).toPromise();\n        this._changes.next(0);\n        this.role_name = '';\n        this.active = '';\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog_ref: MatDialogRef<RoleManagementModalComponent>\n    ) {}\n}\n","import { Component, Input } from '@angular/core';\nimport { notifyError } from '@placeos/common';\nimport { StaffUser } from '@placeos/users';\n\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: 'staff-details',\n    template: `\n        <div\n            class=\"w-full flex items-center px-4 py-2 bg-base-100 border-b border-base-200 hover:opacity-80\"\n            details\n            *ngIf=\"user\"\n        >\n            <a-user-avatar [user]=\"user\"></a-user-avatar>\n            <div class=\"flex flex-col flex-1\">\n                <div class=\"px-2\">{{ user?.name }}</div>\n                <div class=\"px-2 text-xs text-opacity-50\">\n                    {{ user?.email }}\n                </div>\n            </div>\n            <div *ngIf=\"onsite\" class=\"text-xs opacity-50 px-4\">Onsite</div>\n            <div class=\"flex items-center\">\n                <action-icon\n                    [matTooltip]=\"onsite ? 'Checkout Staff' : 'Checkin Staff'\"\n                    [loading]=\"loading\"\n                    [content]=\"onsite ? 'event_busy' : 'event_available'\"\n                    (click)=\"onsite ? checkout() : checkin()\"\n                >\n                </action-icon>\n                <a\n                    icon\n                    matRipple\n                    matTooltip=\"Email Staff\"\n                    [attr.disabled]=\"!user?.email\"\n                    [href]=\"'mailto:' + user?.email\"\n                >\n                    <app-icon>email</app-icon>\n                </a>\n                <a\n                    icon\n                    matRipple\n                    matTooltip=\"Phone Staff\"\n                    [attr.disabled]=\"!user?.phone\"\n                    [href]=\"'tel:' + user?.phone\"\n                >\n                    <app-icon>call</app-icon>\n                </a>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class StaffDetailsComponent {\n    @Input() public user: StaffUser;\n    @Input() public onsite: boolean;\n\n    public loading: boolean;\n\n    public readonly checkin = async () => {\n        this.loading = true;\n        await this._state\n            .checkin(this.user)\n            .catch((e) => notifyError('Error checking in Staff member'));\n        this.loading = false;\n    };\n    public readonly checkout = async () => {\n        this.loading = true;\n        await this._state\n            .checkout(this.user)\n            .catch((e) => notifyError('Error checking out Staff member'));\n        this.loading = false;\n    };\n\n    constructor(private _state: StaffStateService) {}\n}\n","import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { AsyncHandler } from '@placeos/common';\nimport { map } from 'rxjs/operators';\n\nimport { StaffStateService } from './staff-state.service';\n\nconst CHARS = '#abcdefghijklmnopqrstuvwxyz'.split('');\n\n@Component({\n    selector: 'staff-listings',\n    template: `\n        <div class=\"w-full p-2 flex items-center justify-center\">\n            <div\n                letter\n                *ngFor=\"let group of groups\"\n                class=\"capitalize h-6 w-6 flex items-center justify-center text-xs cursor-pointer\"\n                [class.disabled]=\"(user_list | async)[group].length <= 0\"\n                [class.active]=\"group === active_group\"\n                (click)=\"scrollTo(group)\"\n            >\n                {{ group }}\n            </div>\n        </div>\n        <div\n            class=\"flex-1 overflow-auto w-full relative bg-base-200\"\n            style=\"height: 50%\"\n            #container\n            (scroll)=\"onScroll($event)\"\n        >\n            <ng-container *ngIf=\"user_count | async; else empty_state\">\n                <ng-container *ngFor=\"let group of groups\">\n                    <ng-container *ngIf=\"(user_list | async)[group].length\">\n                        <div\n                            group\n                            [id]=\"'letter-' + (group === '#' ? '0' : group)\"\n                            class=\"capitalize bg-base-200 border-b text-sm font-medium sticky top-0 z-10\"\n                        >\n                            {{ group }}\n                        </div>\n                        <staff-details\n                            *ngFor=\"\n                                let user of (user_list | async)[group];\n                                let i = index\n                            \"\n                            [id]=\"'letter-' + group + '-' + i\"\n                            [user]=\"user\"\n                            [onsite]=\"\n                                (events | async)\n                                    ? (events | async)[user.email]\n                                    : false\n                            \"\n                        ></staff-details>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </div>\n        <mat-progress-bar\n            *ngIf=\"loading | async\"\n            mode=\"indeterminate\"\n        ></mat-progress-bar>\n        <ng-template #empty_state>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center\"\n            >\n                <p>No matching staff members</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                height: 50%;\n            }\n\n            [letter] {\n                transition: font-size 200ms, color 200ms;\n            }\n\n            [group] {\n                border-color: #ccc;\n                padding: 0.5rem 1.65rem;\n            }\n\n            .disabled {\n                opacity: 0.2;\n                pointer-events: none;\n            }\n\n            .active {\n                font-size: 1.25rem;\n                opacity: 1;\n                color: #d81b60;\n            }\n        `,\n    ],\n})\nexport class StaffListingComponent extends AsyncHandler {\n    public active_group = '#';\n\n    public readonly groups = CHARS;\n    public readonly events = this._state.user_events;\n    public readonly loading = this._state.loading;\n\n    public readonly user_count = this._state.filtered_users.pipe(\n        map((list) => list.length)\n    );\n\n    public readonly user_list = this._state.filtered_users.pipe(\n        map((list) => {\n            const user_map = {};\n            for (const char of CHARS) {\n                user_map[char] = (list || []).filter(\n                    (user) =>\n                        user.name.toLowerCase()[0].startsWith(char) ||\n                        (char === '#' &&\n                            !CHARS.includes(user.name.toLowerCase()[0]))\n                );\n            }\n            this.timeout('scroll', () => this.onScroll({}), 30);\n            return user_map;\n        })\n    );\n\n    @ViewChild('container') private _el: ElementRef<HTMLDivElement>;\n\n    constructor(private _state: StaffStateService) {\n        super();\n    }\n\n    public onScroll(_) {\n        const scroll_top = this._el.nativeElement.scrollTop;\n        for (const group of CHARS) {\n            const el: HTMLDivElement = document.querySelector(\n                `#letter-${group === '#' ? '0' : group}`\n            );\n            if (el) {\n                if (el.offsetTop - scroll_top > 0) {\n                    break;\n                }\n                this.active_group = group;\n            }\n        }\n    }\n\n    public scrollTo(group: string) {\n        const el = document.querySelector(`#letter-${group}-0`);\n        if (el) {\n            el.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            this.active_group = group;\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { searchStaff, StaffUser } from '@placeos/users';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\n\nimport {\n    Booking,\n    checkinBooking,\n    queryBookings,\n    saveBooking,\n} from '@placeos/bookings';\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { AsyncHandler, timePeriodsIntersect } from '@placeos/common';\nimport { HashMap } from '@placeos/ts-client/dist/esm/utilities/types';\nimport { OrganisationService } from '@placeos/organisation';\n\nexport interface StaffFilters {\n    date?: number;\n    zones?: string[];\n    only_onsite?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class StaffStateService extends AsyncHandler {\n    private _onsite: HashMap<boolean> = {};\n    private _events: HashMap<Booking> = {};\n\n    private _filters = new BehaviorSubject<StaffFilters>({});\n\n    private _search = new BehaviorSubject<string>('');\n\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    private _users = new BehaviorSubject<StaffUser[]>([]);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly users = this._filters.asObservable();\n\n    public readonly filtered_users = combineLatest([\n        this._search,\n        this._users,\n        this._filters,\n    ]).pipe(\n        map((details) => {\n            const [filter, users, options] = details;\n            return users.filter(\n                (i) =>\n                    (!filter ||\n                        i.name.toLowerCase().includes(filter) ||\n                        i.email.toLowerCase().includes(filter)) &&\n                    (!options.only_onsite || this._onsite[i.email])\n            );\n        })\n    );\n\n    public readonly user_events = combineLatest([this._filters]).pipe(\n        switchMap(async (_) => {\n            this._loading.next(true);\n            const bookings = await queryBookings({\n                period_start: getUnixTime(startOfDay(Date.now())),\n                period_end: getUnixTime(endOfDay(Date.now())),\n                type: 'staff',\n            }).toPromise();\n            const checkin_map = {};\n            const now = new Date().valueOf();\n            for (const bkn of bookings) {\n                if (\n                    timePeriodsIntersect(\n                        now,\n                        now,\n                        bkn.date,\n                        bkn.date + bkn.duration * 60 * 1000\n                    )\n                ) {\n                    checkin_map[bkn.asset_id] = bkn.checked_in;\n                    this._events[bkn.asset_id] = bkn;\n                }\n            }\n            this._onsite = checkin_map;\n            this._loading.next(false);\n            return checkin_map;\n        }),\n        shareReplay()\n    );\n\n    constructor(private _org: OrganisationService) {\n        super();\n        this.loadUsers();\n        this.user_events.subscribe();\n    }\n\n    public setFilters(filters: StaffFilters) {\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public setSearchString(search: string) {\n        this._search.next(search);\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.setFilters(this._filters.getValue());\n        this.interval(\n            'poll',\n            () => this.setFilters(this._filters.getValue()),\n            delay\n        );\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public async checkin(user: StaffUser) {\n        const result = await saveBooking({\n            booking_start: Math.floor(new Date().valueOf() / 1000),\n            booking_end: Math.floor(endOfDay(new Date()).valueOf() / 1000),\n            asset_id: user.email,\n            title: 'Checked-in Onsite',\n            description:\n                this._org.building.display_name || this._org.building.name,\n            zones: [this._org.building.id],\n            booking_type: 'staff',\n        } as any).toPromise();\n        await checkinBooking(result.id, true).toPromise();\n        this._events[user.email] = result;\n        this._onsite[user.email] = true;\n    }\n\n    public async checkout(user: StaffUser) {\n        const event = this._events[user.email];\n        if (event) {\n            const result = await saveBooking({\n                ...event.toJSON(),\n                booking_end: Math.floor(new Date().valueOf() / 1000),\n            } as any).toPromise();\n            await checkinBooking(result.id, false).toPromise();\n            this._events[user.email] = result;\n            this._onsite[user.email] = false;\n        }\n    }\n\n    private async loadUsers() {\n        const user_list = await searchStaff('').toPromise();\n        user_list.sort((a, b) => a.name.localeCompare(b.name));\n        this._users.next(user_list);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { AsyncHandler } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: 'staff-topbar',\n    template: `\n        <div\n            class=\"flex items-center bg-base-100 h-20 px-4 border-b border-base-200 space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    multiple\n                    [(ngModel)]=\"zones\"\n                    (ngModelChange)=\"updateZones($event)\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-slide-toggle\n                class=\"m-2\"\n                [ngModel]=\"(filters | async)?.only_onsite\"\n                (ngModelChange)=\"setFilters({ only_onsite: $event })\"\n                ><div class=\"text-xs\">Onsite Only</div></mat-slide-toggle\n            >\n            <div class=\"flex-1 w-2\"></div>\n            <searchbar\n                class=\"mr-2\"\n                (modelChange)=\"setSearch($event)\"\n            ></searchbar>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class StaffTopbarComponent extends AsyncHandler implements OnInit {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    public readonly filters = this._state.filters;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._state.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._state.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n        this._state.setFilters({ zones });\n    };\n\n    constructor(\n        private _state: StaffStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        if (!level) {\n                            return;\n                        }\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.zones = zones;\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n        this.setSearch('');\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: '[app-staff]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden flex-1 flex flex-col\">\n            <staff-topbar class=\"w-full\"></staff-topbar>\n            <staff-listings class=\"w-full flex-1 h-0\"></staff-listings>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n                background: var(--b1);\n            }\n        `,\n    ],\n})\nexport class StaffComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: StaffStateService) {}\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { StaffComponent } from './staff.component';\nimport { StaffTopbarComponent } from './staff-topbar.component';\nimport { StaffListingComponent } from './staff-listing.component';\nimport { StaffDetailsComponent } from './staff-details.component';\nimport { UIModule } from '../ui/ui.module';\nimport { NewStaffComponent } from './new-staff.component';\nimport { EmergencyContactsComponent } from './emergency-contacts.component';\nimport { EmergencyContactModalComponent } from './emergency-contact-modal.component';\nimport { RoleManagementModalComponent } from './role-management-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: StaffComponent },\n    { path: 'new', component: NewStaffComponent },\n    { path: 'emergency-contacts', component: EmergencyContactsComponent },\n];\n\nexport const COMPONENTS: Type<any>[] = [\n    NewStaffComponent,\n    StaffComponent,\n    StaffTopbarComponent,\n    StaffListingComponent,\n    StaffDetailsComponent,\n    EmergencyContactsComponent,\n    EmergencyContactModalComponent,\n    RoleManagementModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class StaffModule {}\n","export * from './lib/bookings.module';\nexport * from './lib/booking-form.service';\nexport * from './lib/booking.class';\nexport * from './lib/booking.utilities';\nexport * from './lib/bookings.fn';\nexport * from './lib/bookings.module';\nexport * from './lib/desk.service';\nexport * from './lib/lockers.service';\nexport * from './lib/booking-details-modal.component';\nexport * from './lib/booking-card.component';\nexport * from './lib/parking-select-modal/parking-select-modal.component';\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {\n    currentUser,\n    DialogEvent,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { first, map } from 'rxjs/operators';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { Desk } from 'libs/organisation/src/lib/desk.class';\nimport { StaffUser, User } from 'libs/users/src/lib/user.class';\n\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskConfirmModalComponent } from './desk-confirm-modal.component';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksService {\n    public can_set_date = true;\n    public error_on_host = true;\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public async bookDesk({\n        desks,\n        host,\n        reason,\n        attendees,\n        date,\n    }: {\n        desks: Desk[];\n        host?: StaffUser;\n        attendees?: User[];\n        reason?: string;\n        date?: Date;\n    }) {\n        if (this.error_on_host && !host) {\n            return notifyError('You need to select a host to book a desk.');\n        } else {\n            host = host || currentUser();\n        }\n        reason = reason || '';\n        const level = this._org.levelWithID(\n            desks[0].zone instanceof Array ? desks[0].zone : [desks[0].zone?.id]\n        );\n        let ref: MatDialogRef<any> = this._dialog.open(\n            DeskQuestionsModalComponent\n        );\n        let success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        ref.close();\n        ref = this._dialog.open(DeskConfirmModalComponent, {\n            data: {\n                host,\n                desks,\n                date: date ? new Date(date) : new Date(),\n                reason,\n                level,\n                can_set_date: this.can_set_date,\n            },\n        });\n        success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        host = ref.componentInstance.host || host;\n        date = ref.componentInstance.date || date;\n        reason = ref.componentInstance.reason || reason;\n        if (!host) {\n            ref.close();\n            return notifyError('You need to select a host to book a desk. ');\n        }\n        ref.componentInstance.loading =\n            'Checking for existing desk bookings...';\n        const bookings = await queryBookings({\n            type: 'desk',\n            period_start: getUnixTime(startOfDay(date || new Date())),\n            period_end: getUnixTime(endOfDay(date || new Date())),\n        }).toPromise();\n        const desk_list = bookings.filter(\n            (d) => d.user_email.toLowerCase() === host.email.toLowerCase()\n        );\n        if (desk_list?.length) {\n            ref.close();\n            return notifyError(\n                'You currently already have a desk booked for the selected date.'\n            );\n        }\n        ref.componentInstance.loading = 'Booking desk...';\n        const users = [host, ...(attendees || [])];\n        await Promise.all([\n            desks.map((desk, idx) =>\n                this.makeDeskBooking(\n                    desk,\n                    host,\n                    date.valueOf() || new Date().valueOf(),\n                    reason,\n                    users[idx]\n                )\n            ),\n        ]);\n        notifySuccess('Successfully booked desk');\n        ref.close();\n        return true;\n    }\n\n    private async makeDeskBooking(\n        desk: Desk,\n        host: StaffUser,\n        date: number,\n        reason: string,\n        for_user: User = null\n    ) {\n        const location = `${desk.zone?.name}-${desk.id}`;\n        const level = this._org.levelWithID(\n            desk.zone instanceof Array ? desk.zone : [desk.zone?.id]\n        );\n        const zones = desk.zone?.id\n            ? [desk.zone?.id, level?.parent_id]\n            : [level?.parent_id];\n        const booking_data = {\n            booking_start: getUnixTime(startOfDay(date)),\n            user_id: for_user?.id || host.id,\n            user_name: for_user?.name || host.name,\n            user_email: for_user?.email || host.email,\n            booking_end: Math.floor(endOfDay(date).valueOf() / 1000),\n            asset_id: desk.id,\n            asset_name: desk.name,\n            title: reason,\n            description: location,\n            zones,\n            booking_type: 'desk',\n            extension_data: {\n                map_id: desk?.map_id || desk?.id,\n                groups: desk.groups,\n                for_user: for_user?.email,\n            },\n        };\n        return saveBooking(booking_data as any).toPromise();\n    }\n}\n"],"names":["MAT_DIALOG_DATA","MatDialogRef","FormControl","FormGroup","OrganisationService","showMetadata","updateMetadata","BehaviorSubject","combineLatest","filter","map","shareReplay","switchMap","take","notifySuccess","randomString","CustomTooltipComponent","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","level_r9","id","ɵɵadvance","ɵɵtextInterpolate1","display_name","name","role_r10","ɵɵelementContainerStart","ɵɵtemplate","EmergencyContactModalComponent_main_5_ng_container_34_mat_option_1_Template","ɵɵelementContainerEnd","ɵɵlistener","EmergencyContactModalComponent_main_5_Template_a_user_search_field_ngModelChange_2_listener","$event","ɵɵrestoreView","_r14","ctx_r13","ɵɵnextContext","ɵɵresetView","setUser","ɵɵelement","EmergencyContactModalComponent_main_5_mat_option_26_Template","EmergencyContactModalComponent_main_5_ng_container_34_Template","ctx_r1","form","ɵɵpureFunction0","_c0","ɵɵpipeBind1","levels","tmp_3_0","data","roles","_c1","_r6","EmergencyContactModalComponent_footer_6_Template_button_click_1_listener","_r16","ctx_r15","save","EmergencyContactModalComponent_ng_template_9_Template_input_ngModelChange_2_listener","_r18","ctx_r17","role_name","EmergencyContactModalComponent_ng_template_9_Template_button_click_3_listener","ctx_r19","addRole","ctx_r5","EmergencyContactModalComponent","constructor","_data","_dialog_ref","_org","_changes","loading","contact","active_building","pipe","bld","details","contacts","email","phone","zone","active_levels","_this","_asyncToGenerator","_tooltip","close","disableClose","toPromise","building","description","_","next","patchValue","value","user","_this2","new_contacts","sort","a","b","localeCompare","ɵɵdirectiveInject","i1","i2","_2","selectors","viewQuery","EmergencyContactModalComponent_Query","rf","ctx","EmergencyContactModalComponent_button_4_Template","EmergencyContactModalComponent_main_5_Template","EmergencyContactModalComponent_footer_6_Template","EmergencyContactModalComponent_ng_template_7_Template","ɵɵtemplateRefExtractor","EmergencyContactModalComponent_ng_template_9_Template","_r4","MatDialog","openConfirmModal","RoleManagementModalComponent","role_r7","EmergencyContactsComponent_ng_template_31_span_0_Template","data_r8","data_r11","tmp_0_0","EmergencyContactsComponent_ng_template_35_Template_button_click_1_listener","restoredCtx","row_r12","row","editContact","EmergencyContactsComponent_ng_template_35_Template_button_click_4_listener","removeContact","EmergencyContactsComponent","_dialog","_change","search","role_filter","filtered_contacts","list","role","includes","ngOnInit","manageRoles","ref","open","afterClosed","subscribe","Date","now","result","title","content","icon","reason","attrs","decls","vars","consts","template","EmergencyContactsComponent_Template","EmergencyContactsComponent_Template_button_click_9_listener","EmergencyContactsComponent_Template_button_click_12_listener","EmergencyContactsComponent_Template_mat_select_ngModelChange_19_listener","EmergencyContactsComponent_mat_option_22_Template","EmergencyContactsComponent_Template_input_ngModelChange_28_listener","EmergencyContactsComponent_ng_template_31_Template","EmergencyContactsComponent_ng_template_33_Template","EmergencyContactsComponent_ng_template_35_Template","getValue","_c2","_c3","_c4","ɵɵpureFunction3","_c5","_r2","StaffStateService","NewStaffComponent","_state","startPolling","ngOnDestroy","stopPolling","NewStaffComponent_Template","NewStaffComponent_mat_progress_bar_6_Template","RoleManagementModalComponent_ng_container_12_Template_button_click_4_listener","_r5","role_r3","$implicit","ctx_r4","active","RoleManagementModalComponent_ng_container_12_Template_button_click_7_listener","ctx_r6","removeRole","ɵɵtextInterpolate","RoleManagementModalComponent_ng_template_14_Template_input_ngModelChange_2_listener","_r8","ctx_r7","RoleManagementModalComponent_ng_template_14_Template_button_click_3_listener","ctx_r9","updateRoles","r","RoleManagementModalComponent_Query","RoleManagementModalComponent_Template_button_click_7_listener","RoleManagementModalComponent_ng_container_12_Template","RoleManagementModalComponent_ng_template_14_Template","notifyError","StaffUser","StaffDetailsComponent_div_0_div_7_Template","StaffDetailsComponent_div_0_Template_action_icon_click_9_listener","_r3","ctx_r2","onsite","checkout","checkin","ctx_r0","ɵɵsanitizeUrl","ɵɵattribute","StaffDetailsComponent","catch","e","inputs","StaffDetailsComponent_Template","StaffDetailsComponent_div_0_Template","ElementRef","AsyncHandler","StaffListingComponent_div_1_Template_div_click_0_listener","group_r6","scrollTo","ɵɵclassProp","user_list","length","active_group","group_r10","i_r14","user_r13","ctx_r12","events","StaffListingComponent_ng_container_4_ng_container_1_ng_container_1_staff_details_3_Template","ctx_r11","StaffListingComponent_ng_container_4_ng_container_1_ng_container_1_Template","StaffListingComponent_ng_container_4_ng_container_1_Template","groups","CHARS","split","StaffListingComponent","user_events","user_count","filtered_users","user_map","char","toLowerCase","startsWith","timeout","onScroll","scroll_top","_el","nativeElement","scrollTop","group","el","document","querySelector","offsetTop","scrollIntoView","behavior","block","StaffListingComponent_Query","StaffListingComponent_div_1_Template","StaffListingComponent_Template_div_scroll_2_listener","StaffListingComponent_ng_container_4_Template","StaffListingComponent_mat_progress_bar_6_Template","StaffListingComponent_ng_template_8_Template","searchStaff","checkinBooking","queryBookings","saveBooking","endOfDay","getUnixTime","startOfDay","timePeriodsIntersect","this","_onsite","_events","_filters","_search","_loading","_users","asObservable","filters","users","options","i","only_onsite","_ref","bookings","period_start","period_end","type","checkin_map","valueOf","bkn","date","duration","asset_id","checked_in","_x","apply","arguments","loadUsers","setFilters","setSearchString","delay","interval","clearInterval","booking_start","Math","floor","booking_end","zones","booking_type","_this3","event","toJSON","_this4","ɵɵinject","factory","ɵfac","providedIn","ActivatedRoute","Router","first","level_r1","StaffTopbarComponent","_route","_router","setDate","setSearch","str","updateZones","navigate","relativeTo","queryParams","zone_ids","join","initialised","subscription","queryParamMap","params","has","get","level","levelWithID","buildings","find","parent_id","lvl","push","i3","features","ɵɵInheritDefinitionFeature","StaffTopbarComponent_Template","StaffTopbarComponent_Template_mat_select_ngModelChange_2_listener","StaffTopbarComponent_mat_option_3_Template","StaffTopbarComponent_Template_mat_slide_toggle_ngModelChange_5_listener","StaffTopbarComponent_Template_searchbar_modelChange_10_listener","tmp_2_0","StaffComponent","StaffComponent_Template","StaffComponent_mat_progress_bar_4_Template","CommonModule","Type","FormsModule","RouterModule","UIModule","ROUTES","path","component","COMPONENTS","StaffModule","_3","forChild","declarations","imports","currentUser","DeskConfirmModalComponent","DeskQuestionsModalComponent","DesksService","can_set_date","error_on_host","bookDesk","desks","host","attendees","Array","success","Promise","race","componentInstance","desk_list","d","user_email","all","desk","idx","makeDeskBooking","for_user","location","booking_data","user_id","user_name","asset_name","extension_data","map_id"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}