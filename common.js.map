{"version":3,"file":"common.js","mappings":"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","sources":["./apps/workplace/src/app/schedule/schedule-state.service.ts","./libs/calendar/src/index.ts","./libs/calendar/src/lib/calendar.interfaces.ts","./libs/calendar/src/lib/calendar.service.ts","./libs/calendar/src/lib/calendar.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Booking, queryBookings } from '@placeos/bookings';\nimport { queryCalendars } from '@placeos/calendar';\nimport {\n    AsyncHandler,\n    SettingsService,\n    timePeriodsIntersect,\n    unique,\n} from '@placeos/common';\nimport {\n    CalendarEvent,\n    newCalendarEventFromBooking,\n    queryEvents,\n} from '@placeos/events';\nimport { addDays, endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport {\n    BehaviorSubject,\n    combineLatest,\n    forkJoin,\n    Observable,\n    timer,\n} from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    map,\n    mergeMap,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\nexport type BookingLike = CalendarEvent & Booking;\n\nexport interface ScheduleOptions {\n    calendar?: string;\n    start: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScheduleStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ScheduleOptions>({\n        start: Date.now(),\n    });\n    private _loading = new BehaviorSubject<string>('');\n    private _schedule = new BehaviorSubject<BookingLike[]>([]);\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n    public readonly schedule = this._loading.asObservable();\n\n    public readonly calendars = timer(1000).pipe(\n        switchMap((_) => queryCalendars()),\n        shareReplay(1)\n    );\n\n    public readonly events: Observable<BookingLike[]> = combineLatest([\n        this._options,\n        this._poll,\n    ]).pipe(\n        debounceTime(1000),\n        mergeMap(([options]) => {\n            this._loading.next('Loading schedule...');\n            const query: any = {\n                period_start: getUnixTime(startOfDay(options.start)),\n                period_end: getUnixTime(addDays(endOfDay(options.start), 6)),\n            };\n            if (options.calendar) {\n                query.calendar = options.calendar;\n            }\n            this._schedule.next(\n                this._schedule\n                    .getValue()\n                    .filter(\n                        (_) =>\n                            !timePeriodsIntersect(\n                                query.period_start * 1000,\n                                query.period_end * 1000,\n                                _.date,\n                                _.date + _.duration * 60 * 1000\n                            )\n                    )\n            );\n            return forkJoin([\n                this._settings.get('app.events.use_bookings') === true\n                    ? queryBookings({ ...query, type: 'room' }).pipe(\n                          map((_) =>\n                              _.map((i) => newCalendarEventFromBooking(i))\n                          )\n                      )\n                    : queryEvents({ ...query }),\n                queryBookings({ ...query, type: 'desk' }),\n                queryBookings({ ...query, type: 'parking' }),\n            ]).pipe(catchError((_) => []));\n        }),\n        map(([events, bookings]) => {\n            const list = [\n                ...this._schedule.getValue(),\n                ...events,\n                ...bookings.filter((_) => _.status !== 'declined'),\n            ].sort((a, b) => a.date - b.date);\n            this._schedule.next(unique(list, 'id') as any);\n            return list;\n        }),\n        catchError((_) => []),\n        tap((_) => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    constructor(private _settings: SettingsService) {\n        super();\n    }\n\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setOptions(options: Partial<ScheduleOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n}\n","\nexport * from './lib/calendar';\n","\nexport interface CalendarAvailabilityQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zone_ids?: string;\n    /** Comma seperated list of system(space) ids to check availability */\n    system_ids?: string;\n    /** Comma seperated list of calendar ids to check availability */\n    calendars?: string;\n    /** Minimum capacity required */\n    capacity?: number;\n    /** Comma seperated of space features to filter */\n    features?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** ID of a booking to ignore in availability check */\n    ignore?: string;\n}\n\nexport interface CalendarAvailability {\n    duration: number;\n    date: number;\n    status: string;\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { first, shareReplay, tap } from 'rxjs/operators';\nimport { addMinutes, endOfDay, getUnixTime, startOfDay } from 'date-fns';\n\nimport { Calendar } from './calendar.class';\n\nimport { AsyncHandler } from 'libs/common/src/lib/async-handler.class';\nimport { SettingsService } from 'libs/common/src/lib/settings.service';\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\nimport { CalendarAvailabilityQueryParams } from './calendar.interfaces';\nimport {\n    queryCalendarAvailability,\n    queryCalendars,\n    querySpaceFreeBusy,\n} from './calendar.fn';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CalendarService extends AsyncHandler {\n    private readonly _calendars = new BehaviorSubject<Calendar[]>([]);\n\n    /** Observable for the list of calendars */\n    public readonly calendar_list = queryCalendars().pipe(\n        tap((l) => this._calendars.next(l)),\n        shareReplay(1)\n    );\n\n    /* istanbul ignore next */\n    public readonly query = () => queryCalendars();\n    /* istanbul ignore next */\n    public readonly freeBusy = (q: CalendarAvailabilityQueryParams) =>\n        querySpaceFreeBusy(q, this._org);\n    /* istanbul ignore next */\n    public readonly availability = (q: CalendarAvailabilityQueryParams) =>\n        queryCalendarAvailability(q);\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.init());\n    }\n\n    public async init() {\n        if (this._settings.get('app.events.use_bookings')) return;\n        this._initialised.next(true);\n    }\n\n    public get calendars(): Calendar[] {\n        return this._calendars.getValue();\n    }\n\n    /** Get Free busy for the selected day\n     * @param calendars User calendar\n     * @param date Selected day\n     */\n    public getFreeBusyDate(date: number, calendars: string) {\n        return querySpaceFreeBusy(\n            {\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                calendars,\n            },\n            this._org\n        );\n    }\n\n    /** Check rooms availability */\n    public async checkSpacesAvailability(\n        system_ids: string[],\n        period_start: number,\n        period_end: number,\n        old_booking?: CalendarEvent\n    ) {\n        const result = await queryCalendarAvailability({\n            period_start,\n            period_end,\n            system_ids: system_ids.join(','),\n        }).toPromise();\n        const start = new Date(old_booking?.date).valueOf();\n        const end = addMinutes(start, old_booking?.duration).valueOf();\n        const available = result.every((i) => {\n            const availability = i.availability;\n            if (old_booking && i.id === old_booking.system?.email) {\n                const index = availability.findIndex((block) => {\n                    return (\n                        block.date >= start &&\n                        addMinutes(block.date, block.duration).valueOf() <= end\n                    );\n                });\n                if (index !== -1) {\n                    availability.splice(index, 1);\n                }\n            }\n            return !availability.length;\n        });\n        return !!available;\n    }\n}\n","export * from './calendar.class';\nexport * from './calendar.interfaces';\nexport * from './calendar.service';\nexport * from './calendar.fn';\n"],"names":["queryBookings","queryCalendars","AsyncHandler","SettingsService","timePeriodsIntersect","unique","newCalendarEventFromBooking","queryEvents","addDays","endOfDay","getUnixTime","startOfDay","BehaviorSubject","combineLatest","forkJoin","timer","catchError","debounceTime","map","mergeMap","shareReplay","switchMap","tap","ScheduleStateService","constructor","_settings","_poll","_options","start","Date","now","_loading","_schedule","options","asObservable","loading","schedule","calendars","pipe","_","events","next","query","period_start","period_end","calendar","getValue","filter","date","duration","get","type","i","bookings","list","status","sort","a","b","startPolling","delay","interval","stopPolling","clearInterval","setOptions","i0","ɵɵinject","i1","_2","factory","ɵfac","providedIn","first","addMinutes","OrganisationService","queryCalendarAvailability","querySpaceFreeBusy","CalendarService","_org","_calendars","calendar_list","l","freeBusy","q","availability","initialised","subscribe","init","_this","_asyncToGenerator","_initialised","getFreeBusyDate","checkSpacesAvailability","system_ids","old_booking","result","join","toPromise","valueOf","end","available","every","id","system","email","index","findIndex","block","splice","length","i2"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}