{"version":3,"file":"default-apps_concierge_src_app_parking_parking-state_service_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAC4C;AAC6B;AACT;AACJ;;;;;;;;;;;;;;;;;IAaxCM,4DADJ,gBAAyD,eAC3C;IAAAA,oDAAA,YAAK;IACnBA,0DADmB,EAAW,EACrB;;;;;;IAOTA,4DAAA,cAAuD;IACnDA,uDAAA,8BAGuB;IACvBA,4DAAA,iBAaC;IARGA,wDAAA,mBAAAM,2EAAA;MAAAN,2DAAA,CAAAQ,GAAA;MAAA,MAAAC,MAAA,GAAAT,2DAAA;MAAA,OAAAA,yDAAA,CAEbS,MAAA,CAAAG,IAAA,CAAAC,UAAA,CAAgB;QAAAC,IAAA,EACJ,IAAI;QAAAC,UAAA,EACJ,IAAI;QAAAC,SAAA,EACJ,IAAI;QAAAC,KAAA,EACJ;MAAI,CAE1B,CAAC;IAAA,EADuB;IAEDjB,4DAAA,mBAAgD;IAC5CA,oDAAA,sBACJ;IAERA,0DAFQ,EAAW,EACN,EACP;;;;;IAoCUA,4DAAA,WAAmB;IAAAA,oDAAA,QAAC;IAAAA,0DAAA,EAAO;;;;;IAhE/CA,4DAAA,cAIC;IACGA,wDAAA,IAAAmB,kDAAA,iBAAuD;IA0B/CnB,4DAFR,cAAyC,cACjB,gBACO;IAAAA,oDAAA,WAAI;IAAAA,0DAAA,EAAQ;IACnCA,4DAAA,yBAAoD;IAChDA,uDAAA,gBAKE;IACFA,4DAAA,gBAAW;IAAAA,oDAAA,yBAAkB;IAErCA,0DAFqC,EAAY,EAC5B,EACf;IAEFA,4DADJ,eAAoB,iBACG;IAAAA,oDAAA,aAAK;IAAAA,0DAAA,EAAQ;IAChCA,4DAAA,0BAAoD;IAChDA,uDAAA,iBAKE;IACFA,4DAAA,iBAAW;IAAAA,oDAAA,4BAAoB;IAG3CA,0DAH2C,EAAY,EAC9B,EACf,EACJ;IACNA,4DAAA,iBAAkB;IAAAA,oDAAA,YAAI;IAAAA,0DAAA,EAAQ;IAC9BA,uDAAA,wBAAoD;IACpDA,4DAAA,iBAA2B;IAAAA,oDAAA,qBAAa;IAAAA,0DAAA,EAAQ;IAChDA,uDAAA,oCAI4B;IAC5BA,4DAAA,iBAA0B;IACtBA,oDAAA,qBAAY;IAAAA,wDAAA,KAAAoB,oDAAA,mBAAmB;IACnCpB,0DAAA,EAAQ;IACRA,4DAAA,0BAAoD;IAChDA,uDAAA,iBAKE;IACFA,4DAAA,iBAAW;IAAAA,oDAAA,kCAA0B;IAE7CA,0DAF6C,EAAY,EACpC,EACd;;;;IAxEHA,wDAAA,cAAAS,MAAA,CAAAG,IAAA,CAAkB;IAEwBZ,uDAAA,EAAW;IAAXA,wDAAA,UAAAS,MAAA,CAAAK,IAAA,CAAW;IA2D9Bd,uDAAA,IAAU;IAAVA,wDAAA,SAAAS,MAAA,CAAAK,IAAA,CAAU;;;;;;IAgBjCd,4DAJJ,iBAGC,iBAC+D;IACxDA,oDAAA,eACJ;IAAAA,0DAAA,EAAS;IACTA,4DAAA,iBAAwD;IAArBA,wDAAA,mBAAAuB,uEAAA;MAAAvB,2DAAA,CAAAwB,GAAA;MAAA,MAAAf,MAAA,GAAAT,2DAAA;MAAA,OAAAA,yDAAA,CAASS,MAAA,CAAAgB,QAAA,EAAU;IAAA,EAAC;IACnDzB,oDAAA,aACJ;IACJA,0DADI,EAAS,EACJ;;;;;IAGTA,4DAAA,eAEC;IACGA,uDAAA,sBAAyC;IACzCA,4DAAA,QAAG;IAAAA,oDAAA,oCAA6B;IACpCA,0DADoC,EAAI,EACjC;;;AAKb,MAAO0B,4BAA6B,SAAQ5B,yDAAY;EAO1D,IAAW6B,EAAEA,CAAA;IACT,OAAO,IAAI,CAACf,IAAI,CAACgB,KAAK,CAACD,EAAE;EAC7B;EAEAE,YAEYC,KAMP,EACOC,aAAiC,EACjCC,WAAuD;IAE/D,KAAK,EAAE;IAVC,KAAAF,KAAK,GAALA,KAAK;IAOL,KAAAC,aAAa,GAAbA,aAAa;IACb,KAAAC,WAAW,GAAXA,WAAW;IApBhB,KAAAC,OAAO,GAAY,KAAK;IACf,KAAAnB,IAAI,GAAG,IAAI,CAACgB,KAAK,CAAChB,IAAI;IACtB,KAAAoB,IAAI,GAAG,IAAI,CAACJ,KAAK,CAACI,IAAI;IAE/B,KAAAtB,IAAI,GAAG,IAAI,CAACmB,aAAa,CAACnB,IAAI;EAmBrC;EAEOuB,QAAQA,CAAA;IACX,IAAI,CAACJ,aAAa,CAACK,OAAO,CAAC,IAAI,CAACN,KAAK,CAACO,OAAO,CAAC;IAC9C,IAAI,CAACN,aAAa,CAACO,UAAU,CAAC;MAAEC,IAAI,EAAE;IAAS,CAAE,CAAC;IAClD,IAAI,CAACC,YAAY,CACb,cAAc,EACd,IAAI,CAAC5B,IAAI,CAAC6B,QAAQ,CAAC3B,IAAI,CAAC4B,YAAY,CAACC,SAAS,CAAE7B,IAAI,IAAI;MACpD,IAAI,CAACA,IAAI,EAAE;MACX,IAAI,CAACF,IAAI,CAACC,UAAU,CAAC;QACjBG,SAAS,EAAEF,IAAI,CAAC8B,IAAI;QACpB7B,UAAU,EAAED,IAAI,CAAC+B,KAAK;QACtBC,OAAO,EAAEhC,IAAI,CAACa,EAAE,IAAIb,IAAI,CAAC+B,KAAK;QAC9BE,SAAS,EAAE,CAACjC,IAAI;OACnB,CAAC;IACN,CAAC,CAAC,CACL;IACD,IAAI,CAACF,IAAI,CAACC,UAAU,CAAC;MACjBmC,OAAO,EAAE,IAAI;MACbC,YAAY,EAAE,SAAS;MACvBnC,IAAI,EAAG,IAAI,CAACgB,KAAK,CAAChB,IAAY,IAAIf,4DAAW;KAChD,CAAC;IACF,IAAI,IAAI,CAAC+B,KAAK,CAAChB,IAAI,EAAE;MACjB,IAAI,CAACF,IAAI,CAACC,UAAU,CAAC;QACjBE,UAAU,EAAE,IAAI,CAACe,KAAK,CAAChB,IAAI,CAAC+B,KAAK;QACjCC,OAAO,EAAE,IAAI,CAAChB,KAAK,CAAChB,IAAI,CAAC+B,KAAK;QAC9B7B,SAAS,EAAE,IAAI,CAACc,KAAK,CAAChB,IAAI,CAAC8B,IAAI;QAC/BG,SAAS,EAAE,CAAC,IAAI,CAACjB,KAAK,CAAChB,IAAI;OAC9B,CAAC;MACF,IAAI,CAACF,IAAI,CAAC6B,QAAQ,CAACS,YAAY,CAACC,aAAa,CAAC,CAC1CzD,sDAAU,CAAC0D,QAAQ,CACtB,CAAC;MACF,IAAI,CAACxC,IAAI,CAAC6B,QAAQ,CAACzB,SAAS,CAACqC,OAAO,EAAE;MACtC,IAAI,CAACzC,IAAI,CAAC6B,QAAQ,CAAC1B,UAAU,CAACsC,OAAO,EAAE;IAC3C;IACA,IAAI,IAAI,CAACvB,KAAK,CAACwB,KAAK,EAAE;MAClB,IAAI,CAACvB,aAAa,CAACO,UAAU,CAAC;QAAEiB,OAAO,EAAE,IAAI,CAACzB,KAAK,CAACwB,KAAK,CAAC3B;MAAE,CAAE,CAAC;IACnE;IACA,IAAI,IAAI,CAACG,KAAK,CAAC0B,OAAO,EAAE;MACpB,IAAI,CAAC5C,IAAI,CAACC,UAAU,CAAC;QAAE4C,SAAS,EAAE,IAAI,CAAC3B,KAAK,CAAC0B;MAAO,CAAE,CAAC;IAC3D;IACA,IAAI,IAAI,CAAC1B,KAAK,CAACI,IAAI,EAAE;MACjB,IAAI,CAACtB,IAAI,CAACC,UAAU,CAAC;QAAEqB,IAAI,EAAE,IAAI,CAACJ,KAAK,CAACI;MAAI,CAAE,CAAC;MAC/C,IAAI,CAACM,YAAY,CACb,aAAa,EACb,IAAI,CAAC5B,IAAI,CAAC8B,YAAY,CAACC,SAAS,CAAEe,CAAC,IAAI;QACnC,IAAI,CAACC,OAAO,CACR,cAAc,EACd,MACI,IAAI,CAAC/C,IAAI,CAACgD,GAAG,CAAC,MAAM,CAAC,CAACP,OAAO,CAAC;UAAEQ,SAAS,EAAE;QAAK,CAAE,CAAC,EACvD,EAAE,CACL;MACL,CAAC,CAAC,CACL;MACD,IAAI,CAACjD,IAAI,CAACgD,GAAG,CAAC,MAAM,CAAC,CAACP,OAAO,EAAE;IACnC;EACJ;EAEa5B,QAAQA,CAAA;IAAA,IAAAqC,KAAA;IAAA,OAAAC,wJAAA;MACjBD,KAAI,CAAClD,IAAI,CAACoD,sBAAsB,EAAE;MAClC,IAAI,CAACF,KAAI,CAAClD,IAAI,CAACqD,KAAK,EAAE;MACtBH,KAAI,CAAC7B,OAAO,GAAG,IAAI;MACnB,MAAMiC,MAAM,SAASJ,KAAI,CAAC/B,aAAa,CAACN,QAAQ,EAAE,CAAC0C,KAAK,CAAEC,CAAC,IAAI;QAC3DN,KAAI,CAAC7B,OAAO,GAAG,KAAK;QACpB6B,KAAI,CAAClD,IAAI,CAAC6B,QAAQ,CAACS,YAAY,CAACC,aAAa,CAAC,EAAE,CAAC;QACjD,MAAMiB,CAAC;MACX,CAAC,CAAC;MACFN,KAAI,CAAClD,IAAI,CAAC6B,QAAQ,CAACS,YAAY,CAACC,aAAa,CAAC,EAAE,CAAC;MACjDW,KAAI,CAAC9B,WAAW,CAACqC,KAAK,CAACH,MAAM,CAACvC,EAAE,CAAC;IAAC;EACtC;EAAC,QAAA2C,CAAA;qBA7FQ5C,4BAA4B,EAAA1B,+DAAA,CAYzBL,qEAAe,GAAAK,+DAAA,CAAAwE,iEAAA,GAAAxE,+DAAA,CAAAyE,kEAAA;EAAA;EAAA,QAAAC,EAAA;UAZlBhD,4BAA4B;IAAAiD,SAAA;IAAAC,QAAA,GAAA5E,wEAAA;IAAA8E,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,sCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QA1GzBnF,4DAFR,aAAuB,gBAC2C,YACzC;QACbA,oDAAA,GACJ;QAAAA,0DAAA,EAAK;QACLA,wDAAA,IAAAqF,8CAAA,oBAAyD;QAG7DrF,0DAAA,EAAS;QA6ETA,wDA5EA,IAAAsF,4CAAA,mBAIC,IAAAC,8CAAA,oBA2EA;QAQLvF,0DAAA,EAAM;QACNA,wDAAA,IAAAwF,mDAAA,gCAAAxF,oEAAA,CAAyB;;;;QA9FbA,uDAAA,GACJ;QADIA,gEAAA,MAAAoF,GAAA,CAAAzD,EAAA,2CACJ;QACS3B,uDAAA,EAAc;QAAdA,wDAAA,UAAAoF,GAAA,CAAAnD,OAAA,CAAc;QAKtBjC,uDAAA,EAAgB;QAAAA,wDAAhB,UAAAoF,GAAA,CAAAnD,OAAA,CAAgB,aAAA0D,aAAA,CAAe;QA4E/B3F,uDAAA,EAAc;QAAdA,wDAAA,UAAAoF,GAAA,CAAAnD,OAAA,CAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjGgD;AACX;AACK;;;;;;;;;;;;;;IAYrDjC,4DADJ,gBAAyD,eAC3C;IAAAA,oDAAA,YAAK;IACnBA,0DADmB,EAAW,EACrB;;;;;;IAOTA,4DALJ,cAIC,eACqB;IAAAA,oDAAA,oCAA6B;IAAAA,0DAAA,EAAQ;IACvDA,4DAAA,wBAAqC;IACjCA,uDAAA,gBAAqD;IACrDA,4DAAA,gBAAW;IAAAA,oDAAA,4CAAqC;IACpDA,0DADoD,EAAY,EAC/C;IACjBA,4DAAA,gBAAoB;IAAAA,oDAAA,aAAM;IAAAA,0DAAA,EAAQ;IAClCA,4DAAA,wBAAqC;IACjCA,uDAAA,iBAAyD;IACzDA,4DAAA,iBAAW;IACPA,oDAAA,iDACJ;IACJA,0DADI,EAAY,EACC;IACjBA,4DAAA,iBAAkB;IAAAA,oDAAA,qBAAa;IAAAA,0DAAA,EAAQ;IACvCA,4DAAA,eAAyC;IACrCA,uDAAA,+BAIuB;IACvBA,4DAAA,kBAYC;IAPGA,wDAAA,mBAAA+F,oEAAA;MAAA/F,2DAAA,CAAAQ,GAAA;MAAA,MAAAC,MAAA,GAAAT,2DAAA;MAAA,OAAAA,yDAAA,CAEbS,MAAA,CAAAG,IAAA,CAAAC,UAAA,CAAgB;QAAAmF,aAAA,EACJ,IAAI;QAAAC,WAAA,EACJ,IAAI;QAAAC,aAAA,EACH;MAAI,CAE3B,CAAC;IAAA,EADuB;IAEDlG,4DAAA,oBAAgD;IAC5CA,oDAAA,uBACJ;IAERA,0DAFQ,EAAW,EACN,EACP;IACNA,4DAAA,iBAAmB;IAAAA,oDAAA,aAAK;IAAAA,0DAAA,EAAQ;IAChCA,4DAAA,yBAAqC;IACjCA,uDAAA,oBAIY;IAChBA,0DAAA,EAAiB;IAUbA,4DADJ,eAAwD,kBACQ;IACxDA,oDAAA,gBACJ;IAAAA,0DAAA,EAAS;IACTA,4DAAA,kBAAwD;IAArBA,wDAAA,mBAAAmG,oEAAA;MAAAnG,2DAAA,CAAAQ,GAAA;MAAA,MAAAC,MAAA,GAAAT,2DAAA;MAAA,OAAAA,yDAAA,CAASS,MAAA,CAAAgB,QAAA,EAAU;IAAA,EAAC;IACnDzB,oDAAA,cACJ;IAERA,0DAFQ,EAAS,EACP,EACH;;;;IA/DHA,wDAAA,cAAAS,MAAA,CAAAG,IAAA,CAAkB;;;;;IAkEtBZ,4DAAA,eAEC;IACGA,uDAAA,sBAAyC;IACzCA,4DAAA,QAAG;IAAAA,oDAAA,sCAA+B;IACtCA,0DADsC,EAAI,EACnC;;;AAKb,MAAOoG,0BAA0B;EAInC,IAAWzE,EAAEA,CAAA;IACT,OAAO,IAAI,CAACG,KAAK,EAAEH,EAAE,IAAI,EAAE;EAC/B;EAaAE,YACqCC,KAAmB,EAC5CE,WAAqD;IAD5B,KAAAF,KAAK,GAALA,KAAK;IAC9B,KAAAE,WAAW,GAAXA,WAAW;IApBG,KAAAqE,KAAK,GAAG,IAAIT,uDAAY,EAAe;IAOjD,KAAAhF,IAAI,GAAG,IAAIkF,qDAAS,CAAC;MACjCnE,EAAE,EAAE,IAAIkE,uDAAW,CAAC,EAAE,CAAC;MACvBjD,IAAI,EAAE,IAAIiD,uDAAW,CAAC,EAAE,EAAE,CAACnG,sDAAU,CAAC0D,QAAQ,CAAC,CAAC;MAChDkD,MAAM,EAAE,IAAIT,uDAAW,CAAC,EAAE,EAAE,CAACnG,sDAAU,CAAC0D,QAAQ,CAAC,CAAC;MAClD4C,aAAa,EAAE,IAAIH,uDAAW,CAAO,IAAI,CAAC;MAC1CI,WAAW,EAAE,IAAIJ,uDAAW,CAAC,EAAE,CAAC;MAChCK,aAAa,EAAE,IAAIL,uDAAW,CAAC,EAAE,CAAC;MAClCU,KAAK,EAAE,IAAIV,uDAAW,CAAC,EAAE,CAAC;MAC1BW,YAAY,EAAE,IAAIX,uDAAW,CAAC,CAAC;KAClC,CAAC;IAME,IAAI/D,KAAK,EAAE,IAAI,CAAClB,IAAI,CAACC,UAAU,CAACiB,KAAK,CAAC;EAC1C;EAEOL,QAAQA,CAAA;IACX,IAAI,CAAC,IAAI,CAACb,IAAI,CAACqD,KAAK,EAAE;IACtB,IAAI,CAAChC,OAAO,GAAG,IAAI;IACnB,MAAML,KAAK,GAAG,IAAI,CAAChB,IAAI,CAACgB,KAAK;IAC7B,IAAIA,KAAK,CAACoE,aAAa,EAAE;MACrBpE,KAAK,CAACqE,WAAW,GAAGrE,KAAK,CAACoE,aAAa,CAACnD,KAAK;MAC7CjB,KAAK,CAACsE,aAAa,GAAGtE,KAAK,CAACoE,aAAa,CAACpD,IAAI;IAClD;IACA,IAAI,CAACZ,WAAW,CAACyE,YAAY,GAAG,IAAI;IACpC,IAAI,CAACJ,KAAK,CAACK,IAAI,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,QAAQ,EAAEhF;IAAK,CAAE,CAAC;EACxD;EAAC,QAAA0C,CAAA;qBApCQ8B,0BAA0B,EAAApG,+DAAA,CAoBvBL,qEAAe,GAAAK,+DAAA,CAAAwE,kEAAA;EAAA;EAAA,QAAAE,EAAA;UApBlB0B,0BAA0B;IAAAzB,SAAA;IAAAkC,OAAA;MAAAR,KAAA;IAAA;IAAAvB,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAA6B,oCAAA3B,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QApFvBnF,4DAFR,aAAuB,gBAC2C,YACzC;QAAAA,oDAAA,GAAuC;QAAAA,0DAAA,EAAK;QAC7DA,wDAAA,IAAA+G,4CAAA,oBAAyD;QAG7D/G,0DAAA,EAAS;QACTA,wDAAA,IAAAgH,0CAAA,mBAIC;QA+DLhH,0DAAA,EAAM;QACNA,wDAAA,IAAAiH,iDAAA,gCAAAjH,oEAAA,CAAyB;;;;QAzEAA,uDAAA,GAAuC;QAAvCA,gEAAA,KAAAoF,GAAA,CAAAzD,EAAA,oCAAuC;QAC/C3B,uDAAA,EAAc;QAAdA,wDAAA,UAAAoF,GAAA,CAAAnD,OAAA,CAAc;QAKtBjC,uDAAA,EAAgB;QAAAA,wDAAhB,UAAAoF,GAAA,CAAAnD,OAAA,CAAgB,aAAAiF,aAAA,CAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBK;AAM1B;AAOF;AACmC;AACM;AACtB;AACyB;AACf;AAU9B;AACqD;AACF;AACM;;;;;AAgC3E,MAAO4B,mBAAoB,SAAQhJ,yDAAY;EAsIjD+B,YACYkH,IAAyB,EACzBC,OAAkB,EAClBC,SAA0B;IAElC,KAAK,EAAE;IAJC,KAAAF,IAAI,GAAJA,IAAI;IACJ,KAAAC,OAAO,GAAPA,OAAO;IACP,KAAAC,SAAS,GAATA,SAAS;IAxIb,KAAAC,KAAK,GAAG,IAAIf,iDAAe,CAAS,CAAC,CAAC;IACtC,KAAAgB,OAAO,GAAG,IAAIhB,iDAAe,CAAC,CAAC,CAAC;IAChC,KAAAiB,QAAQ,GAAG,IAAIjB,iDAAe,CAAiB;MACnDjG,IAAI,EAAEmH,IAAI,CAACC,GAAG,EAAE;MAChBC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE;KACV,CAAC;IACM,KAAAC,QAAQ,GAAG,IAAItB,iDAAe,CAAW,EAAE,CAAC;IACpD;IACO,KAAAuB,MAAM,GAAG,IAAI,CAACX,IAAI,CAACY,UAAU,CAACC,IAAI,CACrCpB,mDAAG,CAAElE,CAAC,IAAI;MACN,IAAI,CAAC,IAAI,CAAC2E,SAAS,CAACrF,GAAG,CAAC,gBAAgB,CAAC,EAAE;QACvC,MAAMiG,IAAI,GAAG,IAAI,CAACd,IAAI,CAACe,kBAAkB,EAAE;QAC3C,MAAMC,OAAO,GAAGF,IAAI,CAACrB,GAAG,CAAEwB,GAAG,IAAKA,GAAG,CAACrI,EAAE,CAAC;QACzC,MAAMsI,IAAI,GAAG3F,CAAC,CAACgE,MAAM,CAChB4B,GAAG,IACAH,OAAO,CAACI,QAAQ,CAACD,GAAG,CAACzG,SAAS,CAAC,IAC/ByG,GAAG,CAACE,IAAI,CAACD,QAAQ,CAAC,SAAS,CAAC,CACnC;QACDF,IAAI,CAACzB,GAAG,CAAE0B,GAAG,KAAM;UACf,GAAGA,GAAG;UACNG,YAAY,EAAE,GACVR,IAAI,CAACS,IAAI,CAAEhG,CAAC,IAAKA,CAAC,CAAC3C,EAAE,KAAKuI,GAAG,CAACzG,SAAS,CAAC,EAAE4G,YAC9C,MAAMH,GAAG,CAACG,YAAY;SACzB,CAAC,CAAC;QACH,OAAOJ,IAAI;MACf;MACA,OAAO3F,CAAC,CAACgE,MAAM,CACV4B,GAAG,IACAA,GAAG,CAACzG,SAAS,KAAK,IAAI,CAACsF,IAAI,CAACwB,QAAQ,CAAC5I,EAAE,IACvCuI,GAAG,CAACE,IAAI,CAACD,QAAQ,CAAC,SAAS,CAAC,CACnC;IACL,CAAC,CAAC,CACL;IACD;IACO,KAAAK,MAAM,GAAGpC,oDAAa,CAAC,CAC1B,IAAI,CAACsB,MAAM,EACX,IAAI,CAACN,QAAQ,EACb,IAAI,CAACD,OAAO,CACf,CAAC,CAACS,IAAI,CACHtB,uDAAM,CAAC,CAAC,CAACmC,IAAI,EAAEC,OAAO,CAAC,KAAK,CAAC,EAAEA,OAAO,CAAClB,KAAK,CAAC,CAAC,CAAC,IAAIiB,IAAI,CAAC,CAAC,CAAC,EAAE9I,EAAE,CAAC,CAAC,EAChE+G,0DAAS,CAAC,CAAC,CAACgB,MAAM,EAAEgB,OAAO,CAAC,KAAI;MAC5B,IAAI,CAACjB,QAAQ,CAACkB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAClB,QAAQ,CAACmB,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC;MAC3D,OAAOhD,gEAAY,CACf8C,OAAO,CAAClB,KAAK,CAAC,CAAC,CAAC,IAAIE,MAAM,CAAC,CAAC,CAAC,EAAE/H,EAAE,EACjC,gBAAgB,CACnB;IACL,CAAC,CAAC,EACF6G,mDAAG,CACE5B,QAAQ,IACJA,QAAQ,CAACiE,OAAO,YAAYC,KAAK,GAC5BlE,QAAQ,CAACiE,OAAO,GAChB,EAAqB,CAClC,EACDjC,oDAAG,CAAC,MACA,IAAI,CAACa,QAAQ,CAACkB,IAAI,CACd,IAAI,CAAClB,QAAQ,CAACmB,QAAQ,EAAE,CAACtC,MAAM,CAAEhE,CAAC,IAAKA,CAAC,KAAK,QAAQ,CAAC,CACzD,CACJ,EACDmE,4DAAW,CAAC,CAAC,CAAC,CACjB;IACD;IACO,KAAAsC,KAAK,GAAG3C,oDAAa,CAAC,CACzB,IAAI,CAACW,IAAI,CAACiC,eAAe,EACzB,IAAI,CAAC7B,OAAO,CACf,CAAC,CAACS,IAAI,CACHtB,uDAAM,CAAC,CAAC,CAAC0B,GAAG,CAAC,KAAK,CAAC,CAACA,GAAG,EAAErI,EAAE,CAAC,EAC5B+G,0DAAS,CAAC,CAAC,CAACsB,GAAG,CAAC,KAAI;MAChB,IAAI,CAACP,QAAQ,CAACkB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAClB,QAAQ,CAACmB,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;MAC1D,OAAOhD,gEAAY,CAACoC,GAAG,CAACrI,EAAE,EAAE,eAAe,CAAC;IAChD,CAAC,CAAC,EACF6G,mDAAG,CACE5B,QAAQ,IACJA,QAAQ,CAACiE,OAAO,YAAYC,KAAK,GAC5BlE,QAAQ,CAACiE,OAAO,GAChB,EAAoB,CACjC,EACDjC,oDAAG,CAAC,MACA,IAAI,CAACa,QAAQ,CAACkB,IAAI,CACd,IAAI,CAAClB,QAAQ,CAACmB,QAAQ,EAAE,CAACtC,MAAM,CAAEhE,CAAC,IAAKA,CAAC,KAAK,OAAO,CAAC,CACxD,CACJ,EACDmE,4DAAW,CAAC,CAAC,CAAC,CACjB;IACD;IACO,KAAAwC,QAAQ,GAAG7C,oDAAa,CAAC,CAC5B,IAAI,CAACW,IAAI,CAACiC,eAAe,EACzB,IAAI,CAAC5B,QAAQ,EACb,IAAI,CAAC2B,KAAK,EACV,IAAI,CAAC7B,KAAK,CACb,CAAC,CAACU,IAAI,CACHvB,6DAAY,CAAC,GAAG,CAAC,EACjBK,0DAAS,CAAC,CAAC,CAACsB,GAAG,EAAEU,OAAO,EAAEK,KAAK,CAAC,KAAI;MAChC,IAAI,CAACtB,QAAQ,CAACkB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAClB,QAAQ,CAACmB,QAAQ,EAAE,EAAE,UAAU,CAAC,CAAC;MAC7D,OAAOvD,gEAAa,CAAC;QACjB6D,YAAY,EAAEjD,qDAAW,CAACC,qDAAU,CAACwC,OAAO,CAACxI,IAAI,CAAC,CAAC;QACnDiJ,UAAU,EAAElD,qDAAW,CAACF,qDAAQ,CAAC2C,OAAO,CAACxI,IAAI,CAAC,CAAC;QAC/CK,IAAI,EAAE,SAAS;QACfiH,KAAK,EAAEkB,OAAO,CAAClB,KAAK,EAAE4B,MAAM,GACtBV,OAAO,CAAClB,KAAK,CAAC6B,IAAI,CAAC,GAAG,CAAC,GACvB,CAAC,IAAI,CAACpC,SAAS,CAACrF,GAAG,CAAC,gBAAgB,CAAC,GAC/B,IAAI,CAACmF,IAAI,CAACuC,MAAM,EAAE3J,EAAE,GACpB,EAAE,KAAKqI,GAAG,EAAErI;OAC3B,CAAC,CAACiI,IAAI,CACHpB,mDAAG,CAAEyB,IAAI,IAAI;QACT,KAAK,MAAM5H,OAAO,IAAI4H,IAAI,EAAE;UACxB,MAAMnJ,IAAI,GAAGiK,KAAK,CAACT,IAAI,CAClBhG,CAAC,IACEA,CAAC,CAACzB,KAAK,CAAC0I,WAAW,EAAE,KACrBlJ,OAAO,CAACtB,UAAU,CAACwK,WAAW,EAAE,CACvC;UACDC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE3K,IAAI,EAAEiK,KAAK,CAAC;UACjC,IAAIjK,IAAI,EAAE;YACNuB,OAAO,CAACqJ,cAAc,CAACxI,YAAY,GAC/Bb,OAAO,CAACqJ,cAAc,CAACxI,YAAY,IACnCpC,IAAI,CAACoC,YAAY;UACzB;QACJ;QACA,OAAO+G,IAAI;MACf,CAAC,CAAC,CACL;IACL,CAAC,CAAC,EACFrB,oDAAG,CAAC,MACA,IAAI,CAACa,QAAQ,CAACkB,IAAI,CACd,IAAI,CAAClB,QAAQ,CAACmB,QAAQ,EAAE,CAACtC,MAAM,CAAEhE,CAAC,IAAKA,CAAC,KAAK,UAAU,CAAC,CAC3D,CACJ,EACDmE,4DAAW,CAAC,CAAC,CAAC,CACjB;IAEe,KAAAiC,OAAO,GAAG,IAAI,CAACtB,QAAQ,CAACuC,YAAY,EAAE;IACtC,KAAA1J,OAAO,GAAG,IAAI,CAACwH,QAAQ,CAACkC,YAAY,EAAE;EAQtD;EAEOrJ,UAAUA,CAACoI,OAAgC;IAC9C,IAAI,CAACtB,QAAQ,CAACuB,IAAI,CAAC;MAAE,GAAG,IAAI,CAACvB,QAAQ,CAACwB,QAAQ,EAAE;MAAE,GAAGF;IAAO,CAAE,CAAC;EACnE;EAEOkB,YAAYA,CAACC,KAAK,GAAG,IAAI;IAC5B,IAAI,CAAC3C,KAAK,CAACyB,IAAI,CAACtB,IAAI,CAACC,GAAG,EAAE,CAAC;IAC3B,IAAI,CAACwC,QAAQ,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC5C,KAAK,CAACyB,IAAI,CAACtB,IAAI,CAACC,GAAG,EAAE,CAAC,EAAEuC,KAAK,CAAC;IAC/D,OAAO,MAAM,IAAI,CAACE,WAAW,EAAE;EACnC;EAEOA,WAAWA,CAAA;IACd,IAAI,CAACC,aAAa,CAAC,MAAM,CAAC;EAC9B;EAEA;EACaC,SAASA,CAACC,KAAoB;IAAA,IAAApI,KAAA;IAAA,OAAAC,wJAAA;MACvC,MAAMoI,GAAG,GAAGrI,KAAI,CAACkF,OAAO,CAACoD,IAAI,CAAChG,sFAA0B,EAAE;QACtDiG,IAAI,EAAEH;OACT,CAAC;MACF,MAAMI,KAAK,SAASC,OAAO,CAACC,IAAI,CAAC,CAC7BL,GAAG,CAACM,WAAW,EAAE,CAACC,SAAS,EAAE,EAC7BP,GAAG,CAACQ,iBAAiB,CAACtG,KAAK,CACtBuD,IAAI,CAACrB,sDAAK,CAAEjE,CAAC,IAAKA,CAAC,CAACqC,MAAM,KAAK,MAAM,CAAC,CAAC,CACvC+F,SAAS,EAAE,CACnB,CAAC;MACF,IAAIJ,KAAK,EAAE3F,MAAM,KAAK,MAAM,EAAE;MAC9B,MAAMiG,IAAI,GAAG9I,KAAI,CAACsF,QAAQ,CAACwB,QAAQ,EAAE,CAACpB,KAAK,CAAC,CAAC,CAAC;MAC9C,MAAMqD,SAAS,GAAG;QACd,GAAGP,KAAK,CAAC1F,QAAQ;QACjBjF,EAAE,EAAE2K,KAAK,CAAC1F,QAAQ,CAACjF,EAAE,IAAI,WAAWiL,IAAI,IAAI9E,0DAAS,CAAC,OAAO,CAAC;OACjE;MACD,MAAM0C,MAAM,SAAS1G,KAAI,CAAC0G,MAAM,CAACZ,IAAI,CAACjB,qDAAI,CAAC,CAAC,CAAC,CAAC,CAAC+D,SAAS,EAAE;MAC1D,MAAMI,GAAG,GAAGtC,MAAM,CAACuC,SAAS,CAAEzI,CAAC,IAAKA,CAAC,CAAC3C,EAAE,KAAKkL,SAAS,CAAClL,EAAE,CAAC;MAC1D,IAAImL,GAAG,IAAI,CAAC,EAAEtC,MAAM,CAACsC,GAAG,CAAC,GAAGD,SAAS,CAAC,KACjCrC,MAAM,CAACwC,IAAI,CAACH,SAAS,CAAC;MAC3B,MAAMI,cAAc,GAAGzC,MAAM;MAC7B,MAAM3C,kEAAc,CAAC+E,IAAI,EAAE;QACvBhK,IAAI,EAAE,gBAAgB;QACtBiI,OAAO,EAAEoC,cAAc;QACvBC,WAAW,EAAE;OAChB,CAAC,CAACR,SAAS,EAAE;MACd5I,KAAI,CAACqF,OAAO,CAACwB,IAAI,CAACtB,IAAI,CAACC,GAAG,EAAE,CAAC;MAC7B6C,GAAG,CAAC9H,KAAK,EAAE;IAAC;EAChB;EAEA;EACa8I,WAAWA,CAACjB,KAAmB;IAAA,IAAAkB,MAAA;IAAA,OAAArJ,wJAAA;MACxC,MAAMuI,KAAK,SAAS7E,iEAAgB,CAChC;QACI4F,KAAK,EAAE,sBAAsB;QAC7BC,OAAO,EAAE,sDAAsDpB,KAAK,CAACtJ,IAAI,IAAI;QAC7E2K,IAAI,EAAE;UAAED,OAAO,EAAE;QAAQ;OAC5B,EACDF,MAAI,CAACpE,OAAO,CACf;MACD,IAAIsD,KAAK,EAAE3F,MAAM,KAAK,MAAM,EAAE;MAC9B2F,KAAK,CAACrK,OAAO,CAAC,2BAA2B,CAAC;MAC1C,MAAM2K,IAAI,GAAGQ,MAAI,CAAChE,QAAQ,CAACwB,QAAQ,EAAE,CAACpB,KAAK,CAAC,CAAC,CAAC;MAC9C,MAAMgB,MAAM,SAAS4C,MAAI,CAAC5C,MAAM,CAACZ,IAAI,CAACjB,qDAAI,CAAC,CAAC,CAAC,CAAC,CAAC+D,SAAS,EAAE;MAC1D,MAAM7E,kEAAc,CAAC+E,IAAI,EAAE;QACvBhK,IAAI,EAAE,gBAAgB;QACtBiI,OAAO,EAAEL,MAAM,CAAClC,MAAM,CAAEhE,CAAC,IAAKA,CAAC,CAAC3C,EAAE,KAAKuK,KAAK,CAACvK,EAAE,CAAC;QAChDuL,WAAW,EAAE;OAChB,CAAC,CAACR,SAAS,EAAE;MACdJ,KAAK,CAACjI,KAAK,EAAE;IAAC;EAClB;EAEA;EACamJ,QAAQA,CAAC1M,IAAkB;IAAA,IAAA2M,MAAA;IAAA,OAAA1J,wJAAA;MACpCyH,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE3K,IAAI,CAAC;MAC9B,MAAMqL,GAAG,GAAGsB,MAAI,CAACzE,OAAO,CAACoD,IAAI,CAACvD,oFAAyB,EAAE;QACrDwD,IAAI,EAAEvL;OACT,CAAC;MACF,MAAMwL,KAAK,SAASC,OAAO,CAACC,IAAI,CAAC,CAC7BL,GAAG,CAACM,WAAW,EAAE,CAACC,SAAS,EAAE,EAC7BP,GAAG,CAACQ,iBAAiB,CAACtG,KAAK,CACtBuD,IAAI,CAACrB,sDAAK,CAAEjE,CAAC,IAAKA,CAAC,CAACqC,MAAM,KAAK,MAAM,CAAC,CAAC,CACvC+F,SAAS,EAAE,CACnB,CAAC;MACF,IAAIJ,KAAK,EAAE3F,MAAM,KAAK,MAAM,EAAE;MAC9B,MAAMiG,IAAI,GAAGa,MAAI,CAAC1E,IAAI,CAACwB,QAAQ,CAAC5I,EAAE;MAClC,MAAM+L,QAAQ,GAAG;QACb,GAAGpB,KAAK,CAAC1F,QAAQ;QACjBjF,EAAE,EAAE2K,KAAK,CAAC1F,QAAQ,CAACjF,EAAE,IAAI,SAASmG,0DAAS,CAAC,OAAO,CAAC;OACvD;MACD,IAAI,MAAM,IAAI4F,QAAQ,EAAE,OAAOA,QAAQ,CAAC5M,IAAI;MAC5C,MAAMiK,KAAK,SAAS0C,MAAI,CAAC1C,KAAK,CAACnB,IAAI,CAACjB,qDAAI,CAAC,CAAC,CAAC,CAAC,CAAC+D,SAAS,EAAE;MACxD,MAAMI,GAAG,GAAG/B,KAAK,CAACgC,SAAS,CAAEzI,CAAC,IAAKA,CAAC,CAAC3C,EAAE,KAAK+L,QAAQ,CAAC/L,EAAE,CAAC;MACxD,IAAImL,GAAG,IAAI,CAAC,EAAE/B,KAAK,CAAC+B,GAAG,CAAC,GAAGY,QAAQ,CAAC,KAC/B3C,KAAK,CAACiC,IAAI,CAACU,QAAQ,CAAC;MACzB,MAAM7F,kEAAc,CAAC+E,IAAI,EAAE;QACvBhK,IAAI,EAAE,eAAe;QACrBiI,OAAO,EAAEE,KAAK;QACdmC,WAAW,EAAE;OAChB,CAAC,CAACR,SAAS,EAAE;MACde,MAAI,CAACtE,OAAO,CAACwB,IAAI,CAACtB,IAAI,CAACC,GAAG,EAAE,CAAC;MAC7B6C,GAAG,CAAC9H,KAAK,EAAE;IAAC;EAChB;EAEA;EACasJ,UAAUA,CAAC7M,IAAiB;IAAA,IAAA8M,MAAA;IAAA,OAAA7J,wJAAA;MACrC,MAAMuI,KAAK,SAAS7E,iEAAgB,CAChC;QACI4F,KAAK,EAAE,qBAAqB;QAC5BC,OAAO,EAAE,qDAAqDxM,IAAI,CAAC8B,IAAI,IAAI;QAC3E2K,IAAI,EAAE;UAAED,OAAO,EAAE;QAAQ;OAC5B,EACDM,MAAI,CAAC5E,OAAO,CACf;MACD,IAAIsD,KAAK,EAAE3F,MAAM,KAAK,MAAM,EAAE;MAC9B2F,KAAK,CAACrK,OAAO,CAAC,0BAA0B,CAAC;MACzC,MAAM2K,IAAI,GAAGgB,MAAI,CAACxE,QAAQ,CAACwB,QAAQ,EAAE,CAACpB,KAAK,CAAC,CAAC,CAAC;MAC9C,MAAMuB,KAAK,SAAS6C,MAAI,CAAC7C,KAAK,CAACnB,IAAI,CAACjB,qDAAI,CAAC,CAAC,CAAC,CAAC,CAAC+D,SAAS,EAAE;MACxD,MAAM7E,kEAAc,CAAC+E,IAAI,EAAE;QACvBhK,IAAI,EAAE,eAAe;QACrBiI,OAAO,EAAEE,KAAK,CAACzC,MAAM,CAAEhE,CAAC,IAAKA,CAAC,CAAC3C,EAAE,KAAKb,IAAI,CAACa,EAAE,CAAC;QAC9CuL,WAAW,EAAE;OAChB,CAAC,CAACR,SAAS,EAAE;MACdJ,KAAK,CAACjI,KAAK,EAAE;IAAC;EAClB;EAEOwJ,eAAeA,CAClBC,WAAqB,EACrBhN,IAAA,GAAa,IAAI,EACjB0C,OAAgB,EAChBtB,IAAa;IAAA,IAAA6L,MAAA;IAEb,OAAO,IAAIxB,OAAO;MAAA,IAAAyB,IAAA,GAAAjK,wJAAA,CAAS,WAAOkK,OAAO,EAAI;QACzC,MAAMvE,MAAM,SAASqE,MAAI,CAACrE,MAAM,CAACE,IAAI,CAACjB,qDAAI,CAAC,CAAC,CAAC,CAAC,CAAC+D,SAAS,EAAE;QAC1D,MAAMP,GAAG,GAAG4B,MAAI,CAAC/E,OAAO,CAACoD,IAAI,CAAC1K,0FAA4B,EAAE;UACxD2K,IAAI,EAAE;YACFhK,OAAO,EAAEyL,WAAW;YACpBhN,IAAI;YACJ0C,OAAO;YACPtB,IAAI;YACJoB,KAAK,EAAEoG,MAAM,CAAC,CAAC;;SAEtB,CAAC;QACFyC,GAAG,CAACM,WAAW,EAAE,CAAC9J,SAAS,CAAEhB,EAAE,IAAKsM,OAAO,CAACtM,EAAE,CAAC,CAAC;MACpD,CAAC;MAAA,iBAAAuM,EAAA;QAAA,OAAAF,IAAA,CAAAG,KAAA,OAAAC,SAAA;MAAA;IAAA,IAAC;EACN;EAEahH,cAAcA,CAAC/E,OAAgB;IAAA,OAAA0B,wJAAA;MACxC,MAAMsK,OAAO,SAASjH,iEAAc,CAAC/E,OAAO,CAACV,EAAE,CAAC,CAC3C+K,SAAS,EAAE,CACXvI,KAAK,CAAEG,CAAC,IAAK,QAAQ,CAAC;MAC3B+J,OAAO,KAAK,QAAQ,GACd9G,4DAAW,CAAC,iCAAiC,CAAC,GAC9CC,8DAAa,CACT,oCACInF,OAAO,CAACrB,SACZ,OAAOgH,qDAAM,CAAC3F,OAAO,CAACH,IAAI,EAAE,QAAQ,CAAC,GAAG,CAC3C;IAAC;EACZ;EAEaoF,aAAaA,CAAC2D,QAAiB;IAAA,OAAAlH,wJAAA;MACxC,MAAMsK,OAAO,SAAS/G,gEAAa,CAAC2D,QAAQ,CAACtJ,EAAE,CAAC,CAC3C+K,SAAS,EAAE,CACXvI,KAAK,CAAEG,CAAC,IAAK,QAAQ,CAAC;MAC3B+J,OAAO,KAAK,QAAQ,GACd9G,4DAAW,CAAC,iCAAiC,CAAC,GAC9CC,8DAAa,CACT,oCACIyD,QAAQ,CAACjK,SACb,OAAOgH,qDAAM,CAACiD,QAAQ,CAAC/I,IAAI,EAAE,QAAQ,CAAC,GAAG,CAC5C;IAAC;EACZ;EAAC,QAAAoC,CAAA;qBApTQwE,mBAAmB,EAAA9I,uDAAA,CAAAwE,sEAAA,GAAAxE,uDAAA,CAAAyE,gEAAA,GAAAzE,uDAAA,CAAAuO,4DAAA;EAAA;EAAA,QAAA7J,EAAA;WAAnBoE,mBAAmB;IAAA0F,OAAA,EAAnB1F,mBAAmB,CAAA2F,IAAA;IAAAC,UAAA,EAFhB;EAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DyD;AACX;AACK;AACb;;;;;;;;;;;;;;;IAWxC1O,4DADJ,gBAAyD,eAC3C;IAAAA,oDAAA,YAAK;IACnBA,0DADmB,EAAW,EACrB;;;;;;IAOTA,4DALJ,cAIC,cAC4C;IACrCA,uDAAA,8BAGuB;IACvBA,4DAAA,iBAaC;IARGA,wDAAA,mBAAA2O,kEAAA;MAAA3O,2DAAA,CAAAQ,GAAA;MAAA,MAAAC,MAAA,GAAAT,2DAAA;MAAA,OAAAA,yDAAA,CAEbS,MAAA,CAAAG,IAAA,CAAAC,UAAA,CAAgB;QAAAC,IAAA,EACJ,IAAI;QAAA+B,KAAA,EACJ,IAAI;QAAAD,IAAA,EACJ,IAAI;QAAA3B,KAAA,EACJ;MAAI,CAE1B,CAAC;IAAA,EADuB;IAEDjB,4DAAA,mBAAgD;IAC5CA,oDAAA,sBACJ;IAERA,0DAFQ,EAAW,EACN,EACP;IACNA,4DAAA,gBAAkB;IAAAA,oDAAA,WAAI;IAAAA,0DAAA,EAAQ;IAC9BA,4DAAA,yBAAqC;IACjCA,uDAAA,gBAKE;IACFA,4DAAA,iBAAW;IAAAA,oDAAA,0BAAkB;IACjCA,0DADiC,EAAY,EAC5B;IACjBA,4DAAA,iBAAmB;IAAAA,oDAAA,aAAK;IAAAA,0DAAA,EAAQ;IAChCA,4DAAA,0BAAqC;IACjCA,uDAAA,iBAKE;IACFA,4DAAA,iBAAW;IAAAA,oDAAA,4BAAoB;IACnCA,0DADmC,EAAY,EAC9B;IAGTA,4DAFR,eAAyC,eACX,iBACI;IAAAA,oDAAA,wBAAgB;IAAAA,0DAAA,EAAQ;IAClDA,4DAAA,0BAAoD;IAChDA,uDAAA,iBAKE;IAEVA,0DADI,EAAiB,EACf;IAEFA,4DADJ,eAA0B,iBACC;IAAAA,oDAAA,kBAAU;IAAAA,0DAAA,EAAQ;IACzCA,4DAAA,0BAAoD;IAChDA,uDAAA,iBAKE;IAGdA,0DAFQ,EAAiB,EACf,EACJ;IACNA,4DAAA,iBAAmB;IAAAA,oDAAA,aAAK;IAAAA,0DAAA,EAAQ;IAChCA,4DAAA,0BAAqC;IACjCA,uDAAA,oBAKY;IAChBA,0DAAA,EAAiB;IAEbA,4DADJ,eAAuB,wBAKlB;IAJDA,oDAAA,OAIC;IAITA,0DAFQ,EAAe,EACb,EACH;;;;IAxFHA,wDAAA,cAAAS,MAAA,CAAAG,IAAA,CAAkB;;;;;;IA6FlBZ,4DAJJ,iBAGC,iBAC+D;IACxDA,oDAAA,eACJ;IAAAA,0DAAA,EAAS;IACTA,4DAAA,iBAAwD;IAArBA,wDAAA,mBAAA6O,oEAAA;MAAA7O,2DAAA,CAAAwB,GAAA;MAAA,MAAAf,MAAA,GAAAT,2DAAA;MAAA,OAAAA,yDAAA,CAASS,MAAA,CAAAgB,QAAA,EAAU;IAAA,EAAC;IACnDzB,oDAAA,aACJ;IACJA,0DADI,EAAS,EACJ;;;;;IAGTA,4DAAA,eAEC;IACGA,uDAAA,sBAAyC;IACzCA,4DAAA,QAAG;IAAAA,oDAAA,qCAA8B;IACrCA,0DADqC,EAAI,EAClC;;;AAKb,MAAO6I,yBAA0B,SAAQ/I,yDAAY;EAIvD,IAAW6B,EAAEA,CAAA;IACT,OAAO,IAAI,CAACG,KAAK,EAAEH,EAAE,IAAI,EAAE;EAC/B;EAaAE,YACqCC,KAAkB,EAC3CE,WAAoD;IAE5D,KAAK,EAAE;IAH0B,KAAAF,KAAK,GAALA,KAAK;IAC9B,KAAAE,WAAW,GAAXA,WAAW;IApBG,KAAAqE,KAAK,GAAG,IAAIT,uDAAY,EAAe;IAC1D,KAAA3D,OAAO,GAAY,KAAK;IAMf,KAAArB,IAAI,GAAG,IAAIkF,qDAAS,CAAC;MACjCnE,EAAE,EAAE,IAAIkE,uDAAW,CAAC,EAAE,CAAC;MACvB/E,IAAI,EAAE,IAAI+E,uDAAW,CAAO,IAAI,CAAC;MACjCjD,IAAI,EAAE,IAAIiD,uDAAW,CAAC,EAAE,EAAE,CAACnG,sDAAU,CAAC0D,QAAQ,CAAC,CAAC;MAChDP,KAAK,EAAE,IAAIgD,uDAAW,CAAC,EAAE,EAAE,CAACnG,sDAAU,CAAC0D,QAAQ,CAAC,CAAC;MACjDF,YAAY,EAAE,IAAI2C,uDAAW,CAAC,EAAE,CAAC;MACjCiJ,SAAS,EAAE,IAAIjJ,uDAAW,CAAC,EAAE,CAAC;MAC9BU,KAAK,EAAE,IAAIV,uDAAW,CAAC,EAAE,CAAC;MAC1BkJ,IAAI,EAAE,IAAIlJ,uDAAW,CAAC,KAAK;KAC9B,CAAC;IAOE,IAAI/D,KAAK,EAAE,IAAI,CAAClB,IAAI,CAACC,UAAU,CAACiB,KAAK,CAAC;IACtC0J,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC7K,IAAI,CAACgB,KAAK,EAAEE,KAAK,CAAC;EACrD;EAEOK,QAAQA,CAAA;IACX,IAAI,CAACK,YAAY,CACb,MAAM,EACN,IAAI,CAAC5B,IAAI,CAAC8B,YAAY,CAACC,SAAS,CAAEf,KAAK,IAAI;MACvC,IAAIA,KAAK,CAACd,IAAI,EAAE;QACZ,IAAI,CAACF,IAAI,CAACC,UAAU,CAAC;UACjBgC,KAAK,EAAEjB,KAAK,CAACd,IAAI,CAAC+B,KAAK;UACvBD,IAAI,EAAEhB,KAAK,CAACd,IAAI,CAAC8B;SACpB,CAAC;MACN;IACJ,CAAC,CAAC,CACL;EACL;EAEOnB,QAAQA,CAAA;IACX,IAAI,CAAC,IAAI,CAACb,IAAI,CAACqD,KAAK,EAAE;IACtB,IAAI,CAAChC,OAAO,GAAG,IAAI;IACnB,MAAML,KAAK,GAAG,IAAI,CAAChB,IAAI,CAACgB,KAAK;IAC7B,IAAIA,KAAK,CAACd,IAAI,EAAE;MACZc,KAAK,CAACiB,KAAK,GAAGjB,KAAK,CAACd,IAAI,CAAC+B,KAAK;MAC9BjB,KAAK,CAACgB,IAAI,GAAGhB,KAAK,CAACd,IAAI,CAAC8B,IAAI;IAChC;IACA,IAAI,CAACZ,WAAW,CAACyE,YAAY,GAAG,IAAI;IACpC,IAAI,CAACJ,KAAK,CAACK,IAAI,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,QAAQ,EAAEhF;IAAK,CAAE,CAAC;EACxD;EAAC,QAAA0C,CAAA;qBApDQuE,yBAAyB,EAAA7I,+DAAA,CAoBtBL,qEAAe,GAAAK,+DAAA,CAAAwE,kEAAA;EAAA;EAAA,QAAAE,EAAA;UApBlBmE,yBAAyB;IAAAlE,SAAA;IAAAkC,OAAA;MAAAR,KAAA;IAAA;IAAAzB,QAAA,GAAA5E,wEAAA;IAAA8E,KAAA;IAAAC,IAAA;IAAAC,MAAA,EAAAA,CAAA;MAAA,IAAAgK,MAAA;MAAA,WAAAC,iBAAA,oBAAAA,iBAAA;;;;;;;iBA5BjBC,SAAA,iGAED;;;;;;QA9FJlP,4DAFR,aAAuB,gBAC2C,YACzC;QAAAA,oDAAA,GAAsC;QAAAA,0DAAA,EAAK;QAC5DA,wDAAA,IAAAmP,2CAAA,oBAAyD;QAG7DnP,0DAAA,EAAS;QA6FTA,wDA5FA,IAAAoP,yCAAA,mBAIC,IAAAC,2CAAA,oBA2FA;QAQLrP,0DAAA,EAAM;QACNA,wDAAA,IAAAsP,gDAAA,gCAAAtP,oEAAA,CAAyB;;;;QA7GAA,uDAAA,GAAsC;QAAtCA,gEAAA,KAAAoF,GAAA,CAAAzD,EAAA,mCAAsC;QAC9C3B,uDAAA,EAAc;QAAdA,wDAAA,UAAAoF,GAAA,CAAAnD,OAAA,CAAc;QAKtBjC,uDAAA,EAAgB;QAAAA,wDAAhB,UAAAoF,GAAA,CAAAnD,OAAA,CAAgB,aAAA0D,aAAA,CAAe;QA4F/B3F,uDAAA,EAAc;QAAdA,wDAAA,UAAAoF,GAAA,CAAAnD,OAAA,CAAc","sources":["./apps/concierge/src/app/parking/parking-booking-modal.component.ts","./apps/concierge/src/app/parking/parking-space-modal.component.ts","./apps/concierge/src/app/parking/parking-state.service.ts","./apps/concierge/src/app/parking/parking-user-modal.component.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Booking, BookingFormService } from '@placeos/bookings';\nimport { AsyncHandler, currentUser } from '@placeos/common';\nimport { BuildingLevel } from '@placeos/organisation';\nimport { User } from '@placeos/users';\n\n@Component({\n    selector: 'parking-booking-modal',\n    template: `\n        <div class=\"w-[32rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">\n                    {{ id ? 'Edit' : 'New' }} Parking Reservation\n                </h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col max-h-[65vh] overflow-auto\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex items-center space-x-2\" *ngIf=\"!user\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"user\"\n                    ></a-user-search-field>\n                    <button\n                        icon\n                        matRipple\n                        class=\"mb-5 h-12 w-12 min-w-12 rounded bg-secondary text-secondary-content\"\n                        matTooltip=\"Clear Selected User\"\n                        (click)=\"\n                            form.patchValue({\n                                user: null,\n                                user_email: null,\n                                user_name: null,\n                                phone: null,\n                            })\n                        \"\n                    >\n                        <app-icon className=\"material-symbols-outlined\">\n                            person_cancel\n                        </app-icon>\n                    </button>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex-1\">\n                        <label for=\"user-name\">Name</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"user-name\"\n                                formControlName=\"user_name\"\n                                placeholder=\"Name\"\n                            />\n                            <mat-error>A name is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1\">\n                        <label for=\"email\">Email</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"email\"\n                                formControlName=\"user_email\"\n                                placeholder=\"Email\"\n                            />\n                            <mat-error>An email is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <label for=\"date\">Date</label>\n                <a-date-field formControlName=\"date\"></a-date-field>\n                <label for=\"parking-space\">Parking Space</label>\n                <parking-space-list-field\n                    name=\"parking-space\"\n                    formControlName=\"resources\"\n                    class=\"mb-2\"\n                ></parking-space-list-field>\n                <label for=\"plate-number\">\n                    Plate Number<span *ngIf=\"user\">*</span>\n                </label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <input\n                        matInput\n                        name=\"plate-number\"\n                        formControlName=\"plate_number\"\n                        placeholder=\"Plate Number\"\n                    />\n                    <mat-error>A plate number is required</mat-error>\n                </mat-form-field>\n            </main>\n            <footer\n                *ngIf=\"!loading\"\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-base-200\"\n            >\n                <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                    Save\n                </button>\n            </footer>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center user-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking reservation...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingBookingModalComponent extends AsyncHandler {\n    public loading: boolean = false;\n    public readonly user = this._data.user;\n    public readonly date = this._data.date;\n\n    public form = this._booking_form.form;\n\n    public get id() {\n        return this.form.value.id;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA)\n        private _data: {\n            booking: Booking;\n            user?: User;\n            link_id?: string;\n            date?: number;\n            level?: BuildingLevel;\n        },\n        private _booking_form: BookingFormService,\n        private _dialog_ref: MatDialogRef<ParkingBookingModalComponent>\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._booking_form.newForm(this._data.booking);\n        this._booking_form.setOptions({ type: 'parking' });\n        this.subscription(\n            'user_changes',\n            this.form.controls.user.valueChanges.subscribe((user) => {\n                if (!user) return;\n                this.form.patchValue({\n                    user_name: user.name,\n                    user_email: user.email,\n                    user_id: user.id || user.email,\n                    attendees: [user],\n                });\n            })\n        );\n        this.form.patchValue({\n            all_day: true,\n            booking_type: 'parking',\n            user: (this._data.user as any) || currentUser(),\n        });\n        if (this._data.user) {\n            this.form.patchValue({\n                user_email: this._data.user.email,\n                user_id: this._data.user.email,\n                user_name: this._data.user.name,\n                attendees: [this._data.user],\n            });\n            this.form.controls.plate_number.setValidators([\n                Validators.required,\n            ]);\n            this.form.controls.user_name.disable();\n            this.form.controls.user_email.disable();\n        }\n        if (this._data.level) {\n            this._booking_form.setOptions({ zone_id: this._data.level.id });\n        }\n        if (this._data.link_id) {\n            this.form.patchValue({ parent_id: this._data.link_id });\n        }\n        if (this._data.date) {\n            this.form.patchValue({ date: this._data.date });\n            this.subscription(\n                'form_change',\n                this.form.valueChanges.subscribe((v) => {\n                    this.timeout(\n                        'disable_date',\n                        () =>\n                            this.form.get('date').disable({ emitEvent: false }),\n                        50\n                    );\n                })\n            );\n            this.form.get('date').disable();\n        }\n    }\n\n    public async postForm() {\n        this.form.updateValueAndValidity();\n        if (!this.form.valid) return;\n        this.loading = true;\n        const result = await this._booking_form.postForm().catch((e) => {\n            this.loading = false;\n            this.form.controls.plate_number.setValidators([]);\n            throw e;\n        });\n        this.form.controls.plate_number.setValidators([]);\n        this._dialog_ref.close(result.id);\n    }\n}\n","import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent } from '@placeos/common';\nimport { User } from '@placeos/users';\nimport { ParkingSpace } from './parking-state.service';\n\n@Component({\n    selector: 'parking-space-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking Space</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col\"\n                [formGroup]=\"form\"\n            >\n                <label for=\"name\">Parking Space Name/Bay Number</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"name\" formControlName=\"name\" />\n                    <mat-error>A name is required for parking spaces</mat-error>\n                </mat-form-field>\n                <label for=\"map-id\">Map ID</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"map-id\" formControlName=\"map_id\" />\n                    <mat-error>\n                        A map ID is required for parking spaces\n                    </mat-error>\n                </mat-form-field>\n                <label for=\"user\">Assigned User</label>\n                <div class=\"flex items-center space-x-2\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"assigned_user\"\n                        class=\"mb-4\"\n                    ></a-user-search-field>\n                    <button\n                        icon\n                        matRipple\n                        class=\"mb-5 h-12 w-12 min-w-12 rounded bg-secondary text-secondary-content\"\n                        matTooltip=\"Clear Assigned User\"\n                        (click)=\"\n                            form.patchValue({\n                                assigned_user: null,\n                                assigned_to: null,\n                                assigned_name: null\n                            })\n                        \"\n                    >\n                        <app-icon className=\"material-symbols-outlined\">\n                            person_cancel\n                        </app-icon>\n                    </button>\n                </div>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                    ></textarea>\n                </mat-form-field>\n                <!-- <label for=\"map-rotation\">Map Rotation</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"map-rotation\"\n                        formControlName=\"map_rotation\"\n                    ></textarea>\n                </mat-form-field> -->\n                <div class=\"flex items-center justify-center space-x-2\">\n                    <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                        Cancel\n                    </button>\n                    <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                        Save\n                    </button>\n                </div>\n            </main>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking space details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingSpaceModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        name: new FormControl('', [Validators.required]),\n        map_id: new FormControl('', [Validators.required]),\n        assigned_user: new FormControl<User>(null),\n        assigned_to: new FormControl(''),\n        assigned_name: new FormControl(''),\n        notes: new FormControl(''),\n        map_rotation: new FormControl(0),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingSpace,\n        private _dialog_ref: MatDialogRef<ParkingSpaceModalComponent>\n    ) {\n        if (_data) this.form.patchValue(_data);\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = this.form.value;\n        if (value.assigned_user) {\n            value.assigned_to = value.assigned_user.email;\n            value.assigned_name = value.assigned_user.name;\n        }\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    approveBooking,\n    Booking,\n    queryBookings,\n    rejectBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    SettingsService,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { randomInt } from '@placeos/common';\nimport { endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport {\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { ParkingSpaceModalComponent } from './parking-space-modal.component';\nimport { ParkingUserModalComponent } from './parking-user-modal.component';\nimport { ParkingBookingModalComponent } from './parking-booking-modal.component';\nimport { User } from '@placeos/users';\n\nexport interface ParkingOptions {\n    date: number;\n    search: string;\n    zones: string[];\n}\n\nexport interface ParkingSpace {\n    id: string;\n    map_id: string;\n    name: string;\n    notes: string;\n    assigned_to: string;\n}\n\nexport interface ParkingUser {\n    id: string;\n    name: string;\n    email: string;\n    car_model: string;\n    car_colour: string;\n    plate_number: string;\n    phone: string;\n    notes: string;\n    deny: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ParkingStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _change = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ParkingOptions>({\n        date: Date.now(),\n        search: '',\n        zones: [],\n    });\n    private _loading = new BehaviorSubject<string[]>([]);\n    /** List of available parking levels for the current building */\n    public levels = this._org.level_list.pipe(\n        map((_) => {\n            if (!this._settings.get('app.use_region')) {\n                const blds = this._org.buildingsForRegion();\n                const bld_ids = blds.map((bld) => bld.id);\n                const list = _.filter(\n                    (lvl) =>\n                        bld_ids.includes(lvl.parent_id) &&\n                        lvl.tags.includes('parking')\n                );\n                list.map((lvl) => ({\n                    ...lvl,\n                    display_name: `${\n                        blds.find((_) => _.id === lvl.parent_id)?.display_name\n                    } - ${lvl.display_name}`,\n                }));\n                return list;\n            }\n            return _.filter(\n                (lvl) =>\n                    lvl.parent_id === this._org.building.id &&\n                    lvl.tags.includes('parking')\n            );\n        })\n    );\n    /** List of parking spaces for the current building/level */\n    public spaces = combineLatest([\n        this.levels,\n        this._options,\n        this._change,\n    ]).pipe(\n        filter(([lvls, options]) => !!(options.zones[0] || lvls[0]?.id)),\n        switchMap(([levels, options]) => {\n            this._loading.next([...this._loading.getValue(), 'spaces']);\n            return showMetadata(\n                options.zones[0] || levels[0]?.id,\n                'parking-spaces'\n            );\n        }),\n        map(\n            (metadata) =>\n                (metadata.details instanceof Array\n                    ? metadata.details\n                    : []) as ParkingSpace[]\n        ),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'spaces')\n            )\n        ),\n        shareReplay(1)\n    );\n    /** List of parking spaces for the current building/level */\n    public users = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld?.id),\n        switchMap(([bld]) => {\n            this._loading.next([...this._loading.getValue(), 'users']);\n            return showMetadata(bld.id, 'parking-users');\n        }),\n        map(\n            (metadata) =>\n                (metadata.details instanceof Array\n                    ? metadata.details\n                    : []) as ParkingUser[]\n        ),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'users')\n            )\n        ),\n        shareReplay(1)\n    );\n    /** List of parking bookings for the current building/level */\n    public bookings = combineLatest([\n        this._org.active_building,\n        this._options,\n        this.users,\n        this._poll,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([bld, options, users]) => {\n            this._loading.next([...this._loading.getValue(), 'bookings']);\n            return queryBookings({\n                period_start: getUnixTime(startOfDay(options.date)),\n                period_end: getUnixTime(endOfDay(options.date)),\n                type: 'parking',\n                zones: options.zones?.length\n                    ? options.zones.join(',')\n                    : (this._settings.get('app.use_region')\n                          ? this._org.region?.id\n                          : '') || bld?.id,\n            }).pipe(\n                map((list) => {\n                    for (const booking of list) {\n                        const user = users.find(\n                            (_) =>\n                                _.email.toLowerCase() ===\n                                booking.user_email.toLowerCase()\n                        );\n                        console.log('User:', user, users);\n                        if (user) {\n                            booking.extension_data.plate_number =\n                                booking.extension_data.plate_number ||\n                                user.plate_number;\n                        }\n                    }\n                    return list;\n                })\n            );\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'bookings')\n            )\n        ),\n        shareReplay(1)\n    );\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public setOptions(options: Partial<ParkingOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public startPolling(delay = 5000) {\n        this._poll.next(Date.now());\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    /** Add or update a space in the available list */\n    public async editSpace(space?: ParkingSpace) {\n        const ref = this._dialog.open(ParkingSpaceModalComponent, {\n            data: space,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone = this._options.getValue().zones[0];\n        const new_space = {\n            ...state.metadata,\n            id: state.metadata.id || `parking-${zone}.${randomInt(999_999)}`,\n        };\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        const idx = spaces.findIndex((_) => _.id === new_space.id);\n        if (idx >= 0) spaces[idx] = new_space;\n        else spaces.push(new_space);\n        const new_space_list = spaces;\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: new_space_list,\n            description: 'List of available parking spaces',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeSpace(space: ParkingSpace) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking Space',\n                content: `Are you sure you wish to remove the parking space \"${space.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking space...');\n        const zone = this._options.getValue().zones[0];\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: spaces.filter((_) => _.id !== space.id),\n            description: 'List of available parking spaces',\n        }).toPromise();\n        state.close();\n    }\n\n    /** Add or update a space in the available list */\n    public async editUser(user?: ParkingUser) {\n        console.log('Edit User', user);\n        const ref = this._dialog.open(ParkingUserModalComponent, {\n            data: user,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone = this._org.building.id;\n        const new_user = {\n            ...state.metadata,\n            id: state.metadata.id || `P:USR-${randomInt(999_999)}`,\n        };\n        if ('user' in new_user) delete new_user.user;\n        const users = await this.users.pipe(take(1)).toPromise();\n        const idx = users.findIndex((_) => _.id === new_user.id);\n        if (idx >= 0) users[idx] = new_user;\n        else users.push(new_user);\n        await updateMetadata(zone, {\n            name: 'parking-users',\n            details: users,\n            description: 'List of available parking users',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeUser(user: ParkingUser) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking User',\n                content: `Are you sure you wish to remove the parking user \"${user.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking user...');\n        const zone = this._options.getValue().zones[0];\n        const users = await this.users.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-users',\n            details: users.filter((_) => _.id !== user.id),\n            description: 'List of available parking users',\n        }).toPromise();\n        state.close();\n    }\n\n    public editReservation(\n        reservation?: Booking,\n        user: User = null,\n        link_id?: string,\n        date?: number\n    ) {\n        return new Promise<string>(async (resolve) => {\n            const levels = await this.levels.pipe(take(1)).toPromise();\n            const ref = this._dialog.open(ParkingBookingModalComponent, {\n                data: {\n                    booking: reservation,\n                    user,\n                    link_id,\n                    date,\n                    level: levels[0],\n                },\n            });\n            ref.afterClosed().subscribe((id) => resolve(id));\n        });\n    }\n\n    public async approveBooking(booking: Booking) {\n        const success = await approveBooking(booking.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error approving in desk booking')\n            : notifySuccess(\n                  `Approved parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM Do')}.`\n              );\n    }\n\n    public async rejectBooking(bookings: Booking) {\n        const success = await rejectBooking(bookings.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error rejecting in desk booking')\n            : notifySuccess(\n                  `Rejected parking reservation for ${\n                      bookings.user_name\n                  } on ${format(bookings.date, 'MMM Do')}.`\n              );\n    }\n}\n","import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AsyncHandler, DialogEvent } from '@placeos/common';\nimport { User } from '@placeos/users';\nimport { ParkingUser } from './parking-state.service';\n\n@Component({\n    selector: 'parking-user-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking User</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col max-h-[65vh] overflow-auto\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex items-center space-x-2\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"user\"\n                    ></a-user-search-field>\n                    <button\n                        icon\n                        matRipple\n                        class=\"mb-5 h-12 w-12 min-w-12 rounded bg-secondary text-secondary-content\"\n                        matTooltip=\"Clear Selected User\"\n                        (click)=\"\n                            form.patchValue({\n                                user: null,\n                                email: null,\n                                name: null,\n                                phone: null,\n                            })\n                        \"\n                    >\n                        <app-icon className=\"material-symbols-outlined\">\n                            person_cancel\n                        </app-icon>\n                    </button>\n                </div>\n                <label for=\"name\">Name</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        formControlName=\"name\"\n                        placeholder=\"Name\"\n                    />\n                    <mat-error>A name is required</mat-error>\n                </mat-form-field>\n                <label for=\"email\">Email</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"email\"\n                        formControlName=\"email\"\n                        placeholder=\"Email\"\n                    />\n                    <mat-error>An email is required</mat-error>\n                </mat-form-field>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"plate-number\">Car Number Plate</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"plate-number\"\n                                formControlName=\"plate_number\"\n                                placeholder=\"Car Plate Number\"\n                            />\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"car-color\">Car Colour</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"car-color\"\n                                formControlName=\"car_color\"\n                                placeholder=\"Car Colour\"\n                            />\n                        </mat-form-field>\n                    </div>\n                </div>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                        placeholder=\"User's Notes\"\n                    ></textarea>\n                </mat-form-field>\n                <div class=\"px-2 pb-2\">\n                    <mat-checkbox\n                        name=\"deny\"\n                        formControlName=\"deny\"\n                        i18n=\"@@deny\"\n                    >\n                        Deny User Parking Access\n                    </mat-checkbox>\n                </div>\n            </main>\n            <footer\n                *ngIf=\"!loading\"\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-base-200\"\n            >\n                <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                    Save\n                </button>\n            </footer>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center user-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking user details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingUserModalComponent extends AsyncHandler {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean = false;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        user: new FormControl<User>(null),\n        name: new FormControl('', [Validators.required]),\n        email: new FormControl('', [Validators.required]),\n        plate_number: new FormControl(''),\n        car_color: new FormControl(''),\n        notes: new FormControl(''),\n        deny: new FormControl(false),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingUser,\n        private _dialog_ref: MatDialogRef<ParkingUserModalComponent>\n    ) {\n        super();\n        if (_data) this.form.patchValue(_data);\n        console.log('User Modal', this.form.value, _data);\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'user',\n            this.form.valueChanges.subscribe((value) => {\n                if (value.user) {\n                    this.form.patchValue({\n                        email: value.user.email,\n                        name: value.user.name,\n                    });\n                }\n            })\n        );\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = this.form.value;\n        if (value.user) {\n            value.email = value.user.email;\n            value.name = value.user.name;\n        }\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n"],"names":["Validators","MAT_DIALOG_DATA","MatDialogRef","BookingFormService","AsyncHandler","currentUser","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","ParkingBookingModalComponent_main_5_div_1_Template_button_click_2_listener","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵresetView","form","patchValue","user","user_email","user_name","phone","ɵɵtemplate","ParkingBookingModalComponent_main_5_div_1_Template","ParkingBookingModalComponent_main_5_span_25_Template","ɵɵproperty","ɵɵadvance","ParkingBookingModalComponent_footer_6_Template_button_click_3_listener","_r3","postForm","ParkingBookingModalComponent","id","value","constructor","_data","_booking_form","_dialog_ref","loading","date","ngOnInit","newForm","booking","setOptions","type","subscription","controls","valueChanges","subscribe","name","email","user_id","attendees","all_day","booking_type","plate_number","setValidators","required","disable","level","zone_id","link_id","parent_id","v","timeout","get","emitEvent","_this","_asyncToGenerator","updateValueAndValidity","valid","result","catch","e","close","_","ɵɵdirectiveInject","i1","i2","_2","selectors","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","ParkingBookingModalComponent_Template","rf","ctx","ParkingBookingModalComponent_button_4_Template","ParkingBookingModalComponent_main_5_Template","ParkingBookingModalComponent_footer_6_Template","ParkingBookingModalComponent_ng_template_7_Template","ɵɵtemplateRefExtractor","ɵɵtextInterpolate1","load_state_r4","EventEmitter","FormControl","FormGroup","ParkingSpaceModalComponent_main_5_Template_button_click_17_listener","assigned_user","assigned_to","assigned_name","ParkingSpaceModalComponent_main_5_Template_button_click_27_listener","ParkingSpaceModalComponent","event","map_id","notes","map_rotation","disableClose","emit","reason","metadata","outputs","ParkingSpaceModalComponent_Template","ParkingSpaceModalComponent_button_4_Template","ParkingSpaceModalComponent_main_5_Template","ParkingSpaceModalComponent_ng_template_6_Template","load_state_r3","MatDialog","approveBooking","queryBookings","rejectBooking","notifyError","notifySuccess","openConfirmModal","SettingsService","OrganisationService","showMetadata","updateMetadata","randomInt","endOfDay","format","getUnixTime","startOfDay","BehaviorSubject","combineLatest","debounceTime","filter","first","map","shareReplay","switchMap","take","tap","ParkingUserModalComponent","ParkingStateService","_org","_dialog","_settings","_poll","_change","_options","Date","now","search","zones","_loading","levels","level_list","pipe","blds","buildingsForRegion","bld_ids","bld","list","lvl","includes","tags","display_name","find","building","spaces","lvls","options","next","getValue","details","Array","users","active_building","bookings","period_start","period_end","length","join","region","toLowerCase","console","log","extension_data","asObservable","startPolling","delay","interval","stopPolling","clearInterval","editSpace","space","ref","open","data","state","Promise","race","afterClosed","toPromise","componentInstance","zone","new_space","idx","findIndex","push","new_space_list","description","removeSpace","_this2","title","content","icon","editUser","_this3","new_user","removeUser","_this4","editReservation","reservation","_this5","_ref","resolve","_x","apply","arguments","success","ɵɵinject","i3","factory","ɵfac","providedIn","ParkingUserModalComponent_main_5_Template_button_click_3_listener","ɵɵi18n","ParkingUserModalComponent_footer_6_Template_button_click_3_listener","car_color","deny","i18n_0","ngI18nClosureMode","$localize","ParkingUserModalComponent_button_4_Template","ParkingUserModalComponent_main_5_Template","ParkingUserModalComponent_footer_6_Template","ParkingUserModalComponent_ng_template_7_Template"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}