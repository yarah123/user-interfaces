{"version":3,"file":"apps_concierge_src_app_email-templates_email-templates_module_ts.js","mappings":"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","sources":["./apps/concierge/src/app/email-templates/email-template-manage.component.ts","./apps/concierge/src/app/email-templates/email-templates-list.component.ts","./apps/concierge/src/app/email-templates/email-templates-state.service.ts","./apps/concierge/src/app/email-templates/email-templates.component.ts","./apps/concierge/src/app/email-templates/email-templates.module.ts","./libs/bookings/src/index.ts","./libs/bookings/src/lib/desk.service.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport {\n    EmailTemplate,\n    EmailTemplatesStateService,\n} from './email-templates-state.service';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AsyncHandler, notifySuccess } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'email-template-manage',\n    template: `\n        <div class=\"absolute inset-0 bg-base-100 overflow-auto p-8\">\n            <form\n                class=\"max-w-full w-[48rem] mx-auto min-h-full\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex items-center space-x-2 mb-8\">\n                    <a\n                        icon\n                        matRipple\n                        [routerLink]=\"['/email-templates']\"\n                        class=\"-ml-8\"\n                    >\n                        <app-icon>arrow_back</app-icon>\n                    </a>\n                    <h2 class=\"text-2xl font-medium\">\n                        {{ template?.id ? 'Edit' : 'New' }} Email Template\n                    </h2>\n                    <div class=\"flex-1\"></div>\n                    <button\n                        btn\n                        matRipple\n                        type=\"button\"\n                        class=\"w-48\"\n                        (click)=\"save()\"\n                    >\n                        Save Template\n                    </button>\n                </div>\n                <div class=\"flex items-center space-x-4\">\n                    <div class=\"flex-1 space-y-2\">\n                        <label for=\"title\">Building</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <mat-select\n                                placeholder=\"Select Building\"\n                                formControlName=\"zone_id\"\n                            >\n                                <mat-option\n                                    *ngFor=\"let bld of buildings | async\"\n                                    [value]=\"bld.id\"\n                                >\n                                    {{ bld.display_name || bld.name }}\n                                </mat-option>\n                            </mat-select>\n                            <mat-error>A building is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 space-y-2\">\n                        <label for=\"title\">Category</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <mat-select\n                                placeholder=\"Select Category\"\n                                formControlName=\"category\"\n                            >\n                                <mat-option value=\"internal\">\n                                    Internal\n                                </mat-option>\n                                <mat-option value=\"external\">\n                                    External\n                                </mat-option>\n                            </mat-select>\n                            <mat-error>A category is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 space-y-2\">\n                        <label for=\"title\">Trigger</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <mat-select\n                                placeholder=\"Select Trigger\"\n                                formControlName=\"trigger\"\n                            >\n                                <mat-option value=\"none\">None</mat-option>\n                                <mat-option value=\"checkout\">\n                                    Checkout\n                                </mat-option>\n                                <mat-option value=\"checkin\">Checkin</mat-option>\n                                <mat-option value=\"booking\">Booking</mat-option>\n                                <mat-option value=\"event\">Event</mat-option>\n                            </mat-select>\n                            <mat-error>A trigger is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <app-icon matPrefix class=\"text-2xl relative -left-1\">\n                        description\n                    </app-icon>\n                    <input\n                        matInput\n                        placeholder=\"Template Title\"\n                        formControlName=\"title\"\n                    />\n                    <mat-error>A title for the template is required</mat-error>\n                </mat-form-field>\n                <rich-text-input\n                    formControlName=\"body\"\n                    placeholder=\"Body of the email template\"\n                    [images_allowed]=\"true\"\n                    class=\"min-h-[calc(100vh-20rem)] block\"\n                ></rich-text-input>\n            </form>\n        </div>\n        <ng-template #load_state>\n            <div class=\"absolute inset-0 bg-base-100\">\n                <div\n                    class=\"h-full w-full flex flex-col items-center justify-center space-y-2\"\n                >\n                    <mat-spinner [diameter]=\"32\"></mat-spinner>\n                    <p>{{ loading }}</p>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class EmailTemplateManageComponent extends AsyncHandler {\n    public loading = '';\n    public template: EmailTemplate;\n    public readonly buildings = this._org.building_list;\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        title: new FormControl('', [Validators.required]),\n        category: new FormControl('internal'),\n        trigger: new FormControl(''),\n        body: new FormControl('', [Validators.required]),\n        zone_id: new FormControl(''),\n    });\n\n    constructor(\n        private _org: OrganisationService,\n        private _state: EmailTemplatesStateService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe(async (params) => {\n                if (params.has('id')) {\n                    this.loading = 'Loading email template...';\n                    this.template = await this._state.loadTemplate(\n                        params.get('id')\n                    );\n                    this.loading = '';\n                    if (!this.template) {\n                        this._router.navigate(['/email-templates', 'manage']);\n                    } else {\n                        this.form.patchValue(this.template);\n                    }\n                }\n            })\n        );\n    }\n\n    public async save() {\n        this.loading = 'Saving email template...';\n        await this._state.saveTemplate({\n            ...(this.template || {}),\n            ...this.form.getRawValue(),\n        } as any);\n        this.loading = '';\n        notifySuccess('Successfully saved email template');\n        this._router.navigate(['/email-templates']);\n    }\n}\n","import { Component } from '@angular/core';\nimport {\n    EmailTemplatesFilters,\n    EmailTemplatesStateService,\n} from './email-templates-state.service';\n\n@Component({\n    selector: 'email-templates-list',\n    template: ` <div class=\"absolute inset-0 flex flex-col\">\n        <div class=\"flex items-center justify-between p-8 space-x-2\">\n            <h2 class=\"text-2xl font-medium\">Email Templates</h2>\n            <div class=\"flex-1\"></div>\n            <mat-form-field appearance=\"outline\" class=\"w-56 no-subscript\">\n                <mat-select\n                    [ngModel]=\"(filters | async)?.category\"\n                    placeholder=\"All Categories\"\n                    (ngModelChange)=\"setFilters({ category: $event })\"\n                >\n                    <mat-option value=\"\">All Categories</mat-option>\n                    <mat-option value=\"internal\">Internal</mat-option>\n                    <mat-option value=\"external\">External</mat-option>\n                </mat-select>\n            </mat-form-field>\n            <a btn matRipple [routerLink]=\"['/email-templates', 'manage']\">\n                <div class=\"ml-2\">Create Template</div>\n                <app-icon class=\"text-2xl\">add</app-icon>\n            </a>\n        </div>\n        <div class=\"h-1/2 flex-1 w-full px-8 overflow-y-auto relative\">\n            <div class=\"w-full min-h-full overflow-x-auto\">\n                <simple-table\n                    class=\"min-w-[56rem] w-full block text-sm\"\n                    [data]=\"templates\"\n                    empty_message=\"No group events for selected period\"\n                    [columns]=\"[\n                        { key: 'title', name: 'Title' },\n                        {\n                            key: 'category',\n                            name: 'Category',\n                            show: !(filters | async)?.category\n                        },\n                        { key: 'trigger', name: 'Trigger' },\n                        {\n                            key: 'zone_id',\n                            name: 'Building',\n                            content: bld_template\n                        },\n                        {\n                            key: 'created_at',\n                            name: 'Created',\n                            size: '8rem',\n                            content: date_template\n                        },\n                        {\n                            key: 'actions',\n                            name: ' ',\n                            size: '6.5rem',\n                            content: actions_template\n                        }\n                    ]\"\n                    [sortable]=\"true\"\n                >\n                </simple-table>\n                <ng-template #date_template let-data=\"data\">\n                    <div class=\"opacity-60\">\n                        {{ data * 1000 | date: 'mediumDate' }}\n                    </div>\n                </ng-template>\n                <ng-template #bld_template let-data=\"data\">\n                    <div class=\"p-4\">\n                        {{ (data | building | async)?.display_name }}\n                    </div>\n                </ng-template>\n                <ng-template #actions_template let-row=\"row\">\n                    <a\n                        btn\n                        icon\n                        matRipple\n                        (click)=\"editTemplate(row)\"\n                        [routerLink]=\"['/email-templates', 'manage', row.id]\"\n                    >\n                        <app-icon>edit</app-icon>\n                    </a>\n                    <button\n                        icon\n                        matRipple\n                        class=\"text-error\"\n                        (click)=\"removeTemplate(row)\"\n                    >\n                        <app-icon>delete</app-icon>\n                    </button>\n                </ng-template>\n            </div>\n        </div>\n    </div>`,\n    styles: [``],\n})\nexport class EmailTemplatesListComponent {\n    public readonly filters = this._state.filters;\n    public readonly templates = this._state.filtered_templates;\n\n    public readonly removeTemplate = (t) => this._state.removeTemplate(t);\n\n    constructor(private _state: EmailTemplatesStateService) {}\n\n    public setFilters(filters: Partial<EmailTemplatesFilters>) {\n        this._state.setFilters(filters);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { notifySuccess, randomString, SettingsService } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport {\n    PlaceMetadata,\n    showMetadata,\n    updateMetadata,\n} from '@placeos/ts-client';\nimport { getUnixTime } from 'date-fns';\nimport { BehaviorSubject, combineLatest, forkJoin, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n} from 'rxjs/operators';\n\nexport interface EmailTemplate {\n    id: string;\n    title: string;\n    zone_id: string;\n    category: 'internal' | 'external';\n    trigger: string;\n    body: string;\n    preview_url: string;\n    created_at: number;\n    updated_at: number;\n}\n\nexport interface EmailTemplateDefinition {\n    id: string;\n    name: string;\n    description: string;\n    fields: { name: string; description: string }[];\n}\n\nexport interface EmailTemplatesFilters {\n    category?: 'internal' | 'external';\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EmailTemplatesStateService {\n    private _filters = new BehaviorSubject<EmailTemplatesFilters>({});\n    private _change = new BehaviorSubject(0);\n\n    public readonly available_template_definitions = combineLatest([\n        this._org.active_building,\n        this._org.active_region,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld),\n        switchMap(() =>\n            showMetadata(this._org.organisation.id, 'email_template_fields')\n                .pipe(\n                    map((_) => {\n                        const definitions =\n                            (_ as any)?.details ||\n                            ({} as Record<string, EmailTemplateDefinition>);\n                        return Object.keys(definitions).map(\n                            (key) =>\n                                ({\n                                    id: key,\n                                    name: definitions[key].name,\n                                    description:\n                                        definitions[key].description || '',\n                                    fields: definitions[key].fields.map(\n                                        (field) => ({\n                                            name: field.name,\n                                            description:\n                                                field.description || '',\n                                        })\n                                    ),\n                                } as EmailTemplateDefinition)\n                        );\n                    })\n                )\n                .pipe(catchError(() => of([] as EmailTemplateDefinition[])))\n        ),\n        shareReplay(1)\n    );\n\n    private _processTemplates(metadata: PlaceMetadata, zone_id: string) {\n        const data = metadata.details;\n        return ((data instanceof Array ? data : '') || []).map(\n            (template) => ({ ...template, zone_id } as EmailTemplate)\n        );\n    }\n\n    public readonly templates = combineLatest([\n        this._org.active_building,\n        this._org.active_region,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld),\n        switchMap(([bld, region]) =>\n            forkJoin([\n                showMetadata(this._org.organisation.id, 'email_templates').pipe(\n                    map((_) =>\n                        this._processTemplates(_, this._org.organisation.id)\n                    ),\n                    catchError(() => of([] as EmailTemplate[]))\n                ),\n                showMetadata(bld.id, 'email_templates').pipe(\n                    map((_) => this._processTemplates(_, bld.id)),\n                    catchError(() => of([] as EmailTemplate[]))\n                ),\n                showMetadata(region.id, 'email_templates').pipe(\n                    map((_) => this._processTemplates(_, region.id)),\n                    catchError(() => of([] as EmailTemplate[]))\n                ),\n            ])\n        ),\n        map(([org_templates, bld_templates, region_templates]) =>\n            org_templates.concat(bld_templates).concat(region_templates)\n        ),\n        shareReplay(1)\n    );\n    public readonly filters = this._filters.asObservable();\n\n    public readonly filtered_templates = combineLatest([\n        this.templates,\n        this.filters,\n    ]).pipe(\n        map(([templates, filters]) => {\n            const category = filters.category || '';\n            return templates.filter(\n                (_) => _.category === category || category === ''\n            );\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {}\n\n    public async loadTemplate(id: string) {\n        const template_list = await this.templates.pipe(take(1)).toPromise();\n        return template_list.find((_) => _.id === id);\n    }\n\n    public async saveTemplate(template: EmailTemplate) {\n        if (!template.zone_id) return;\n        const template_list = await this.templates.pipe(take(1)).toPromise();\n        if (!template.id) {\n            template.id = `template-${randomString(8)}`;\n            template.created_at = getUnixTime(Date.now());\n        }\n        template.updated_at = getUnixTime(Date.now());\n        const zone_templates = template_list.filter(\n            (_) => _.zone_id === template.zone_id\n        );\n        const template_value = { ...template };\n        delete template_value.zone_id;\n        console.log('Templates:', template_list);\n        const new_template_list = [\n            ...zone_templates.filter((_) => _.id !== template.id),\n            template,\n        ];\n        await updateMetadata(template.zone_id, {\n            name: `email_templates`,\n            details: new_template_list,\n            description: 'Email Templates for Zone',\n        }).toPromise();\n        notifySuccess('Successfully saved template');\n    }\n\n    public async removeTemplate(template: EmailTemplate) {\n        const template_list = await this.templates.pipe(take(1)).toPromise();\n        const zone_templates = template_list.filter(\n            (_) => _.zone_id === template.zone_id\n        );\n        const new_template_list = zone_templates.filter(\n            (_) => _.id !== template.id\n        );\n        await updateMetadata(template.zone_id, {\n            name: `email_templates`,\n            details: new_template_list,\n            description: 'Email Templates for Zone',\n        }).toPromise();\n        notifySuccess('Successfully removed template');\n    }\n\n    public setFilters(filters: Partial<EmailTemplatesFilters>) {\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: '[app-email-templates]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"relative flex flex-col flex-1 w-1/2 h-full\">\n                <router-outlet></router-outlet>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class EmailTemplatesComponent {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Route, RouterModule } from '@angular/router';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { FormFieldsModule } from '@placeos/form-fields';\nimport { SharedBookingsModule } from '@placeos/bookings';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { EmailTemplatesComponent } from './email-templates.component';\nimport { EmailTemplatesListComponent } from './email-templates-list.component';\nimport { EmailTemplateManageComponent } from './email-template-manage.component';\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: EmailTemplatesComponent,\n        children: [{ path: '', component: EmailTemplatesListComponent }],\n    },\n    { path: 'manage', component: EmailTemplateManageComponent },\n    { path: 'manage/:id', component: EmailTemplateManageComponent },\n    { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n    declarations: [\n        EmailTemplatesComponent,\n        EmailTemplatesListComponent,\n        EmailTemplateManageComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedBookingsModule,\n        FormFieldsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class EmailTemplatesModule {}\n","export * from './lib/bookings.module';\nexport * from './lib/booking-form.service';\nexport * from './lib/booking.class';\nexport * from './lib/booking.utilities';\nexport * from './lib/bookings.fn';\nexport * from './lib/bookings.module';\nexport * from './lib/desk.service';\nexport * from './lib/lockers.service';\nexport * from './lib/booking-details-modal.component';\nexport * from './lib/booking-card.component';\nexport * from './lib/parking-select-modal/parking-select-modal.component';\n\nexport * from './lib/parking.service';\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {\n    currentUser,\n    DialogEvent,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { first, map } from 'rxjs/operators';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { Desk } from 'libs/organisation/src/lib/desk.class';\nimport { StaffUser, User } from 'libs/users/src/lib/user.class';\n\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskConfirmModalComponent } from './desk-confirm-modal.component';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksService {\n    public can_set_date = true;\n    public error_on_host = true;\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public async bookDesk({\n        desks,\n        host,\n        reason,\n        attendees,\n        date,\n    }: {\n        desks: Desk[];\n        host?: StaffUser;\n        attendees?: User[];\n        reason?: string;\n        date?: Date;\n    }) {\n        if (this.error_on_host && !host) {\n            return notifyError('You need to select a host to book a desk.');\n        } else {\n            host = host || currentUser();\n        }\n        reason = reason || '';\n        const level = this._org.levelWithID(\n            desks[0].zone instanceof Array ? desks[0].zone : [desks[0].zone?.id]\n        );\n        let ref: MatDialogRef<any> = this._dialog.open(\n            DeskQuestionsModalComponent\n        );\n        let success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        ref.close();\n        ref = this._dialog.open(DeskConfirmModalComponent, {\n            data: {\n                host,\n                desks,\n                date: date ? new Date(date) : new Date(),\n                reason,\n                level,\n                can_set_date: this.can_set_date,\n            },\n        });\n        success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        host = ref.componentInstance.host || host;\n        date = ref.componentInstance.date || date;\n        reason = ref.componentInstance.reason || reason;\n        if (!host) {\n            ref.close();\n            return notifyError('You need to select a host to book a desk. ');\n        }\n        ref.componentInstance.loading =\n            'Checking for existing desk bookings...';\n        const bookings = await queryBookings({\n            type: 'desk',\n            period_start: getUnixTime(startOfDay(date || new Date())),\n            period_end: getUnixTime(endOfDay(date || new Date())),\n        }).toPromise();\n        const desk_list = bookings.filter(\n            (d) => d.user_email.toLowerCase() === host.email.toLowerCase()\n        );\n        if (desk_list?.length) {\n            ref.close();\n            return notifyError(\n                'You currently already have a desk booked for the selected date.'\n            );\n        }\n        ref.componentInstance.loading = 'Booking desk...';\n        const users = [host, ...(attendees || [])];\n        await Promise.all([\n            desks.map((desk, idx) =>\n                this.makeDeskBooking(\n                    desk,\n                    host,\n                    date.valueOf() || new Date().valueOf(),\n                    reason,\n                    users[idx]\n                )\n            ),\n        ]);\n        notifySuccess('Successfully booked desk');\n        ref.close();\n        return true;\n    }\n\n    private async makeDeskBooking(\n        desk: Desk,\n        host: StaffUser,\n        date: number,\n        reason: string,\n        for_user: User = null\n    ) {\n        const location = `${desk.zone?.name}-${desk.id}`;\n        const level = this._org.levelWithID(\n            desk.zone instanceof Array ? desk.zone : [desk.zone?.id]\n        );\n        const zones = desk.zone?.id\n            ? [desk.zone?.id, level?.parent_id]\n            : [level?.parent_id];\n        const booking_data = {\n            booking_start: getUnixTime(startOfDay(date)),\n            user_id: for_user?.id || host.id,\n            user_name: for_user?.name || host.name,\n            user_email: for_user?.email || host.email,\n            booking_end: Math.floor(endOfDay(date).valueOf() / 1000),\n            asset_id: desk.id,\n            asset_name: desk.name,\n            title: reason,\n            description: location,\n            zones,\n            booking_type: 'desk',\n            extension_data: {\n                map_id: desk?.map_id || desk?.id,\n                groups: desk.groups,\n                for_user: for_user?.email,\n            },\n        };\n        return saveBooking(booking_data as any).toPromise();\n    }\n}\n"],"names":["EmailTemplatesStateService","FormControl","FormGroup","Validators","ActivatedRoute","Router","AsyncHandler","notifySuccess","OrganisationService","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","bld_r2","id","ɵɵadvance","ɵɵtextInterpolate1","display_name","name","ɵɵelement","ɵɵtextInterpolate","ctx_r2","loading","EmailTemplateManageComponent","constructor","_org","_state","_route","_router","buildings","building_list","form","title","required","category","trigger","body","zone_id","ngOnInit","_this","subscription","paramMap","subscribe","_ref","_asyncToGenerator","params","has","template","loadTemplate","get","navigate","patchValue","_x","apply","arguments","save","_this2","saveTemplate","getRawValue","_","ɵɵdirectiveInject","i1","i2","i3","_2","selectors","features","ɵɵInheritDefinitionFeature","decls","vars","consts","EmailTemplateManageComponent_Template","rf","ctx","ɵɵlistener","EmailTemplateManageComponent_Template_button_click_9_listener","ɵɵrestoreView","_r1","ɵɵresetView","ɵɵtemplate","EmailTemplateManageComponent_mat_option_17_Template","EmailTemplateManageComponent_ng_template_56_Template","ɵɵtemplateRefExtractor","ɵɵpureFunction0","_c0","ɵɵpipeBind1","ɵɵpipeBind2","data_r2","tmp_5_0","data_r3","EmailTemplatesListComponent_ng_template_27_Template_a_click_0_listener","row_r5","_r4","row","ctx_r5","ɵɵnextContext","editTemplate","EmailTemplatesListComponent_ng_template_27_Template_button_click_3_listener","removeTemplate","ɵɵpureFunction1","_c8","EmailTemplatesListComponent","filters","templates","filtered_templates","t","setFilters","EmailTemplatesListComponent_Template","EmailTemplatesListComponent_Template_mat_select_ngModelChange_6_listener","$event","EmailTemplatesListComponent_ng_template_23_Template","EmailTemplatesListComponent_ng_template_25_Template","EmailTemplatesListComponent_ng_template_27_Template","tmp_3_0","ɵɵpureFunction6","_c7","_c1","_c2","tmp_6_0","_c3","_c4","bld_template_r8","_c5","date_template_r7","_c6","actions_template_r9","randomString","SettingsService","showMetadata","updateMetadata","getUnixTime","BehaviorSubject","combineLatest","forkJoin","of","catchError","filter","map","shareReplay","switchMap","take","_processTemplates","metadata","data","details","Array","_settings","_filters","_change","available_template_definitions","active_building","active_region","pipe","bld","organisation","definitions","Object","keys","key","description","fields","field","region","org_templates","bld_templates","region_templates","concat","asObservable","template_list","toPromise","find","created_at","Date","now","updated_at","zone_templates","template_value","console","log","new_template_list","_this3","next","getValue","ɵɵinject","factory","ɵfac","providedIn","EmailTemplatesComponent","attrs","EmailTemplatesComponent_Template","CommonModule","FormsModule","RouterModule","SharedSpacesModule","FormFieldsModule","SharedBookingsModule","UIModule","ROUTES","path","component","children","redirectTo","EmailTemplatesModule","_3","forChild","declarations","imports","MatDialog","currentUser","notifyError","endOfDay","startOfDay","first","queryBookings","saveBooking","DeskConfirmModalComponent","DeskQuestionsModalComponent","DesksService","_dialog","can_set_date","error_on_host","bookDesk","desks","host","reason","attendees","date","level","levelWithID","zone","ref","open","success","Promise","race","componentInstance","event","afterClosed","close","bookings","type","period_start","period_end","desk_list","d","user_email","toLowerCase","email","length","users","all","desk","idx","makeDeskBooking","valueOf","for_user","location","zones","parent_id","booking_data","booking_start","user_id","user_name","booking_end","Math","floor","asset_id","asset_name","booking_type","extension_data","map_id","groups"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}